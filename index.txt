1:"$Sreact.fragment"
2:I[2708,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"WorkerContextProvider"]
3:I[4620,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
4:I[81105,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
5:I[86240,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/c63eea34c69bde5e.js"],"default"]
7:I[83822,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"MetadataBoundary"]
9:I[83822,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"OutletBoundary"]
c:I[2541,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"AsyncMetadataOutlet"]
e:I[83822,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"ViewportBoundary"]
10:I[12447,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
:HL["/_next/static/chunks/78f1306480580587.css","style"]
0:{"P":null,"b":"CsWEmrvEF7fw4CBMXoLcT","p":"","c":["",""],"i":false,"f":[[["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/78f1306480580587.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/1d2d43591a84e045.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/0f63189634a29548.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"pageBody","children":[["$","h2",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L5",null,{"href":"/","children":"Return Home"}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",["$","$L7",null,{"children":"$L8"}],[["$","script","script-0",{"src":"/_next/static/chunks/e8a17fa903d5acc5.js","async":true,"nonce":"$undefined"}]],["$","$L9",null,{"children":["$La","$Lb",["$","$Lc",null,{"promise":"$@d"}]]}]]}],{},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Y1VIZ3wwVmrsJcinvUcOU",{"children":[["$","$Le",null,{"children":"$Lf"}],null]}],null]}],false]],"m":"$undefined","G":["$10","$undefined"],"s":false,"S":true}
11:"$Sreact.suspense"
12:I[2541,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"AsyncMetadata"]
14:I[85995,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/e8a17fa903d5acc5.js"],"ImmutableConsole"]
15:I[91842,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/e8a17fa903d5acc5.js"],"Header"]
16:I[76295,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/e8a17fa903d5acc5.js"],"MarkdownContent"]
8:["$","$11",null,{"fallback":null,"children":["$","$L12",null,{"promise":"$@13"}]}]
17:T17a74,<h1>Immutable collections for JavaScript</h1>
<p><a href="https://immutable-js.com/docs/">Read the docs</a> and eat your vegetables.</p>
<p>Docs are automatically generated from <a href="https://github.com/immutable-js/immutable-js/blob/main/README.md">README.md</a> and <a href="https://github.com/immutable-js/immutable-js/blob/main/type-definitions/immutable.d.ts">immutable.d.ts</a>.
Please contribute! Also, don&#39;t miss the <a href="https://github.com/immutable-js/immutable-js/wiki">wiki</a> which contains articles on
additional specific topics. Can&#39;t find something? Open an <a href="https://github.com/immutable-js/immutable-js/issues">issue</a>.</p>
<p><strong>Table of contents:</strong></p>
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#getting-started">Getting started</a></li>
<li><a href="#the-case-for-immutability">The case for Immutability</a></li>
<li><a href="#javascript-first-api">JavaScript-first API</a></li>
<li><a href="#nested-structures">Nested Structures</a></li>
<li><a href="#equality-treats-collections-as-values">Equality treats Collections as Values</a></li>
<li><a href="#batching-mutations">Batching Mutations</a></li>
<li><a href="#lazy-seq">Lazy Seq</a></li>
<li><a href="#additional-tools-and-resources">Additional Tools and Resources</a></li>
<li><a href="#contributing">Contributing</a></li>
</ul>
<h2>Introduction</h2>
<p><a href="https://en.wikipedia.org/wiki/Immutable_object">Immutable</a> data cannot be changed once created, leading to much simpler
application development, no defensive copying, and enabling advanced memoization
and change detection techniques with simple logic. <a href="https://en.wikipedia.org/wiki/Persistent_data_structure">Persistent</a> data presents
a mutative API which does not update the data in-place, but instead always
yields new updated data.</p>
<p>Immutable.js provides many Persistent Immutable data structures including:
<code><a href="/docs/v5/List/">List</a></code>, <code><a href="/docs/v5/Stack/">Stack</a></code>, <code><a href="/docs/v5/Map/">Map</a></code>, <code><a href="/docs/v5/OrdererMap/">OrderedMap</a></code>, <code><a href="/docs/v5/Set/">Set</a></code>, <code><a href="/docs/v5/OrderedSet/">OrderedSet</a></code> and <code><a href="/docs/v5/Record/">Record</a></code>.</p>
<p>These data structures are highly efficient on modern JavaScript VMs by using
structural sharing via <a href="https://en.wikipedia.org/wiki/Hash_array_mapped_trie">hash maps tries</a> and <a href="https://hypirion.com/musings/understanding-persistent-vector-pt-1">vector tries</a> as popularized
by Clojure and Scala, minimizing the need to copy or cache data.</p>
<p>Immutable.js also provides a lazy <code><a href="/docs/v5/Seq/">Seq</a></code>, allowing efficient
chaining of collection methods like <code>map</code> and <code>filter</code> without creating
intermediate representations. Create some <code><a href="/docs/v5/Seq/">Seq</a></code> with <code><a href="/docs/v5/Range()/">Range</a></code> and <code><a href="/docs/v5/Repeat()/">Repeat</a></code>.</p>
<p>Want to hear more? Watch the presentation about Immutable.js:</p>
<p><a href="https://youtu.be/I7IdS-PbEgI"><img src="/Immutable-Data-and-React-YouTube.png" alt="Immutable Data and React"></a></p>
<h2>Getting started</h2>
<p>Install <code>immutable</code> using npm.</p>
<code class="codeBlock"># using npm
npm install immutable

# using <span class="token qualifier">Yarn</span>
yarn add immutable

# using pnpm
pnpm add immutable

# using <span class="token qualifier">Bun</span>
bun add immutable</code><p>Then require it into any module.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map2 <span class="token operator">=</span> map1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' vs. '</span> <span class="token operator">+</span> map2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 vs. 50</span></code><h3>Browser</h3>
<p>Immutable.js has no dependencies, which makes it predictable to include in a Browser.</p>
<p>It&#39;s highly recommended to use a module bundler like <a href="https://webpack.js.org/">webpack</a>,
<a href="https://rollupjs.org/">rollup</a>, or
<a href="https://browserify.org/">browserify</a>. The <code>immutable</code> npm module works
without any additional consideration. All examples throughout the documentation
will assume use of this kind of tool.</p>
<p>Alternatively, Immutable.js may be directly included as a script tag. Download
or link to a CDN such as <a href="https://cdnjs.com/libraries/immutable">CDNJS</a>
or <a href="https://www.jsdelivr.com/package/npm/immutable">jsDelivr</a>.</p>
<p>Use a script tag to directly add <code><span class="token qualifier">Immutable</span></code> to the global scope:</p>
<code class="codeBlock"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"immutable.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">var</span> map1 <span class="token operator">=</span> <span class="token qualifier">Immutable</span><span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> map2 <span class="token operator">=</span> map1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  map2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code><p>Or use an AMD-style loader (such as <a href="https://requirejs.org/">RequireJS</a>):</p>
<code class="codeBlock"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./immutable.min.js'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token block-keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token qualifier">Immutable</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> map1 <span class="token operator">=</span> <span class="token qualifier">Immutable</span><span class="token punctuation">.</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> map2 <span class="token operator">=</span> map1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
  map2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><h3>Flow &amp; TypeScript</h3>
<p>Use these Immutable collections and sequences as you would use native
collections in your <a href="https://flowtype.org/">Flowtype</a> or <a href="https://typescriptlang.org">TypeScript</a> programs while still taking
advantage of type generics, error detection, and auto-complete in your IDE.</p>
<p>Installing <code>immutable</code> via npm brings with it type definitions for Flow (v0.55.0 or higher)
and TypeScript (v4.5 or higher), so you shouldn&#39;t need to do anything at all!</p>
<h4>Using TypeScript with Immutable.js v4+</h4>
<p>Immutable.js type definitions embrace ES2015. While Immutable.js itself supports
legacy browsers and environments, its type definitions require TypeScript&#39;s 2015
lib. Include either <code><span class="token string-property property">"target"</span><span class="token operator">:</span> <span class="token string">"es2015"</span></code> or <code><span class="token string-property property">"lib"</span><span class="token operator">:</span> <span class="token string">"es2015"</span></code> in your
<code>tsconfig<span class="token punctuation">.</span>json</code>, or provide <code><span class="token operator">--</span>target es2015</code> or <code><span class="token operator">--</span>lib es2015</code> to the
<code>tsc</code> command.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map2 <span class="token operator">=</span> map1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' vs. '</span> <span class="token operator">+</span> map2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 vs. 50</span></code><h4>Using TypeScript with Immutable.js v3 and earlier:</h4>
<p>Previous versions of Immutable.js include a reference file which you can include
via relative path to the type definitions at the top of your file.</p>
<code class="codeBlock"><span class="token comment">///&lt;reference path='./node_modules/immutable/dist/immutable.d.ts'/></span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token literal-property property">map1</span><span class="token operator">:</span> <span class="token qualifier">Map</span><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> number<span class="token operator">></span><span class="token punctuation">;</span>
map1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> map2 <span class="token operator">=</span> map1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
map2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span></code><h2>The case for Immutability</h2>
<p>Much of what makes application development difficult is tracking mutation and
maintaining state. Developing with immutable data encourages you to think
differently about how data flows through your application.</p>
<p>Subscribing to data events throughout your application creates a huge overhead of
book-keeping which can hurt performance, sometimes dramatically, and creates
opportunities for areas of your application to get out of sync with each other
due to easy to make programmer error. Since immutable data never changes,
subscribing to changes throughout the model is a dead-end and new data can only
ever be passed from above.</p>
<p>This model of data flow aligns well with the architecture of <a href="https://reactjs.org/">React</a>
and especially well with an application designed using the ideas of <a href="https://facebook.github.io/flux/docs/in-depth-overview/">Flux</a>.</p>
<p>When data is passed from above rather than being subscribed to, and you&#39;re only
interested in doing work when something has changed, you can use equality.</p>
<p>Immutable collections should be treated as <em>values</em> rather than <em>objects</em>. While
objects represent some thing which could change over time, a value represents
the state of that thing at a particular instance of time. This principle is most
important to understanding the appropriate use of immutable data. In order to
treat Immutable.js collections as values, it&#39;s important to use the
<code><a href="/docs/v5/is()/">Immutable.is()</a></code> function or <code><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method to determine <em>value equality</em>
instead of the <code><span class="token operator">===</span></code> operator which determines object <em>reference identity</em>.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
map1 <span class="token operator">===</span> map2<span class="token punctuation">;</span> <span class="token comment">// false</span></code><p>Note: As a performance optimization Immutable.js attempts to return the existing
collection when an operation would result in an identical collection, allowing
for using <code><span class="token operator">===</span></code> reference equality to determine if something definitely has not
changed. This can be extremely useful when used within a memoization function
which would prefer to re-run the function if a deeper equality check could
potentially be more costly. The <code><span class="token operator">===</span></code> equality check is also used internally by
<code><a href="/docs/v5/is()/">Immutable.is</a></code> and <code><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> as a performance optimization.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map2 <span class="token operator">=</span> map1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set to same value</span>
map1 <span class="token operator">===</span> map2<span class="token punctuation">;</span> <span class="token comment">// true</span></code><p>If an object is immutable, it can be &quot;copied&quot; simply by making another reference
to it instead of copying the entire object. Because a reference is much smaller
than the object itself, this results in memory savings and a potential boost in
execution speed for programs which rely on copies (such as an undo-stack).</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mapCopy <span class="token operator">=</span> map<span class="token punctuation">;</span> <span class="token comment">// Look, "copies" are free!</span></code><h2>JavaScript-first API</h2>
<p>While Immutable.js is inspired by Clojure, Scala, Haskell and other functional
programming environments, it&#39;s designed to bring these powerful concepts to
JavaScript, and therefore has an Object-Oriented API that closely mirrors that
of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla">ES2015</a> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">Array</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a>.</p>
<p>The difference for the immutable collections is that methods which would mutate
the collection, like <code>push</code>, <code><a href="/docs/v5/set()/">set</a></code>, <code>unshift</code> or <code>splice</code>, instead return a new
immutable collection. Methods which return new arrays, like <code>slice</code> or <code>concat</code>,
instead return new immutable collections.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list1 <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list2 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list3 <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list4 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list2<span class="token punctuation">,</span> list3<span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>list3<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>list4<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>list4<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><p>Almost all of the methods on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array">Array</a> will be found in similar form on
<code><a href="/docs/v5/List/">Immutable.List</a></code>, those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a> found on <code><a href="/docs/v5/Map/">Immutable.Map</a></code>, and those of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a>
found on <code><a href="/docs/v5/Set/">Immutable.Set</a></code>, including collection operations like <code><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>
and <code><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> alpha <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
alpha<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=></span> k<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 'A,B,C,D'</span></code><h3>Convert from raw JavaScript objects and arrays.</h3>
<p>Designed to inter-operate with your existing JavaScript, Immutable.js
accepts plain JavaScript Arrays and Objects anywhere a method expects a
<code><a href="/docs/v5/Collection/">Collection</a></code>.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">t</span><span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">o</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">g</span><span class="token operator">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map3 <span class="token operator">=</span> map1<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>map2<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map { a: 20, b: 2, c: 10, d: 100, t: 30, o: 200, g: 300 }</span>
<span class="token keyword">const</span> list1 <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list2 <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list3 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>list2<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// List [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></code><p>This is possible because Immutable.js can treat any JavaScript Array or Object
as a Collection. You can take advantage of this in order to get sophisticated
collection methods on JavaScript Objects, which otherwise have a very sparse
native API. Because Seq evaluates lazily and does not cache intermediate
results, these operations can be extremely efficient.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">Seq</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// { a: 1, b: 4, c: 9 }</span></code><p>Keep in mind, when using JS objects to construct Immutable Maps, that
JavaScript Object properties are always strings, even if written in a quote-less
shorthand, while Immutable Maps accept keys of any type.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'one'</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token qualifier">Object</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ "1" ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> obj<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "one", "one"</span>

<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "one", undefined</span></code><p>Property access for JavaScript Objects first converts the key to a string, but
since Immutable Map keys can be of any type the argument to <code><a href="/docs/v5/get()/">get()</a></code> is
not altered.</p>
<h3>Converts back to raw JavaScript objects.</h3>
<p>All Immutable.js Collections can be converted to plain JavaScript Arrays and
Objects shallowly with <code><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> and <code><span class="token function">toObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> or deeply with <code><span class="token function">toJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>.
All Immutable Collections also implement <code><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> allowing them to be passed
to <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify" target="_blank" rel="noopener">JSON.stringify</a></code> directly. They also respect the custom <code><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> methods of
nested objects.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> deep <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deep<span class="token punctuation">.</span><span class="token function">toObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, b: 2, c: List [ 3, 4, 5 ] }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deep<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, List [ 3, 4, 5 ] ]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>deep<span class="token punctuation">.</span><span class="token function">toJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// { a: 1, b: 2, c: [ 3, 4, 5 ] }</span>
<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>deep<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '{"a":1,"b":2,"c":[3,4,5]}'</span></code><h3>Embraces ES2015</h3>
<p>Immutable.js supports all JavaScript environments, including legacy
browsers (even IE11). However it also takes advantage of features added to
JavaScript in <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla">ES2015</a>, the latest standard version of JavaScript, including
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol">Iterators</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">Arrow Functions</a>, <a href="https://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes">Classes</a>, and <a href="https://www.2ality.com/2014/09/es6-modules-final.html">Modules</a>. It&#39;s inspired
by the native <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map">Map</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> collections added to ES2015.</p>
<p>All examples in the Documentation are presented in ES2015. To run in all
browsers, they need to be translated to ES5.</p>
<code class="codeBlock"><span class="token comment">// ES2015</span>
<span class="token keyword">const</span> mapped <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ES5</span>
<span class="token keyword">var</span> mapped <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token block-keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><p>All Immutable.js collections are <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol">Iterable</a>, which allows them to be
used anywhere an Iterable is expected, such as when spreading into an Array.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> aList <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> anArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>aList<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [ 0, 1, 2, 3, 4, 5 ]</span></code><p>Note: A Collection is always iterated in the same order, however that order may
not always be well defined, as is the case for the <code><a href="/docs/v5/Map/">Map</a></code> and <code><a href="/docs/v5/Set/">Set</a></code>.</p>
<h2>Nested Structures</h2>
<p>The collections in Immutable.js are intended to be nested, allowing for deep
trees of data, similar to JSON.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> nested <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map { a: Map { b: Map { c: List [ 3, 4, 5 ] } } }</span></code><p>A few power-tools allow for reading and operating on nested data. The
most useful are <code><a href="/docs/v5/mergeDeep()/">mergeDeep</a></code>, <code><a href="/docs/v5/getIn()/">getIn</a></code>, <code><a href="/docs/v5/setIn()/">setIn</a></code>, and <code><a href="/docs/v5/updateIn()/">updateIn</a></code>, found on <code><a href="/docs/v5/List/">List</a></code>,
<code><a href="/docs/v5/Map/">Map</a></code> and <code><a href="/docs/v5/OrdererMap/">OrderedMap</a></code>.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> nested <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> nested2 <span class="token operator">=</span> nested<span class="token punctuation">.</span><span class="token function">mergeDeep</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 6 } } }</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nested2<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>

<span class="token keyword">const</span> nested3 <span class="token operator">=</span> nested2<span class="token punctuation">.</span><span class="token function">updateIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nested3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map { a: Map { b: Map { c: List [ 3, 4, 5 ], d: 7 } } }</span>

<span class="token keyword">const</span> nested4 <span class="token operator">=</span> nested3<span class="token punctuation">.</span><span class="token function">updateIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=></span> list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Map { a: Map { b: Map { c: List [ 3, 4, 5, 6 ], d: 7 } } }</span></code><h2>Equality treats Collections as Values</h2>
<p>Immutable.js collections are treated as pure data <em>values</em>. Two immutable
collections are considered <em>value equal</em> (via <code><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> or <code><a href="/docs/v5/is()/">is()</a></code>) if they
represent the same collection of values. This differs from JavaScript&#39;s typical
<em>reference equal</em> (via <code><span class="token operator">===</span></code> or <code><span class="token operator">==</span></code>) for Objects and Arrays which only
determines if two variables represent references to the same object instance.</p>
<p>Consider the example below where two identical <code><a href="/docs/v5/Map/">Map</a></code> instances are not
<em>reference equal</em> but are <em>value equal</em>.</p>
<code class="codeBlock"><span class="token comment">// First consider:</span>
<span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj1 <span class="token operator">!==</span> obj2<span class="token punctuation">;</span> <span class="token comment">// two different instances are always not equal with ===</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> is <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map1 <span class="token operator">!==</span> map2<span class="token punctuation">;</span> <span class="token comment">// two different instances are not reference-equal</span>
map1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// but are value-equal if they have the same values</span>
<span class="token function">is</span><span class="token punctuation">(</span>map1<span class="token punctuation">,</span> map2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// alternatively can use the is() function</span></code><p>Value equality allows Immutable.js collections to be used as keys in Maps or
values in Sets, and retrieved with different but equivalent collections:</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">Set</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map1 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map2 <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span>
set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true because these are value-equal</span></code><p>Note: <code><a href="/docs/v5/is()/">is()</a></code> uses the same measure of equality as <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is">Object.is</a> for scalar
strings and numbers, but uses value equality for Immutable collections,
determining if both are immutable and all keys and values are equal
using the same measure of equality.</p>
<h4>Performance tradeoffs</h4>
<p>While value equality is useful in many circumstances, it has different
performance characteristics than reference equality. Understanding these
tradeoffs may help you decide which to use in each case, especially when used
to memoize some operation.</p>
<p>When comparing two collections, value equality may require considering every
item in each collection, on an <code><span class="token constant">O</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span></code> time complexity. For large collections of
values, this could become a costly operation. Though if the two are not equal
and hardly similar, the inequality is determined very quickly. In contrast, when
comparing two collections with reference equality, only the initial references
to memory need to be compared which is not based on the size of the collections,
which has an <code><span class="token constant">O</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code> time complexity. Checking reference equality is always very
fast, however just because two collections are not reference-equal does not rule
out the possibility that they may be value-equal.</p>
<h4>Return self on no-op optimization</h4>
<p>When possible, Immutable.js avoids creating new objects for updates where no
change in <em>value</em> occurred, to allow for efficient <em>reference equality</em> checking
to quickly determine if no change occurred.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> originalMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> updatedMap <span class="token operator">=</span> originalMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
updatedMap <span class="token operator">===</span> originalMap<span class="token punctuation">;</span> <span class="token comment">// No-op .set() returned the original reference.</span></code><p>However updates which do result in a change will return a new reference. Each
of these operations occur independently, so two similar updates will not return
the same reference:</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> originalMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> updatedMap <span class="token operator">=</span> originalMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// New instance, leaving the original immutable.</span>
updatedMap <span class="token operator">!==</span> originalMap<span class="token punctuation">;</span>
<span class="token keyword">const</span> anotherUpdatedMap <span class="token operator">=</span> originalMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Despite both the results of the same operation, each created a new reference.</span>
anotherUpdatedMap <span class="token operator">!==</span> updatedMap<span class="token punctuation">;</span>
<span class="token comment">// However the two are value equal.</span>
anotherUpdatedMap<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>updatedMap<span class="token punctuation">)</span><span class="token punctuation">;</span></code><h2>Batching Mutations</h2>
<blockquote>
<p>If a tree falls in the woods, does it make a sound?</p>
<p>If a pure function mutates some local data in order to produce an immutable
return value, is that ok?</p>
<p>— Rich Hickey, Clojure</p>
</blockquote>
<p>Applying a mutation to create a new immutable object results in some overhead,
which can add up to a minor performance penalty. If you need to apply a series
of mutations locally before returning, Immutable.js gives you the ability to
create a temporary mutable (transient) copy of a collection and apply a batch of
mutations in a performant manner by using <code>withMutations</code>. In fact, this is
exactly how Immutable.js applies complex mutations itself.</p>
<p>As an example, building <code>list2</code> results in the creation of 1, not 3, new
immutable Lists.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list1 <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> list2 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">withMutations</span><span class="token punctuation">(</span><span class="token block-keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>list2<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><p>Note: Immutable.js also provides <code>asMutable</code> and <code>asImmutable</code>, but only
encourages their use when <code>withMutations</code> will not suffice. Use caution to not
return a mutable copy, which could result in undesired behavior.</p>
<p><em>Important!</em>: Only a select few methods can be used in <code>withMutations</code> including
<code><a href="/docs/v5/set()/">set</a></code>, <code>push</code> and <code>pop</code>. These methods can be applied directly against a
persistent data-structure where other methods like <code>map</code>, <code>filter</code>, <code>sort</code>,
and <code>splice</code> will always return new immutable data-structures and never mutate
a mutable collection.</p>
<h2>Lazy Seq</h2>
<p><code><a href="/docs/v5/Seq/">Seq</a></code> describes a lazy operation, allowing them to efficiently chain
use of all the higher-order collection methods (such as <code>map</code> and <code>filter</code>)
by not creating intermediate collections.</p>
<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be
changed, appended to, rearranged or otherwise modified. Instead, any mutative
method called on a <code><a href="/docs/v5/Seq/">Seq</a></code> will return a new <code><a href="/docs/v5/Seq/">Seq</a></code>.</p>
<p><strong>Seq is lazy</strong> — <code><a href="/docs/v5/Seq/">Seq</a></code> does as little work as necessary to respond to any
method call. Values are often created during iteration, including implicit
iteration when reducing or converting to a concrete data structure such as
a <code><a href="/docs/v5/List/">List</a></code> or JavaScript <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">Array</a></code>.</p>
<p>For example, the following performs no work, because the resulting
<code><a href="/docs/v5/Seq/">Seq</a></code>&#39;s values are never iterated:</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> oddSquares <span class="token operator">=</span> <span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code><p>Once the <code><a href="/docs/v5/Seq/">Seq</a></code> is used, it performs only the work necessary. In this
example, no intermediate arrays are ever created, filter is called three
times, and map is only called once:</p>
<code class="codeBlock">oddSquares<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span></code><p>Any collection can be converted to a lazy Seq with <code><a href="/docs/v5/Seq/">Seq()</a></code>.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> lazySeq <span class="token operator">=</span> <span class="token function">Seq</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span></code><p><code><a href="/docs/v5/Seq/">Seq</a></code> allows for the efficient chaining of operations, allowing for the
expression of logic that can otherwise be very tedious:</p>
<code class="codeBlock">lazySeq
  <span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> key<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Seq { A: 1, B: 2, C: 3 }</span></code><p>As well as expressing logic that would otherwise seem memory or time
limited, for example <code><a href="/docs/v5/Range()/">Range</a></code> is a special kind of Lazy sequence.</p>
<code class="codeBlock"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token qualifier">Range</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span>
<span class="token function">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token qualifier">Infinity</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">-</span>n<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token operator">=></span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=></span> r <span class="token operator">*</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1006008</span></code><h2>Comparison of filter(), groupBy(), and partition()</h2>
<p>The <code><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, and <code><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> methods are similar in that they
all divide a collection into parts based on applying a function to each element.
All three call the predicate or grouping function once for each item in the
input collection. All three return zero or more collections of the same type as
their input. The returned collections are always distinct from the input
(according to <code><span class="token operator">===</span></code>), even if the contents are identical.</p>
<p>Of these methods, <code><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> is the only one that is lazy and the only one which
discards items from the input collection. It is the simplest to use, and the
fact that it returns exactly one collection makes it easy to combine with other
methods to form a pipeline of operations.</p>
<p>The <code><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method is similar to an eager version of <code><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, but it
returns two collections; the first contains the items that would have been
discarded by <code><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, and the second contains the items that would have been
kept. It always returns an array of exactly two collections, which can make it
easier to use than <code><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>. Compared to making two separate calls to
<code><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, <code><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> makes half as many calls it the predicate passed to
it.</p>
<p>The <code><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method is a more generalized version of <code><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> that can
group by an arbitrary function rather than just a predicate. It returns a map
with zero or more entries, where the keys are the values returned by the
grouping function, and the values are nonempty collections of the corresponding
arguments. Although <code><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> is more powerful than <code><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>, it can be
harder to use because it is not always possible predict in advance how many
entries the returned map will have and what their keys will be.</p>
<table>
<thead>
<tr>
<th align="left">Summary</th>
<th align="left"><code>filter</code></th>
<th align="left"><code>partition</code></th>
<th align="left"><code>groupBy</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left">ease of use</td>
<td align="left">easiest</td>
<td align="left">moderate</td>
<td align="left">hardest</td>
</tr>
<tr>
<td align="left">generality</td>
<td align="left">least</td>
<td align="left">moderate</td>
<td align="left">most</td>
</tr>
<tr>
<td align="left">laziness</td>
<td align="left">lazy</td>
<td align="left">eager</td>
<td align="left">eager</td>
</tr>
<tr>
<td align="left"># of returned sub-collections</td>
<td align="left">1</td>
<td align="left">2</td>
<td align="left">0 or more</td>
</tr>
<tr>
<td align="left">sub-collections may be empty</td>
<td align="left">yes</td>
<td align="left">yes</td>
<td align="left">no</td>
</tr>
<tr>
<td align="left">can discard items</td>
<td align="left">yes</td>
<td align="left">no</td>
<td align="left">no</td>
</tr>
<tr>
<td align="left">wrapping container</td>
<td align="left">none</td>
<td align="left">array</td>
<td align="left">Map/OrderedMap</td>
</tr>
</tbody></table>
<h2>Additional Tools and Resources</h2>
<ul>
<li><p><a href="https://github.com/jameshopkins/atom-store/">Atom-store</a></p>
<ul>
<li>A Clojure-inspired atom implementation in Javascript with configurability
for external persistance.</li>
</ul>
</li>
<li><p><a href="https://github.com/astorije/chai-immutable">Chai Immutable</a></p>
<ul>
<li>If you are using the <a href="https://chaijs.com/">Chai Assertion Library</a>, this
provides a set of assertions to use against Immutable.js collections.</li>
</ul>
</li>
<li><p><a href="https://github.com/fantasyland/fantasy-land">Fantasy-land</a></p>
<ul>
<li>Specification for interoperability of common algebraic structures in JavaScript.</li>
</ul>
</li>
<li><p><a href="https://github.com/pelotom/immutagen">Immutagen</a></p>
<ul>
<li>A library for simulating immutable generators in JavaScript.</li>
</ul>
</li>
<li><p><a href="https://github.com/redbadger/immutable-cursor">Immutable-cursor</a></p>
<ul>
<li>Immutable cursors incorporating the Immutable.js interface over
Clojure-inspired atom.</li>
</ul>
</li>
<li><p><a href="https://github.com/DrBoolean/immutable-ext">Immutable-ext</a></p>
<ul>
<li>Fantasyland extensions for immutablejs</li>
</ul>
</li>
<li><p><a href="https://github.com/madeinfree/immutable-js-tools">Immutable-js-tools</a></p>
<ul>
<li>Util tools for immutable.js</li>
</ul>
</li>
<li><p><a href="https://github.com/gajus/redux-immutable">Immutable-Redux</a></p>
<ul>
<li>redux-immutable is used to create an equivalent function of Redux
combineReducers that works with Immutable.js state.</li>
</ul>
</li>
<li><p><a href="https://github.com/lukasbuenger/immutable-treeutils">Immutable-Treeutils</a></p>
<ul>
<li>Functional tree traversal helpers for ImmutableJS data structures.</li>
</ul>
</li>
<li><p><a href="https://github.com/ericelliott/irecord">Irecord</a></p>
<ul>
<li>An immutable store that exposes an RxJS observable. Great for React.</li>
</ul>
</li>
<li><p><a href="https://github.com/brianneisler/mudash">Mudash</a></p>
<ul>
<li>Lodash wrapper providing Immutable.JS support.</li>
</ul>
</li>
<li><p><a href="https://github.com/HurricaneJames/react-immutable-proptypes">React-Immutable-PropTypes</a></p>
<ul>
<li>PropType validators that work with Immutable.js.</li>
</ul>
</li>
<li><p><a href="https://github.com/indexiatech/redux-immutablejs">Redux-Immutablejs</a></p>
<ul>
<li>Redux Immutable facilities.</li>
</ul>
</li>
<li><p><a href="https://github.com/yamalight/rxstate">Rxstate</a></p>
<ul>
<li>Simple opinionated state management library based on RxJS and Immutable.js.</li>
</ul>
</li>
<li><p><a href="https://github.com/glenjamin/transit-immutable-js">Transit-Immutable-js</a></p>
<ul>
<li>Transit serialisation for Immutable.js.</li>
<li>See also: <a href="https://github.com/cognitect/transit-js">Transit-js</a></li>
</ul>
</li>
</ul>
<p>Have an additional tool designed to work with Immutable.js?
Submit a PR to add it to this list in alphabetical order.</p>
<h2>Contributing</h2>
<p>Use <a href="https://github.com/immutable-js/immutable-js/issues">Github issues</a> for requests.</p>
<p>We actively welcome pull requests, learn how to <a href="https://github.com/immutable-js/immutable-js/blob/main/.github/CONTRIBUTING.md">contribute</a>.</p>
<p>Immutable.js is maintained within the <a href="https://www.contributor-covenant.org/version/2/0/code_of_conduct/">Contributor Covenant&#39;s Code of Conduct</a>.</p>
<h3>Changelog</h3>
<p>Changes are tracked as <a href="https://github.com/immutable-js/immutable-js/releases">Github releases</a>.</p>
<h3>License</h3>
<p>Immutable.js is <a href="./LICENSE">MIT-licensed</a>.</p>
<h3>Thanks</h3>
<p><a href="https://www.youtube.com/watch?v=K2NYwP90bNs">Phil Bagwell</a>, for his inspiration
and research in persistent data structures.</p>
<p><a href="https://github.com/hughfdjackson/">Hugh Jackson</a>, for providing the npm package
name. If you&#39;re looking for his unsupported package, see <a href="https://github.com/hughfdjackson/immutable">this repository</a>.</p>
6:[["$","$L14",null,{"version":"v5"}],["$","$L15",null,{"versions":["v5","v4.3.7","v3.8.2"]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L16",null,{"contents":"$17"}]}]}]]
b:null
f:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
a:null
13:{"metadata":[["$","title","0",{"children":"Immutable.js"}],["$","meta","1",{"name":"google-site-verification","content":"PdYYQG_2wv0zUJjqBIeuYliPcrOiAuTES4Q21OLy5uQ"}],["$","link","2",{"rel":"icon","href":"/favicon.png"}]],"error":null,"digest":"$undefined"}
d:{"metadata":"$13:metadata","error":null,"digest":"$undefined"}
