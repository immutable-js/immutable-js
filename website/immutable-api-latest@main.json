{
  "version": "latest@main",
  "doc": {
    "synopsis": "<p>Immutable data encourages pure functions (data-in, data-out) and lends itself\nto much simpler application development and enabling techniques from\nfunctional programming such as lazy evaluation.</p>\n",
    "description": "<p>While designed to bring these powerful functional concepts to JavaScript, it\npresents an Object-Oriented API familiar to Javascript engineers and closely\nmirroring that of Array, Map, and Set. It is easy and efficient to convert to\nand from plain Javascript types.</p>\n<h2 id=\"how-to-read-these-docs\">How to read these docs</h2>\n<p>In order to better explain what kinds of values the Immutable.js API expects\nand produces, this documentation is presented in a statically typed dialect of\nJavaScript (like <a href=\"https://flowtype.org/\">Flow</a> or <a href=\"https://www.typescriptlang.org/\">TypeScript</a>). You <em>don&#39;t need</em> to use these\ntype checking tools in order to use Immutable.js, however becoming familiar\nwith their syntax will help you get a deeper understanding of this API.</p>\n<p><strong>A few examples and how to read them.</strong></p>\n<p>All methods describe the kinds of data they accept and the kinds of data\nthey return. For example a function which accepts two numbers and returns\na number would look like this:</p>\n<code class=\"codeBlock\">sum<span class=\"token punctuation\" >(</span>first<span class=\"token punctuation\" >:</span> number<span class=\"token punctuation\" >,</span> second<span class=\"token punctuation\" >:</span> number<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> number</code><p>Sometimes, methods can accept different kinds of data or return different\nkinds of data, and this is described with a <em>type variable</em>, which is\ntypically in all-caps. For example, a function which always returns the same\nkind of data it was provided would look like this:</p>\n<code class=\"codeBlock\">identity<span class=\"token operator\" >&lt;</span>T<span class=\"token operator\" >></span><span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >:</span> T<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> T</code><p>Type variables are defined with classes and referred to in methods. For\nexample, a class that holds onto a value for you might look like this:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >class</span> <span class=\"token class-name\" >Box</span><span class=\"token operator\" >&lt;</span>T<span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  constructor<span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >:</span> T<span class=\"token punctuation\" >)</span>\n  getValue<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> T\n<span class=\"token punctuation\" >}</span></code><p>In order to manipulate Immutable data, methods that we&#39;re used to affecting\na Collection instead return a new Collection of the same type. The type\n<code><span class=\"token var\" >this</span></code> refers to the same kind of class. For example, a List which returns\nnew Lists when you <code>push</code> a value onto it might look like:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >class</span> <span class=\"token class-name\" >List</span><span class=\"token operator\" >&lt;</span>T<span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  push<span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >:</span> T<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> <span class=\"token var\" >this</span>\n<span class=\"token punctuation\" >}</span></code><p>Many methods in Immutable.js accept values which implement the JavaScript\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">Iterable</a> protocol, and might appear like <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable&lt;string&gt;</a></code> for something\nwhich represents sequence of strings. Typically in JavaScript we use plain\nArrays (<code><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span></code>) when an Iterable is expected, but also all of the Immutable.js\ncollections are iterable themselves!</p>\n<p>For example, to get a value deep within a structure of data, we might use\n<code><a href=\"/docs/latest@main/getIn()\">getIn</a></code> which expects an <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" target=\"_blank\" rel=\"noopener\">Iterable</a></code> path:</p>\n<code class=\"codeBlock\">getIn<span class=\"token punctuation\" >(</span>path<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Iterable</span><span class=\"token operator\" >&lt;</span>string <span class=\"token operator\" >|</span> number<span class=\"token operator\" >></span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> unknown</code><p>To use this method, we could pass an array: <code>data<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >\"key\"</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span></code>.</p>\n<p>Note: All examples are presented in the modern <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla\">ES2015</a> version of\nJavaScript. Use tools like Babel to support older browsers.</p>\n<p>For example:</p>\n<code class=\"codeBlock\"><span class=\"token comment\" spellcheck=\"true\">// ES2015\n</span><span class=\"token keyword\" >const</span> mappedFoo <span class=\"token operator\" >=</span> foo<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ES5\n</span><span class=\"token keyword\" >var</span> mappedFoo <span class=\"token operator\" >=</span> foo<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>x<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>",
    "notes": []
  },
  "types": {
    "Collection": {
      "qualifiedName": "Collection",
      "doc": {
        "synopsis": "<p>The <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is a set of (key, value) entries which can be iterated, and\nis the base class for all collections in <code>immutable</code>, allowing them to\nmake use of all the Collection methods (such as <code><a href=\"/docs/latest@main/Collection#map()\">map</a></code> and <code><a href=\"/docs/latest@main/Collection#filter()\">filter</a></code>).</p>\n",
        "description": "<p>Note: A collection is always iterated in the same order, however that order\nmay not always be well defined, as is the case for the <code><a href=\"/docs/latest@main/Map\">Map</a></code> and <code><a href=\"/docs/latest@main/Collection.Set\">Set</a></code>.</p>\n<p>Collection is the abstract base class for concrete data structures. It\ncannot be constructed directly.</p>\n<p>Implementations should extend one of the subclasses, <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code>,\n<code><a href=\"/docs/latest@main/Collection.Indexed\">Collection.Indexed</a></code>, or <code><a href=\"/docs/latest@main/Collection.Set\">Collection.Set</a></code>.</p>\n",
        "notes": []
      },
      "call": {
        "name": "Collection",
        "label": "Collection()",
        "id": "Collection()",
        "signatures": [
          {
            "line": 3897,
            "typeParams": [
              "I"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "I"
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "I"
            }
          },
          {
            "line": 3898,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "ArrayLike",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Collection.Indexed",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/Collection.Indexed"
            }
          },
          {
            "line": 3901,
            "typeParams": [
              "V"
            ],
            "params": [
              {
                "name": "obj",
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Collection.Keyed",
              "args": [
                {
                  "k": 7
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Collection.Keyed"
            }
          },
          {
            "line": 3904,
            "typeParams": [
              "K",
              "V"
            ],
            "type": {
              "k": 12,
              "name": "Collection",
              "args": [
                {
                  "k": 11,
                  "param": "K"
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Collection"
            }
          }
        ],
        "url": "/docs/latest@main/Collection#Collection()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Iterators",
            "signatures": [
              {
                "line": 4210,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#[Symbol.iterator]()"
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#butLast()"
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with other values and\ncollection-like concatenated to this one.</p>\n",
              "description": "<p>For Seqs, all entries will be present in the resulting Seq, even if they\nhave the same key.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4543,
                "params": [
                  {
                    "name": "valuesOrCollections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#concat()"
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection#count()"
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#countBy()"
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#entries()"
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#entrySeq()"
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection#equals()",
            "overrides": {
              "interface": "ValueObject",
              "label": "equals()",
              "url": "/docs/latest@main/ValueObject#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection#every()"
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 4273,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4277,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#filter()"
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#filterNot()"
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#find()"
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#findEntry()"
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#findKey()"
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#findLast()"
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#findLastEntry()"
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#findLastKey()"
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#first()"
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Flat-maps the Collection, returning a Collection of the same type.</p>\n",
              "description": "<p>Similar to <code>collection<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.\nUsed for Dictionaries only.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4569,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4580,
                "typeParams": [
                  "KM",
                  "VM"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "KM"
                              },
                              {
                                "k": 11,
                                "param": "VM"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 11,
                      "param": "KM"
                    },
                    {
                      "k": 11,
                      "param": "VM"
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#flatMap()"
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#flatten()"
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection#forEach()"
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#get()"
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Collection#getIn()"
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#groupBy()"
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection#has()"
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection#hasIn()"
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection#hashCode()",
            "overrides": {
              "interface": "ValueObject",
              "label": "hashCode()",
              "url": "/docs/latest@main/ValueObject#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection#includes()"
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection#isEmpty()"
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection#isSubset()"
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection#isSuperset()"
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Collection#join()"
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#keyOf()"
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#keySeq()"
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#keys()"
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#last()"
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#lastKeyOf()"
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Collection</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { \"a\": 10, \"b\": 20 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Collection#map()\">map()</a></code> always returns a new instance, even if it produced the same\nvalue at every step.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4246,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#map()"
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#max()"
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#maxBy()"
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#min()"
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#minBy()"
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#reduce()"
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#reduceRight()"
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#rest()"
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#reverse()"
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#skip()"
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#skipLast()"
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#skipUntil()"
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#skipWhile()"
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#slice()"
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection#some()"
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#sort()"
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#sortBy()"
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#take()"
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#takeLast()"
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#takeUntil()"
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection#takeWhile()"
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "<p><code><a href=\"/docs/latest@main/Collection.Indexed\">Collection.Indexed</a></code>, and <code><a href=\"/docs/latest@main/Collection.Set\">Collection.Set</a></code> produce an Array of values.\n<code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> produce an Array of [key, value] tuples.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4067,
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 15,
                          "types": [
                            {
                              "k": 11,
                              "param": "K"
                            },
                            {
                              "k": 11,
                              "param": "V"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toArray()"
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toIndexedSeq()"
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Collection to equivalent native JavaScript Array or Object.</p>\n",
              "description": "<p><code><a href=\"/docs/latest@main/Collection.Indexed\">Collection.Indexed</a></code>, and <code><a href=\"/docs/latest@main/Collection.Set\">Collection.Set</a></code> become <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>, while\n<code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> become <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>, converting keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4051,
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    {
                      "k": 8,
                      "members": [
                        {
                          "index": true,
                          "params": [
                            {
                              "name": "key",
                              "type": {
                                "k": 7
                              }
                            }
                          ],
                          "type": {
                            "k": 2
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toJS()"
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to equivalent native JavaScript Array or Object.</p>\n",
              "description": "<p><code><a href=\"/docs/latest@main/Collection.Indexed\">Collection.Indexed</a></code>, and <code><a href=\"/docs/latest@main/Collection.Set\">Collection.Set</a></code> become <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>, while\n<code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> become <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>, converting keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4059,
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 8,
                      "members": [
                        {
                          "index": true,
                          "params": [
                            {
                              "name": "key",
                              "type": {
                                "k": 7
                              }
                            }
                          ],
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toJSON()"
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toKeyedSeq()"
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toList()"
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toMap()"
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toObject()"
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toOrderedMap()"
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toOrderedSet()"
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Seq of the same kind (indexed,\nkeyed, or set).</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4145,
                "type": {
                  "k": 12,
                  "name": "Seq",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toSeq()"
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toSet()"
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toSetSeq()"
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#toStack()"
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#update()"
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection#valueSeq()"
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection#values()"
          }
        },
        "line": 3906,
        "typeParams": [
          "K",
          "V"
        ],
        "extends": [
          {
            "k": 12,
            "name": "ValueObject",
            "url": "/docs/latest@main/ValueObject"
          }
        ]
      },
      "label": "Collection",
      "url": "/docs/latest@main/Collection"
    },
    "Collection.Indexed": {
      "qualifiedName": "Collection.Indexed",
      "doc": {
        "synopsis": "<p>Indexed Collections have incrementing numeric keys. They exhibit\nslightly different behavior than <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> for some methods in order\nto better mirror the behavior of JavaScript&#39;s <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>, and add methods\nwhich do not make sense on non-indexed Collections such as <code><a href=\"/docs/latest@main/Collection.Indexed#indexOf()\">indexOf</a></code>.</p>\n",
        "description": "<p>Unlike JavaScript arrays, <code><a href=\"/docs/latest@main/Collection.Indexed\">Collection.Indexed</a></code>s are always dense. &quot;Unset&quot;\nindices and <code><span class=\"token primitive\" >undefined</span></code> indices are indistinguishable, and all indices from\n0 to <code>size</code> are visited when iterated.</p>\n<p>All Collection.Indexed methods return re-indexed Collections. In other words,\nindices always start at 0 and increment until size. If you wish to\npreserve indices, using them as keys, convert to a Collection.Keyed by\ncalling <code><a href=\"/docs/latest@main/Collection.Indexed#toKeyedSeq()\">toKeyedSeq</a></code>.</p>\n",
        "notes": []
      },
      "call": {
        "name": "Collection.Indexed",
        "label": "Collection.Indexed()",
        "id": "Collection.Indexed()",
        "doc": {
          "synopsis": "<p>Creates a new Collection.Indexed.</p>\n",
          "description": "<p>Note: <code><a href=\"/docs/latest@main/Collection.Indexed\">Collection.Indexed</a></code> is a conversion function and not a class, and\ndoes not use the <code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 3498,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "ArrayLike",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Collection.Indexed",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/Collection.Indexed"
            }
          }
        ],
        "url": "/docs/latest@main/Collection.Indexed#Collection.Indexed()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 3769,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#[Symbol.iterator]()",
            "overrides": {
              "interface": "Collection",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection#[Symbol.iterator]()"
            }
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection with other collections concatenated to this one.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3721,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "valuesOrCollections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 11,
                                  "param": "C"
                                }
                              ]
                            },
                            {
                              "k": 11,
                              "param": "C"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#concat()",
            "overrides": {
              "interface": "Collection",
              "label": "concat()",
              "url": "/docs/latest@main/Collection#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 3760,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              },
              {
                "line": 3764,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#filter()",
            "overrides": {
              "interface": "Collection",
              "label": "filter()",
              "url": "/docs/latest@main/Collection#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findIndex": {
            "name": "findIndex",
            "label": "findIndex()",
            "id": "findIndex()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first index in the Collection where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#findIndex()"
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastIndex": {
            "name": "findLastIndex",
            "label": "findLastIndex()",
            "id": "findLastIndex()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last index in the Collection where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3711,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#findLastIndex()"
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the Collection, returning a Collection of the same type.</p>\n",
              "description": "<p>Similar to <code>collection<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3748,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#flatMap()",
            "overrides": {
              "interface": "Collection",
              "label": "flatMap()",
              "url": "/docs/latest@main/Collection#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "fromEntrySeq": {
            "name": "fromEntrySeq",
            "label": "fromEntrySeq()",
            "id": "fromEntrySeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>If this is a collection of [key, value] entry tuples, it will return a\nSeq.Keyed of those entries.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3542,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#fromEntrySeq()"
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3527,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3528,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#get()",
            "overrides": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "indexOf": {
            "name": "indexOf",
            "label": "indexOf()",
            "id": "indexOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first index at which a given value can be found in the\nCollection, or -1 if it is not present.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3690,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#indexOf()"
          },
          "interleave": {
            "name": "interleave",
            "label": "interleave()",
            "id": "interleave()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a Collection of the same type with the provided <code><span class=\"t param\">collections</span></code>\ninterleaved into this collection.</p>\n",
              "description": "<p>The resulting Collection includes the first item from each, then the\nsecond from each, etc.</p>\n<!-- runkit:activate\n     { \"preamble\": \"require('immutable')\"}\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>interleave<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, \"A\", 2, \"B\", 3, \"C\" ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>The shortest Collection stops interleave.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>interleave<span class=\"token punctuation\" >(</span>\n  <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'X'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'Y'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'Z'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, \"A\", \"X\", 2, \"B\", \"Y\" ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Since <code><a href=\"/docs/latest@main/List#interleave()\">interleave()</a></code> re-indexes values, it produces a complete copy,\nwhich has <code>O<span class=\"token punctuation\" >(</span>N<span class=\"token punctuation\" >)</span></code> complexity.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#interleave()\">interleave</a></code> <em>cannot</em> be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3586,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 11,
                              "param": "T"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#interleave()"
          },
          "interpose": {
            "name": "interpose",
            "label": "interpose()",
            "id": "interpose()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a Collection of the same type with <code><span class=\"t param\">separator</span></code> between each item\nin this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3550,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#interpose()"
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 6
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastIndexOf": {
            "name": "lastIndexOf",
            "label": "lastIndexOf()",
            "id": "lastIndexOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last index at which a given value can be found in the\nCollection, or -1 if it is not present.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3696,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#lastIndexOf()"
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection.Indexed with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Collection</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Indexed</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 1, 2 ]</span></code><p>Note: <code><a href=\"/docs/latest@main/Collection.Indexed#map()\">map()</a></code> always returns a new instance, even if it produced the\nsame value at every step.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3738,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#map()",
            "overrides": {
              "interface": "Collection",
              "label": "map()",
              "url": "/docs/latest@main/Collection#map()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "splice": {
            "name": "splice",
            "label": "splice()",
            "id": "splice()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Splice returns a new indexed Collection by replacing a region of this\nCollection with new values. If values are not provided, it only skips the\nregion to be removed.</p>\n",
              "description": "<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nCollection. <code>s<span class=\"token punctuation\" >.</span>splice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> splices after the second to last item.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'d'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>splice<span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'q'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'r'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'s'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"a\", \"q\", \"r\", \"s\", \"d\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Since <code><a href=\"/docs/latest@main/List#splice()\">splice()</a></code> re-indexes values, it produces a complete copy, which\nhas <code>O<span class=\"token punctuation\" >(</span>N<span class=\"token punctuation\" >)</span></code> complexity.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#splice()\">splice</a></code> <em>cannot</em> be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3608,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "removeNum",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "values",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#splice()"
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3516,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toArray()",
            "overrides": {
              "interface": "Collection",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Indexed collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3506,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toJS()",
            "overrides": {
              "interface": "Collection",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Indexed collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3511,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toJSON()",
            "overrides": {
              "interface": "Collection",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "T"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns Seq.Indexed.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3536,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toSeq()",
            "overrides": {
              "interface": "Collection",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#update()",
            "inherited": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          },
          "zip": {
            "name": "zip",
            "label": "zip()",
            "id": "zip()",
            "group": "Combination",
            "signatures": [
              {
                "line": 3626,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              },
              {
                "line": 3627,
                "typeParams": [
                  "U",
                  "V"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "other2",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              },
              {
                "line": 3631,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#zip()"
          },
          "zipAll": {
            "name": "zipAll",
            "label": "zipAll()",
            "id": "zipAll()",
            "group": "Combination",
            "signatures": [
              {
                "line": 3647,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              },
              {
                "line": 3648,
                "typeParams": [
                  "U",
                  "V"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "other2",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              },
              {
                "line": 3652,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#zipAll()"
          },
          "zipWith": {
            "name": "zipWith",
            "label": "zipWith()",
            "id": "zipWith()",
            "group": "Combination",
            "signatures": [
              {
                "line": 3670,
                "typeParams": [
                  "U",
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "otherValue",
                          "type": {
                            "k": 11,
                            "param": "U"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "otherCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              },
              {
                "line": 3674,
                "typeParams": [
                  "U",
                  "V",
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "otherValue",
                          "type": {
                            "k": 11,
                            "param": "U"
                          }
                        },
                        {
                          "name": "thirdValue",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "otherCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "thirdCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              },
              {
                "line": 3679,
                "typeParams": [
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "values",
                          "type": {
                            "k": 12,
                            "name": "Array",
                            "args": [
                              {
                                "k": 2
                              }
                            ]
                          },
                          "varArgs": true
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed#zipWith()"
          }
        },
        "line": 3502,
        "typeParams": [
          "T"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Collection",
            "args": [
              {
                "k": 6
              },
              {
                "k": 11,
                "param": "T"
              }
            ],
            "url": "/docs/latest@main/Collection"
          }
        ]
      },
      "label": "Collection.Indexed",
      "url": "/docs/latest@main/Collection.Indexed"
    },
    "Collection.Keyed": {
      "qualifiedName": "Collection.Keyed",
      "doc": {
        "synopsis": "<p>Keyed Collections have discrete keys tied to each value.</p>\n",
        "description": "<p>When iterating <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code>, each iteration will yield a <code><span class=\"token punctuation\" >[</span>K<span class=\"token punctuation\" >,</span> V<span class=\"token punctuation\" >]</span></code>\ntuple, in other words, <code><a href=\"/docs/latest@main/Collection#entries()\">Collection#entries</a></code> is the default iterator for\nKeyed Collections.</p>\n",
        "notes": []
      },
      "call": {
        "name": "Collection.Keyed",
        "label": "Collection.Keyed()",
        "id": "Collection.Keyed()",
        "signatures": [
          {
            "line": 3329,
            "typeParams": [
              "K",
              "V"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Iterable",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Collection.Keyed",
              "args": [
                {
                  "k": 11,
                  "param": "K"
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Collection.Keyed"
            }
          },
          {
            "line": 3330,
            "typeParams": [
              "V"
            ],
            "params": [
              {
                "name": "obj",
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Collection.Keyed",
              "args": [
                {
                  "k": 7
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Collection.Keyed"
            }
          }
        ],
        "url": "/docs/latest@main/Collection.Keyed#Collection.Keyed()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Sequence functions",
            "signatures": [
              {
                "line": 3472,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#[Symbol.iterator]()",
            "overrides": {
              "interface": "Collection",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection#[Symbol.iterator]()"
            }
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Sequence functions",
            "signatures": [
              {
                "line": 3376,
                "typeParams": [
                  "KC",
                  "VC"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 15,
                              "types": [
                                {
                                  "k": 11,
                                  "param": "KC"
                                },
                                {
                                  "k": 11,
                                  "param": "VC"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "KC"
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "VC"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              },
              {
                "line": 3379,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 8,
                          "members": [
                            {
                              "index": true,
                              "params": [
                                {
                                  "name": "key",
                                  "type": {
                                    "k": 7
                                  }
                                }
                              ],
                              "type": {
                                "k": 11,
                                "param": "C"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 7
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#concat()",
            "overrides": {
              "interface": "Collection",
              "label": "concat()",
              "url": "/docs/latest@main/Collection#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence functions",
            "signatures": [
              {
                "line": 3463,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              },
              {
                "line": 3467,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#filter()",
            "overrides": {
              "interface": "Collection",
              "label": "filter()",
              "url": "/docs/latest@main/Collection#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence functions",
            "doc": {
              "synopsis": "<p>Flat-maps the Collection, returning a Collection of the same type.</p>\n",
              "description": "<p>Similar to <code>collection<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3451,
                "typeParams": [
                  "KM",
                  "VM"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "KM"
                              },
                              {
                                "k": 11,
                                "param": "VM"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "KM"
                    },
                    {
                      "k": 11,
                      "param": "VM"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#flatMap()",
            "overrides": {
              "interface": "Collection",
              "label": "flatMap()",
              "url": "/docs/latest@main/Collection#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "flip": {
            "name": "flip",
            "label": "flip()",
            "id": "flip()",
            "group": "Sequence functions",
            "doc": {
              "synopsis": "<p>Returns a new Collection.Keyed of the same type where the keys and values\nhave been flipped.</p>\n",
              "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'z'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'y'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flip<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"z\": \"a\", \"y\": \"b\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 3371,
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#flip()"
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#get()",
            "inherited": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence functions",
            "doc": {
              "synopsis": "<p>Returns a new Collection.Keyed with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Collection</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyed</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { \"a\": 10, \"b\": 20 }</span></code><p>Note: <code><a href=\"/docs/latest@main/Collection.Keyed#map()\">map()</a></code> always returns a new instance, even if it produced the\nsame value at every step.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3396,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#map()",
            "overrides": {
              "interface": "Collection",
              "label": "map()",
              "url": "/docs/latest@main/Collection#map()"
            }
          },
          "mapEntries": {
            "name": "mapEntries",
            "label": "mapEntries()",
            "id": "mapEntries()",
            "group": "Sequence functions",
            "doc": {
              "synopsis": "<p>Returns a new Collection.Keyed of the same type with entries\n([key, value] tuples) passed through a <code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>mapEntries<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> k<span class=\"token punctuation\" >,</span> v <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >[</span> k<span class=\"token punctuation\" >.</span>toUpperCase<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> v <span class=\"token operator\" >*</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"A\": 2, \"B\": 4 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Collection.Keyed#mapEntries()\">mapEntries()</a></code> always returns a new instance, even if it produced\nthe same entry at every step.</p>\n<p>If the mapper function returns <code><span class=\"token primitive\" >undefined</span></code>, then the entry will be filtered</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3437,
                "typeParams": [
                  "KM",
                  "VM"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "entry",
                          "type": {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "K"
                              },
                              {
                                "k": 11,
                                "param": "V"
                              }
                            ]
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "KM"
                              },
                              {
                                "k": 11,
                                "param": "VM"
                              }
                            ]
                          },
                          {
                            "k": 4
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "KM"
                    },
                    {
                      "k": 11,
                      "param": "VM"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#mapEntries()"
          },
          "mapKeys": {
            "name": "mapKeys",
            "label": "mapKeys()",
            "id": "mapKeys()",
            "group": "Sequence functions",
            "doc": {
              "synopsis": "<p>Returns a new Collection.Keyed of the same type with keys passed through\na <code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>mapKeys<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>toUpperCase<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"A\": 1, \"B\": 2 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Collection.Keyed#mapKeys()\">mapKeys()</a></code> always returns a new instance, even if it produced\nthe same key at every step.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3415,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#mapKeys()"
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3350,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toArray()",
            "overrides": {
              "interface": "Collection",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Keyed collection to equivalent native JavaScript Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3338,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toJS()",
            "overrides": {
              "interface": "Collection",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Keyed collection to equivalent native JavaScript Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3345,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toJSON()",
            "overrides": {
              "interface": "Collection",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns Seq.Keyed.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3356,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toSeq()",
            "overrides": {
              "interface": "Collection",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#update()",
            "inherited": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          }
        },
        "line": 3332,
        "typeParams": [
          "K",
          "V"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Collection",
            "args": [
              {
                "k": 11,
                "param": "K"
              },
              {
                "k": 11,
                "param": "V"
              }
            ],
            "url": "/docs/latest@main/Collection"
          }
        ]
      },
      "label": "Collection.Keyed",
      "url": "/docs/latest@main/Collection.Keyed"
    },
    "Collection.Set": {
      "qualifiedName": "Collection.Set",
      "doc": {
        "synopsis": "<p>Set Collections only represent values. They have no associated keys or\nindices. Duplicate values are possible in the lazy <code><a href=\"/docs/latest@main/Seq.Set\">Seq.Set</a></code>s, however\nthe concrete <code><a href=\"/docs/latest@main/Set\">Set</a></code> Collection does not allow duplicate values.</p>\n",
        "description": "<p>Collection methods on Collection.Set such as <code><a href=\"/docs/latest@main/Collection.Set#map()\">map</a></code> and <code><a href=\"/docs/latest@main/Collection.Set#forEach()\">forEach</a></code> will provide\nthe value as both the first and second arguments to the provided function.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Collection</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> seq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { \"A\", \"B\", \"C\" }\n</span>seq<span class=\"token punctuation\" >.</span>forEach<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>v<span class=\"token punctuation\" >,</span> k<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span>\n assert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span>v<span class=\"token punctuation\" >,</span> k<span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >)</span></code>",
        "notes": []
      },
      "call": {
        "name": "Collection.Set",
        "label": "Collection.Set()",
        "id": "Collection.Set()",
        "doc": {
          "synopsis": "<p>Similar to <code><a href=\"/docs/latest@main/Collection\">Collection()</a></code>, but always returns a Collection.Set.</p>\n",
          "description": "<p>Note: <code><a href=\"/docs/latest@main/Collection.Set\">Collection.Set</a></code> is a factory function and not a class, and does\nnot use the <code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 3797,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "ArrayLike",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Collection.Set",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/Collection.Set"
            }
          }
        ],
        "url": "/docs/latest@main/Collection.Set#Collection.Set()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 3871,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#[Symbol.iterator]()",
            "overrides": {
              "interface": "Collection",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection#[Symbol.iterator]()"
            }
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection with other collections concatenated to this one.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3826,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 11,
                              "param": "U"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Set",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#concat()",
            "overrides": {
              "interface": "Collection",
              "label": "concat()",
              "url": "/docs/latest@main/Collection#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 3862,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Set"
                }
              },
              {
                "line": 3866,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#filter()",
            "overrides": {
              "interface": "Collection",
              "label": "filter()",
              "url": "/docs/latest@main/Collection#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the Collection, returning a Collection of the same type.</p>\n",
              "description": "<p>Similar to <code>collection<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3850,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#flatMap()",
            "overrides": {
              "interface": "Collection",
              "label": "flatMap()",
              "url": "/docs/latest@main/Collection#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#get()",
            "inherited": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection.Set with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1, 2 }</span></code><p>Note: <code><a href=\"/docs/latest@main/Collection.Set#map()\">map()</a></code> always returns a new instance, even if it produced the\nsame value at every step.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3840,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#map()",
            "overrides": {
              "interface": "Collection",
              "label": "map()",
              "url": "/docs/latest@main/Collection#map()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3813,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toArray()",
            "overrides": {
              "interface": "Collection",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Set collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3803,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toJS()",
            "overrides": {
              "interface": "Collection",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Set collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3808,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toJSON()",
            "overrides": {
              "interface": "Collection",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "T"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns Seq.Set.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3819,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toSeq()",
            "overrides": {
              "interface": "Collection",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#update()",
            "inherited": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Collection.Set#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          }
        },
        "line": 3799,
        "typeParams": [
          "T"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Collection",
            "args": [
              {
                "k": 11,
                "param": "T"
              },
              {
                "k": 11,
                "param": "T"
              }
            ],
            "url": "/docs/latest@main/Collection"
          }
        ]
      },
      "label": "Collection.Set",
      "url": "/docs/latest@main/Collection.Set"
    },
    "List": {
      "qualifiedName": "List",
      "doc": {
        "synopsis": "<p>Lists are ordered indexed dense collections, much like a JavaScript\nArray.</p>\n",
        "description": "<p>Lists are immutable and fully persistent with O(log32 N) gets and sets,\nand O(1) push and pop.</p>\n<p>Lists implement Deque, with efficient addition and removal from both the\nend (<code><a href=\"/docs/latest@main/List#push()\">push</a></code>, <code><a href=\"/docs/latest@main/List#pop()\">pop</a></code>) and beginning (<code><a href=\"/docs/latest@main/List#unshift()\">unshift</a></code>, <code><a href=\"/docs/latest@main/List#shift()\">shift</a></code>).</p>\n<p>Unlike a JavaScript Array, there is no distinction between an\n&quot;unset&quot; index and an index set to <code><span class=\"token primitive\" >undefined</span></code>. <code><a href=\"/docs/latest@main/List#forEach()\">List#forEach</a></code> visits all\nindices from 0 to size, regardless of whether they were explicitly defined.</p>\n",
        "notes": []
      },
      "functions": {
        "isList": {
          "name": "List.isList",
          "label": "List.isList()",
          "id": "isList()",
          "isStatic": true,
          "signatures": [
            {
              "line": 118,
              "params": [
                {
                  "name": "maybeList",
                  "type": {
                    "k": 2
                  }
                }
              ],
              "type": {
                "k": 5
              }
            }
          ],
          "url": "/docs/latest@main/List#isList()"
        },
        "of": {
          "name": "List.of",
          "label": "List.of()",
          "id": "of()",
          "isStatic": true,
          "signatures": [
            {
              "line": 139,
              "typeParams": [
                "T"
              ],
              "params": [
                {
                  "name": "values",
                  "type": {
                    "k": 12,
                    "name": "Array",
                    "args": [
                      {
                        "k": 11,
                        "param": "T"
                      }
                    ]
                  },
                  "varArgs": true
                }
              ],
              "type": {
                "k": 12,
                "name": "List",
                "args": [
                  {
                    "k": 11,
                    "param": "T"
                  }
                ],
                "url": "/docs/latest@main/List"
              }
            }
          ],
          "url": "/docs/latest@main/List#of()"
        }
      },
      "call": {
        "name": "List",
        "label": "List()",
        "id": "List()",
        "doc": {
          "synopsis": "<p>Create a new immutable List containing the values of the provided\ncollection-like.</p>\n",
          "description": "<p>Note: <code><a href=\"/docs/latest@main/List\">List</a></code> is a factory function and not a class, and does not use the\n<code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Set</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<span class=\"token keyword\" >const</span> emptyList <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List []\n</span>\n<span class=\"token keyword\" >const</span> plainArray <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >]</span>\n<span class=\"token keyword\" >const</span> listFromPlainArray <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>plainArray<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, 2, 3, 4 ]\n</span>\n<span class=\"token keyword\" >const</span> plainSet <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listFromPlainSet <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>plainSet<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, 2, 3, 4 ]\n</span>\n<span class=\"token keyword\" >const</span> arrayIterator <span class=\"token operator\" >=</span> plainArray<span class=\"token punctuation\" >[</span><span class=\"token qualifier\" >Symbol</span><span class=\"token punctuation\" >.</span>iterator<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listFromCollectionArray <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>arrayIterator<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, 2, 3, 4 ]\n</span>\nlistFromPlainArray<span class=\"token punctuation\" >.</span>equals<span class=\"token punctuation\" >(</span>listFromCollectionArray<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>listFromPlainSet<span class=\"token punctuation\" >.</span>equals<span class=\"token punctuation\" >(</span>listFromCollectionArray<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>listFromPlainSet<span class=\"token punctuation\" >.</span>equals<span class=\"token punctuation\" >(</span>listFromPlainArray<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// true</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 173,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "ArrayLike",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "List",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/List"
            }
          }
        ],
        "url": "/docs/latest@main/List#List()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 3769,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#[Symbol.iterator]()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection.Indexed#[Symbol.iterator]()"
            }
          },
          "asImmutable": {
            "name": "asImmutable",
            "label": "asImmutable()",
            "id": "asImmutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 533,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#asImmutable()"
          },
          "asMutable": {
            "name": "asMutable",
            "label": "asMutable()",
            "id": "asMutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>An alternative API for withMutations()</p>\n",
              "description": "<p>Note: Not all methods can be safely used on a mutable collection or within\n<code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nallows being used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 523,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#asMutable()"
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "clear": {
            "name": "clear",
            "label": "clear()",
            "id": "clear()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List with 0 size and no values in constant time.</p>\n",
              "description": "<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable');\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>clear<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List []</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#clear()\">clear</a></code> can be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 278,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#clear()"
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new List with other values or collections concatenated to this one.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/List#concat()\">concat</a></code> can be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "merge"
                }
              ]
            },
            "signatures": [
              {
                "line": 544,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "valuesOrCollections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 11,
                                  "param": "C"
                                }
                              ]
                            },
                            {
                              "k": 11,
                              "param": "C"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#concat()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "concat()",
              "url": "/docs/latest@main/Collection.Indexed#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/List#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/List#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "delete": {
            "name": "delete",
            "label": "delete()",
            "id": "delete()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List which excludes this <code><span class=\"t param\">index</span></code> and with a size 1 less\nthan this List. Values at indices above <code><span class=\"t param\">index</span></code> are shifted down by 1 to\nfill the position.</p>\n",
              "description": "<p>This is synonymous with <code>list<span class=\"token punctuation\" >.</span>splice<span class=\"token punctuation\" >(</span>index<span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code>.</p>\n<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nList. <code>v<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >delete</span><span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> deletes the last item in the List.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#delete()\">delete</a></code> cannot be safely used in IE8</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable');\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >delete</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, 2, 3, 4 ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Since <code><a href=\"/docs/latest@main/List#delete()\">delete()</a></code> re-indexes values, it produces a complete copy, which\nhas <code>O<span class=\"token punctuation\" >(</span>N<span class=\"token punctuation\" >)</span></code> complexity.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#delete()\">delete</a></code> <em>cannot</em> be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "remove"
                }
              ]
            },
            "signatures": [
              {
                "line": 241,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#delete()"
          },
          "deleteIn": {
            "name": "deleteIn",
            "label": "deleteIn()",
            "id": "deleteIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List having removed the value at this <code><span class=\"t param\">keyPath</span></code>. If any\nkeys in <code><span class=\"t param\">keyPath</span></code> do not exist, no change will occur.</p>\n",
              "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> list <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\nlist<span class=\"token punctuation\" >.</span>deleteIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 0, 1, 2, List [ 4 ] ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and removeIn() can update those values as well, treating them\nimmutably by creating new copies of those values with the changes applied.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> list <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> plain<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'object'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\nlist<span class=\"token punctuation\" >.</span>removeIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'plain'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List([ 0, 1, 2, {}])</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#deleteIn()\">deleteIn</a></code> <em>cannot</em> be safely used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "removeIn"
                }
              ]
            },
            "signatures": [
              {
                "line": 468,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#deleteIn()"
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/List#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/List#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/List#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 581,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              },
              {
                "line": 585,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#filter()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "filter()",
              "url": "/docs/latest@main/Collection.Indexed#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findIndex": {
            "name": "findIndex",
            "label": "findIndex()",
            "id": "findIndex()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first index in the Collection where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/List#findIndex()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "findIndex()",
              "url": "/docs/latest@main/Collection.Indexed#findIndex()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastIndex": {
            "name": "findLastIndex",
            "label": "findLastIndex()",
            "id": "findLastIndex()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last index in the Collection where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3711,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/List#findLastIndex()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "findLastIndex()",
              "url": "/docs/latest@main/Collection.Indexed#findLastIndex()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the List, returning a new List.</p>\n",
              "description": "<p>Similar to <code>list<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 569,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#flatMap()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "flatMap()",
              "url": "/docs/latest@main/Collection.Indexed#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/List#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/List#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "fromEntrySeq": {
            "name": "fromEntrySeq",
            "label": "fromEntrySeq()",
            "id": "fromEntrySeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>If this is a collection of [key, value] entry tuples, it will return a\nSeq.Keyed of those entries.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3542,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/List#fromEntrySeq()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "fromEntrySeq()",
              "url": "/docs/latest@main/Collection.Indexed#fromEntrySeq()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3527,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3528,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#get()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "get()",
              "url": "/docs/latest@main/Collection.Indexed#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/List#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/List#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/List#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/List#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/List#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/List#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "indexOf": {
            "name": "indexOf",
            "label": "indexOf()",
            "id": "indexOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first index at which a given value can be found in the\nCollection, or -1 if it is not present.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3690,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/List#indexOf()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "indexOf()",
              "url": "/docs/latest@main/Collection.Indexed#indexOf()"
            }
          },
          "insert": {
            "name": "insert",
            "label": "insert()",
            "id": "insert()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List with <code><span class=\"t param\">value</span></code> at <code><span class=\"t param\">index</span></code> with a size 1 more than this\nList. Values at indices above <code><span class=\"t param\">index</span></code> are shifted over by 1.</p>\n",
              "description": "<p>This is synonymous with <code>list<span class=\"token punctuation\" >.</span>splice<span class=\"token punctuation\" >(</span>index<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >)</span></code>.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable');\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>insert<span class=\"token punctuation\" >(</span><span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 0, 1, 2, 3, 4, 5 ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Since <code><a href=\"/docs/latest@main/List#insert()\">insert()</a></code> re-indexes values, it produces a complete copy, which\nhas <code>O<span class=\"token punctuation\" >(</span>N<span class=\"token punctuation\" >)</span></code> complexity.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#insert()\">insert</a></code> <em>cannot</em> be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 263,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#insert()"
          },
          "interleave": {
            "name": "interleave",
            "label": "interleave()",
            "id": "interleave()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a Collection of the same type with the provided <code><span class=\"t param\">collections</span></code>\ninterleaved into this collection.</p>\n",
              "description": "<p>The resulting Collection includes the first item from each, then the\nsecond from each, etc.</p>\n<!-- runkit:activate\n     { \"preamble\": \"require('immutable')\"}\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>interleave<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, \"A\", 2, \"B\", 3, \"C\" ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>The shortest Collection stops interleave.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>interleave<span class=\"token punctuation\" >(</span>\n  <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'X'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'Y'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'Z'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, \"A\", \"X\", 2, \"B\", \"Y\" ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Since <code><a href=\"/docs/latest@main/List#interleave()\">interleave()</a></code> re-indexes values, it produces a complete copy,\nwhich has <code>O<span class=\"token punctuation\" >(</span>N<span class=\"token punctuation\" >)</span></code> complexity.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#interleave()\">interleave</a></code> <em>cannot</em> be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3586,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 11,
                              "param": "T"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#interleave()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "interleave()",
              "url": "/docs/latest@main/Collection.Indexed#interleave()"
            }
          },
          "interpose": {
            "name": "interpose",
            "label": "interpose()",
            "id": "interpose()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a Collection of the same type with <code><span class=\"t param\">separator</span></code> between each item\nin this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3550,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#interpose()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "interpose()",
              "url": "/docs/latest@main/Collection.Indexed#interpose()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/List#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/List#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/List#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/List#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/List#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 6
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastIndexOf": {
            "name": "lastIndexOf",
            "label": "lastIndexOf()",
            "id": "lastIndexOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last index at which a given value can be found in the\nCollection, or -1 if it is not present.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3696,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/List#lastIndexOf()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "lastIndexOf()",
              "url": "/docs/latest@main/Collection.Indexed#lastIndexOf()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new List with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable');\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 10, 20 ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 559,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#map()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "map()",
              "url": "/docs/latest@main/Collection.Indexed#map()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "mergeDeepIn": {
            "name": "mergeDeepIn",
            "label": "mergeDeepIn()",
            "id": "mergeDeepIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>Note: <code><a href=\"/docs/latest@main/List#mergeDeepIn()\">mergeDeepIn</a></code> can be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#mergeDeepIn()\">Map#mergeDeepIn</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 498,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#mergeDeepIn()"
          },
          "mergeIn": {
            "name": "mergeIn",
            "label": "mergeIn()",
            "id": "mergeIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>Note: <code><a href=\"/docs/latest@main/List#mergeIn()\">mergeIn</a></code> can be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#mergeIn()\">Map#mergeIn</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 491,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#mergeIn()"
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "pop": {
            "name": "pop",
            "label": "pop()",
            "id": "pop()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List with a size ones less than this List, excluding\nthe last index in this List.</p>\n",
              "description": "<p>Note: this differs from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\" target=\"_blank\" rel=\"noopener\">Array#pop</a></code> because it returns a new\nList rather than the removed value. Use <code><a href=\"/docs/latest@main/List#last()\">last()</a></code> to get the last value\nin this List.</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>pop<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List[ 1, 2, 3 ]</span></code><p>Note: <code><a href=\"/docs/latest@main/List#pop()\">pop</a></code> can be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 311,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#pop()"
          },
          "push": {
            "name": "push",
            "label": "push()",
            "id": "push()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List with the provided <code><span class=\"t param\">values</span></code> appended, starting at this\nList&#39;s <code><a href=\"/docs/latest@main/List#size\">size</a></code>.</p>\n",
              "description": "<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable');\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>push<span class=\"token punctuation\" >(</span><span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, 2, 3, 4, 5 ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#push()\">push</a></code> can be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 294,
                "params": [
                  {
                    "name": "values",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#push()"
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/List#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/List#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "set": {
            "name": "set",
            "label": "set()",
            "id": "set()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List which includes <code><span class=\"t param\">value</span></code> at <code><span class=\"t param\">index</span></code>. If <code><span class=\"t param\">index</span></code> already\nexists in this List, it will be replaced.</p>\n",
              "description": "<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nList. <code>v<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"value\"</span><span class=\"token punctuation\" >)</span></code> sets the last item in the List.</p>\n<p>If <code><span class=\"t param\">index</span></code> larger than <code><a href=\"/docs/latest@main/List#size\">size</a></code>, the returned List&#39;s <code><a href=\"/docs/latest@main/List#size\">size</a></code> will be large\nenough to include the <code><span class=\"t param\">index</span></code>.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable');\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> originalList <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 0 ]\n</span>originalList<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 0, 1 ]\n</span>originalList<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'overwritten'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"overwritten\" ]\n</span>originalList<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 0, undefined, 2 ]\n</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >50000</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'value'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>size<span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 50001</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#set()\">set</a></code> can be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 212,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#set()"
          },
          "setIn": {
            "name": "setIn",
            "label": "setIn()",
            "id": "setIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List having set <code><span class=\"t param\">value</span></code> at this <code><span class=\"t param\">keyPath</span></code>. If any keys in\n<code><span class=\"t param\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\n",
              "description": "<p>Index numbers are used as keys to determine the path to follow in\nthe List.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> list <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\nlist<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >999</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 0, 1, 2, List [ 999, 4 ] ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and setIn() can update those values as well, treating them\nimmutably by creating new copies of those values with the changes applied.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> list <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> plain<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'object'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\nlist<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'plain'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'value'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List([ 0, 1, 2, { plain: 'value' }])</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#setIn()\">setIn</a></code> can be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 438,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#setIn()"
          },
          "setSize": {
            "name": "setSize",
            "label": "setSize()",
            "id": "setSize()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List with size <code><span class=\"t param\">size</span></code>. If <code><span class=\"t param\">size</span></code> is less than this\nList&#39;s size, the new List will exclude values at the higher indices.\nIf <code><span class=\"t param\">size</span></code> is greater than this List&#39;s size, the new List will have\nundefined values for the newly available indices.</p>\n",
              "description": "<p>When building a new List and the final size is known up front, <code><a href=\"/docs/latest@main/List#setSize()\">setSize</a></code>\nused in conjunction with <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code> may result in the more\nperformant construction.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 405,
                "params": [
                  {
                    "name": "size",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#setSize()"
          },
          "shift": {
            "name": "shift",
            "label": "shift()",
            "id": "shift()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List with a size ones less than this List, excluding\nthe first index in this List, shifting all other values to a lower index.</p>\n",
              "description": "<p>Note: this differs from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\" target=\"_blank\" rel=\"noopener\">Array#shift</a></code> because it returns a new\nList rather than the removed value. Use <code><a href=\"/docs/latest@main/List#first()\">first()</a></code> to get the first\nvalue in this List.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable');\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>shift<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, 2, 3, 4 ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#shift()\">shift</a></code> can be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 347,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#shift()"
          },
          "size": {
            "name": "size",
            "label": "size",
            "id": "size",
            "line": 179,
            "doc": {
              "synopsis": "<p>The number of items in this List.</p>\n",
              "description": "",
              "notes": []
            },
            "type": {
              "k": 6
            },
            "url": "/docs/latest@main/List#size"
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/List#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "splice": {
            "name": "splice",
            "label": "splice()",
            "id": "splice()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Splice returns a new indexed Collection by replacing a region of this\nCollection with new values. If values are not provided, it only skips the\nregion to be removed.</p>\n",
              "description": "<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nCollection. <code>s<span class=\"token punctuation\" >.</span>splice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> splices after the second to last item.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'d'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>splice<span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'q'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'r'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'s'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"a\", \"q\", \"r\", \"s\", \"d\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Since <code><a href=\"/docs/latest@main/List#splice()\">splice()</a></code> re-indexes values, it produces a complete copy, which\nhas <code>O<span class=\"token punctuation\" >(</span>N<span class=\"token punctuation\" >)</span></code> complexity.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#splice()\">splice</a></code> <em>cannot</em> be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3608,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "removeNum",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "values",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#splice()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "splice()",
              "url": "/docs/latest@main/Collection.Indexed#splice()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3516,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#toArray()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection.Indexed#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/List#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Indexed collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3506,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#toJS()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection.Indexed#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Indexed collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3511,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#toJSON()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection.Indexed#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/List#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/List#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "T"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/List#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/List#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns Seq.Indexed.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3536,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/List#toSeq()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection.Indexed#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/List#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/List#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/List#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "unshift": {
            "name": "unshift",
            "label": "unshift()",
            "id": "unshift()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new List with the provided <code><span class=\"t param\">values</span></code> prepended, shifting other\nvalues ahead to higher indices.</p>\n",
              "description": "<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable');\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>unshift<span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, 2, 3, 4 ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%3B%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#unshift()\">unshift</a></code> can be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 327,
                "params": [
                  {
                    "name": "values",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#unshift()"
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 391,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "T"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              },
              {
                "line": 392,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 4
                              }
                            ]
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "T"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              },
              {
                "line": 393,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/List#update()",
            "overrides": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "updateIn": {
            "name": "updateIn",
            "label": "updateIn()",
            "id": "updateIn()",
            "group": "Deep persistent changes",
            "signatures": [
              {
                "line": 476,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 2
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              },
              {
                "line": 481,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 2
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#updateIn()"
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/List#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/List#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          },
          "wasAltered": {
            "name": "wasAltered",
            "label": "wasAltered()",
            "id": "wasAltered()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#wasAltered()\">Map#wasAltered</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 528,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/List#wasAltered()"
          },
          "withMutations": {
            "name": "withMutations",
            "label": "withMutations()",
            "id": "withMutations()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Note: Not all methods can be safely used on a mutable collection or within\n<code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nallows being used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#withMutations()\">Map#withMutations</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 512,
                "params": [
                  {
                    "name": "mutator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "mutable",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/List#withMutations()"
          },
          "zip": {
            "name": "zip",
            "label": "zip()",
            "id": "zip()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 604,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              },
              {
                "line": 605,
                "typeParams": [
                  "U",
                  "V"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "other2",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              },
              {
                "line": 609,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#zip()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "zip()",
              "url": "/docs/latest@main/Collection.Indexed#zip()"
            }
          },
          "zipAll": {
            "name": "zipAll",
            "label": "zipAll()",
            "id": "zipAll()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 630,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              },
              {
                "line": 631,
                "typeParams": [
                  "U",
                  "V"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "other2",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              },
              {
                "line": 635,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#zipAll()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "zipAll()",
              "url": "/docs/latest@main/Collection.Indexed#zipAll()"
            }
          },
          "zipWith": {
            "name": "zipWith",
            "label": "zipWith()",
            "id": "zipWith()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 651,
                "typeParams": [
                  "U",
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "otherValue",
                          "type": {
                            "k": 11,
                            "param": "U"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "otherCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              },
              {
                "line": 655,
                "typeParams": [
                  "U",
                  "V",
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "otherValue",
                          "type": {
                            "k": 11,
                            "param": "U"
                          }
                        },
                        {
                          "name": "thirdValue",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "otherCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "thirdCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              },
              {
                "line": 660,
                "typeParams": [
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "values",
                          "type": {
                            "k": 12,
                            "name": "Array",
                            "args": [
                              {
                                "k": 2
                              }
                            ]
                          },
                          "varArgs": true
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/List#zipWith()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "zipWith()",
              "url": "/docs/latest@main/Collection.Indexed#zipWith()"
            }
          }
        },
        "line": 175,
        "typeParams": [
          "T"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Collection.Indexed",
            "args": [
              {
                "k": 11,
                "param": "T"
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed"
          }
        ]
      },
      "label": "List",
      "url": "/docs/latest@main/List"
    },
    "Map": {
      "qualifiedName": "Map",
      "doc": {
        "synopsis": "<p>Immutable Map is an unordered Collection.Keyed of (key, value) pairs with\n<code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> gets and <code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> persistent sets.</p>\n",
        "description": "<p>Iteration order of a Map is undefined, however is stable. Multiple\niterations of the same Map will iterate in the same order.</p>\n<p>Map&#39;s keys can be of any type, and use <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code> to determine key\nequality. This allows the use of any value (including NaN) as a key.</p>\n<p>Because <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code> returns equality based on value semantics, and\nImmutable collections are treated as values, any Immutable collection may\nbe used as a key.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'listofone'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 'listofone'</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Any JavaScript object may be used as a key, however strict identity is used\nto evaluate key equality. Two similar looking objects will represent two\ndifferent keys.</p>\n<p>Implemented by a hash-array mapped trie.</p>\n",
        "notes": []
      },
      "functions": {
        "isMap": {
          "name": "Map.isMap",
          "label": "Map.isMap()",
          "id": "isMap()",
          "isStatic": true,
          "signatures": [
            {
              "line": 704,
              "params": [
                {
                  "name": "maybeMap",
                  "type": {
                    "k": 2
                  }
                }
              ],
              "type": {
                "k": 5
              }
            }
          ],
          "url": "/docs/latest@main/Map#isMap()"
        }
      },
      "call": {
        "name": "Map",
        "label": "Map()",
        "id": "Map()",
        "signatures": [
          {
            "line": 761,
            "typeParams": [
              "K",
              "V"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Iterable",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Map",
              "args": [
                {
                  "k": 11,
                  "param": "K"
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Map"
            }
          },
          {
            "line": 762,
            "typeParams": [
              "V"
            ],
            "params": [
              {
                "name": "obj",
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Map",
              "args": [
                {
                  "k": 7
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Map"
            }
          },
          {
            "line": 763,
            "typeParams": [
              "K",
              "V"
            ],
            "params": [
              {
                "name": "obj",
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Map",
              "args": [
                {
                  "k": 11,
                  "param": "K"
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Map"
            }
          }
        ],
        "url": "/docs/latest@main/Map#Map()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Sequence functions",
            "signatures": [
              {
                "line": 3472,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#[Symbol.iterator]()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection.Keyed#[Symbol.iterator]()"
            }
          },
          "asImmutable": {
            "name": "asImmutable",
            "label": "asImmutable()",
            "id": "asImmutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>The yin to <code><a href=\"/docs/latest@main/Map#asMutable()\">asMutable</a></code>&#39;s yang. Because it applies to mutable collections,\nthis operation is <em>mutable</em> and may return itself (though may not\nreturn itself, i.e. if the result is an empty collection). Once\nperformed, the original mutable copy must no longer be mutated since it\nmay be the immutable result.</p>\n",
              "description": "<p>If possible, use <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code> to work with temporary mutable copies as\nit provides an easier to use API and considers many common optimizations.</p>\n",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1346,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#asImmutable()"
          },
          "asMutable": {
            "name": "asMutable",
            "label": "asMutable()",
            "id": "asMutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Another way to avoid creation of intermediate Immutable maps is to create\na mutable copy of this collection. Mutable copies <em>always</em> return <code><span class=\"token var\" >this</span></code>,\nand thus shouldn&#39;t be used for equality. Your function should never return\na mutable copy of a collection, only use it internally to create a new\ncollection.</p>\n",
              "description": "<p>If possible, use <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code> to work with temporary mutable copies as\nit provides an easier to use API and considers many common optimizations.</p>\n<p>Note: if the collection is already mutable, <code><a href=\"/docs/latest@main/Map#asMutable()\">asMutable</a></code> returns itself.</p>\n<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>! Read the documentation for each method to see if it\nis safe to use in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1324,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#asMutable()"
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "clear": {
            "name": "clear",
            "label": "clear()",
            "id": "clear()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map containing no keys or values.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> key<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'value'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>clear<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {}</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#clear()\">clear</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 851,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#clear()"
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Sequence functions",
            "signatures": [
              {
                "line": 3376,
                "typeParams": [
                  "KC",
                  "VC"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 15,
                              "types": [
                                {
                                  "k": 11,
                                  "param": "KC"
                                },
                                {
                                  "k": 11,
                                  "param": "VC"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "KC"
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "VC"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              },
              {
                "line": 3379,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 8,
                          "members": [
                            {
                              "index": true,
                              "params": [
                                {
                                  "name": "key",
                                  "type": {
                                    "k": 7
                                  }
                                }
                              ],
                              "type": {
                                "k": 11,
                                "param": "C"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 7
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Map#concat()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "concat()",
              "url": "/docs/latest@main/Collection.Keyed#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Map#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Map#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "delete": {
            "name": "delete",
            "label": "delete()",
            "id": "delete()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map which excludes this <code><span class=\"t param\">key</span></code>.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Map#delete()\">delete</a></code> cannot be safely used in IE8, but is provided to mirror\nthe ES6 collection API.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  key<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'value'</span><span class=\"token punctuation\" >,</span>\n  otherKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'other value'</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"key\": \"value\", \"otherKey\": \"other value\" }\n</span>originalMap<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >delete</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'otherKey'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"key\": \"value\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#delete()\">delete</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "remove"
                }
              ]
            },
            "signatures": [
              {
                "line": 818,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#delete()"
          },
          "deleteAll": {
            "name": "deleteAll",
            "label": "deleteAll()",
            "id": "deleteAll()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map which excludes the provided <code><span class=\"t param\">keys</span></code>.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> names <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Aaron\"</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Barry\"</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Connor\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nnames<span class=\"token punctuation\" >.</span>deleteAll<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"b\": \"Barry\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#deleteAll()\">deleteAll</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "removeAll"
                }
              ]
            },
            "signatures": [
              {
                "line": 836,
                "params": [
                  {
                    "name": "keys",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "K"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#deleteAll()"
          },
          "deleteIn": {
            "name": "deleteIn",
            "label": "deleteIn()",
            "id": "deleteIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map having removed the value at this <code><span class=\"t param\">keyPath</span></code>. If any keys\nin <code><span class=\"t param\">keyPath</span></code> do not exist, no change will occur.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Map#deleteIn()\">deleteIn</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "removeIn"
                }
              ]
            },
            "signatures": [
              {
                "line": 1154,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#deleteIn()"
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Map#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Map#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Map#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 1399,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              },
              {
                "line": 1403,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#filter()",
            "overrides": {
              "interface": "Collection.Keyed",
              "label": "filter()",
              "url": "/docs/latest@main/Collection.Keyed#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the Map, returning a new Map.</p>\n",
              "description": "<p>Similar to <code>data<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1387,
                "typeParams": [
                  "KM",
                  "VM"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "KM"
                              },
                              {
                                "k": 11,
                                "param": "VM"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "KM"
                    },
                    {
                      "k": 11,
                      "param": "VM"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Map#flatMap()",
            "overrides": {
              "interface": "Collection.Keyed",
              "label": "flatMap()",
              "url": "/docs/latest@main/Collection.Keyed#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Map#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "flip": {
            "name": "flip",
            "label": "flip()",
            "id": "flip()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p>Collection.Keyed.flip</p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1411,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Map#flip()",
            "overrides": {
              "interface": "Collection.Keyed",
              "label": "flip()",
              "url": "/docs/latest@main/Collection.Keyed#flip()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Map#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#get()",
            "inherited": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Map#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Map#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Map#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Map#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Map#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Map#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Map#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Map#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Map#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Map#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Map#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Map with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { a: 10, b: 20 }</span></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 1357,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Map#map()",
            "overrides": {
              "interface": "Collection.Keyed",
              "label": "map()",
              "url": "/docs/latest@main/Collection.Keyed#map()"
            }
          },
          "mapEntries": {
            "name": "mapEntries",
            "label": "mapEntries()",
            "id": "mapEntries()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p>Collection.Keyed.mapEntries</p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1373,
                "typeParams": [
                  "KM",
                  "VM"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "entry",
                          "type": {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "K"
                              },
                              {
                                "k": 11,
                                "param": "V"
                              }
                            ]
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "KM"
                              },
                              {
                                "k": 11,
                                "param": "VM"
                              }
                            ]
                          },
                          {
                            "k": 4
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "KM"
                    },
                    {
                      "k": 11,
                      "param": "VM"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Map#mapEntries()",
            "overrides": {
              "interface": "Collection.Keyed",
              "label": "mapEntries()",
              "url": "/docs/latest@main/Collection.Keyed#mapEntries()"
            }
          },
          "mapKeys": {
            "name": "mapKeys",
            "label": "mapKeys()",
            "id": "mapKeys()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p>Collection.Keyed.mapKeys</p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1365,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Map#mapKeys()",
            "overrides": {
              "interface": "Collection.Keyed",
              "label": "mapKeys()",
              "url": "/docs/latest@main/Collection.Keyed#mapKeys()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "merge": {
            "name": "merge",
            "label": "merge()",
            "id": "merge()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 980,
                "typeParams": [
                  "KC",
                  "VC"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 15,
                              "types": [
                                {
                                  "k": 11,
                                  "param": "KC"
                                },
                                {
                                  "k": 11,
                                  "param": "VC"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "KC"
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "VC"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              },
              {
                "line": 983,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 8,
                          "members": [
                            {
                              "index": true,
                              "params": [
                                {
                                  "name": "key",
                                  "type": {
                                    "k": 7
                                  }
                                }
                              ],
                              "type": {
                                "k": 11,
                                "param": "C"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 7
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Map#merge()"
          },
          "mergeDeep": {
            "name": "mergeDeep",
            "label": "mergeDeep()",
            "id": "mergeDeep()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/Map#merge()\">merge()</a></code>, but when two compatible collections are encountered with\nthe same key, it merges them as well, recursing deeply through the nested\ndata. Two collections are considered to be compatible (and thus will be\nmerged together) if they both fall into one of three categories: keyed\n(e.g., <code><a href=\"/docs/latest@main/Map\">Map</a></code>s, <code><a href=\"/docs/latest@main/Record\">Record</a></code>s, and objects), indexed (e.g., <code><a href=\"/docs/latest@main/List\">List</a></code>s and\narrays), or set-like (e.g., <code><a href=\"/docs/latest@main/Set\">Set</a></code>s). If they fall into separate\ncategories, <code><a href=\"/docs/latest@main/Map#mergeDeep()\">mergeDeep</a></code> will replace the existing collection with the\ncollection being merged in. This behavior can be customized by using\n<code><a href=\"/docs/latest@main/Map#mergeDeepWith()\">mergeDeepWith()</a></code>.</p>\n",
              "description": "<p>Note: Indexed and set-like collections are merged using\n<code><a href=\"/docs/latest@main/Map#concat()\">concat()</a></code>/<code>union<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> and therefore do not recurse.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> one <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> two <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\none<span class=\"token punctuation\" >.</span>mergeDeep<span class=\"token punctuation\" >(</span>two<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"a\": Map { \"x\": 2, \"y\": 10 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"b\": Map { \"x\": 20, \"y\": 5 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"c\": Map { \"z\": 3 }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#mergeDeep()\">mergeDeep</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1045,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 15,
                                  "types": [
                                    {
                                      "k": 11,
                                      "param": "K"
                                    },
                                    {
                                      "k": 11,
                                      "param": "V"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "k": 8,
                              "members": [
                                {
                                  "index": true,
                                  "params": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "k": 7
                                      }
                                    }
                                  ],
                                  "type": {
                                    "k": 11,
                                    "param": "V"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#mergeDeep()"
          },
          "mergeDeepIn": {
            "name": "mergeDeepIn",
            "label": "mergeDeepIn()",
            "id": "mergeDeepIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>A combination of <code><a href=\"/docs/latest@main/Map#updateIn()\">updateIn</a></code> and <code><a href=\"/docs/latest@main/Map#mergeDeep()\">mergeDeep</a></code>, returning a new Map, but\nperforming the deep merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n",
              "description": "<p><code class=\"codeBlock\">map<span class=\"token punctuation\" >.</span>updateIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> abc <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> abc<span class=\"token punctuation\" >.</span>mergeDeep<span class=\"token punctuation\" >(</span>y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\nmap<span class=\"token punctuation\" >.</span>mergeDeepIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span></code><p>Note: <code><a href=\"/docs/latest@main/Map#mergeDeepIn()\">mergeDeepIn</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1269,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#mergeDeepIn()"
          },
          "mergeDeepWith": {
            "name": "mergeDeepWith",
            "label": "mergeDeepWith()",
            "id": "mergeDeepWith()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/Map#mergeDeep()\">mergeDeep()</a></code>, but when two non-collections or incompatible\ncollections are encountered at the same key, it uses the <code><span class=\"t param\">merger</span></code>\nfunction to determine the resulting value. Collections are considered\nincompatible if they fall into separate categories between keyed,\nindexed, and set-like.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> one <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> two <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\none<span class=\"token punctuation\" >.</span>mergeDeepWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >/</span> newVal<span class=\"token punctuation\" >,</span> two<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"a\": Map { \"x\": 5, \"y\": 10 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"b\": Map { \"x\": 20, \"y\": 10 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"c\": Map { \"z\": 3 }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#mergeDeepWith()\">mergeDeepWith</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1071,
                "params": [
                  {
                    "name": "merger",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "oldVal",
                          "type": {
                            "k": 2
                          }
                        },
                        {
                          "name": "newVal",
                          "type": {
                            "k": 2
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 2
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 15,
                                  "types": [
                                    {
                                      "k": 11,
                                      "param": "K"
                                    },
                                    {
                                      "k": 11,
                                      "param": "V"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "k": 8,
                              "members": [
                                {
                                  "index": true,
                                  "params": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "k": 7
                                      }
                                    }
                                  ],
                                  "type": {
                                    "k": 11,
                                    "param": "V"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#mergeDeepWith()"
          },
          "mergeIn": {
            "name": "mergeIn",
            "label": "mergeIn()",
            "id": "mergeIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>A combination of <code><a href=\"/docs/latest@main/Map#updateIn()\">updateIn</a></code> and <code><a href=\"/docs/latest@main/Map#merge()\">merge</a></code>, returning a new Map, but\nperforming the merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n",
              "description": "<p><code class=\"codeBlock\">map<span class=\"token punctuation\" >.</span>updateIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> abc <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> abc<span class=\"token punctuation\" >.</span>merge<span class=\"token punctuation\" >(</span>y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\nmap<span class=\"token punctuation\" >.</span>mergeIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span></code><p>Note: <code><a href=\"/docs/latest@main/Map#mergeIn()\">mergeIn</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1255,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#mergeIn()"
          },
          "mergeWith": {
            "name": "mergeWith",
            "label": "mergeWith()",
            "id": "mergeWith()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/Map#merge()\">merge()</a></code>, <code><a href=\"/docs/latest@main/Map#mergeWith()\">mergeWith()</a></code> returns a new Map resulting from merging\nthe provided Collections (or JS objects) into this Map, but uses the\n<code><span class=\"t param\">merger</span></code> function for dealing with conflicts.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> one <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> two <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >60</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\none<span class=\"token punctuation\" >.</span>mergeWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >/</span> newVal<span class=\"token punctuation\" >,</span> two<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// { \"a\": 0.2, \"b\": 0.5, \"c\": 30, \"d\": 60 }\n</span>two<span class=\"token punctuation\" >.</span>mergeWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >/</span> newVal<span class=\"token punctuation\" >,</span> one<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// { \"b\": 2, \"a\": 5, \"d\": 60, \"c\": 30 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#mergeWith()\">mergeWith</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1011,
                "params": [
                  {
                    "name": "merger",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "oldVal",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "newVal",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 15,
                                  "types": [
                                    {
                                      "k": 11,
                                      "param": "K"
                                    },
                                    {
                                      "k": 11,
                                      "param": "V"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "k": 8,
                              "members": [
                                {
                                  "index": true,
                                  "params": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "k": 7
                                      }
                                    }
                                  ],
                                  "type": {
                                    "k": 11,
                                    "param": "V"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#mergeWith()"
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Map#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Map#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "set": {
            "name": "set",
            "label": "set()",
            "id": "set()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map also containing the new key, value pair. If an equivalent\nkey already exists in this Map, it will be replaced.</p>\n",
              "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> newerMap <span class=\"token operator\" >=</span> originalMap<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'key'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'value'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> newestMap <span class=\"token operator\" >=</span> newerMap<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'key'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'newer value'</span><span class=\"token punctuation\" >)</span>\n\noriginalMap\n<span class=\"token comment\" spellcheck=\"true\">// Map {}\n</span>newerMap\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"key\": \"value\" }\n</span>newestMap\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"key\": \"newer value\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#set()\">set</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 794,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#set()"
          },
          "setIn": {
            "name": "setIn",
            "label": "setIn()",
            "id": "setIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map having set <code><span class=\"t param\">value</span></code> at this <code><span class=\"t param\">keyPath</span></code>. If any keys in\n<code><span class=\"t param\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  subObject<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n    subKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'subvalue'</span><span class=\"token punctuation\" >,</span>\n    subSubObject<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n      subSubKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'subSubValue'</span>\n    <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span></p>\n<p><span class=\"token keyword\" >const</span> newMap <span class=\"token operator\" >=</span> originalMap<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >&#39;subObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subKey&#39;</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;ha ha!&#39;</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   &quot;subObject&quot;: Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subKey&quot;: &quot;ha ha!&quot;,\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subSubObject&quot;: Map { &quot;subSubKey&quot;: &quot;subSubValue&quot; }\n</span><span class=\"token comment\" spellcheck=\"true\">//   }\n</span><span class=\"token comment\" spellcheck=\"true\">// }\n</span>\n<span class=\"token keyword\" >const</span> newerMap <span class=\"token operator\" >=</span> originalMap<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span>\n  <span class=\"token punctuation\" >[</span><span class=\"token string\" >&#39;subObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subSubObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subSubKey&#39;</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >&#39;ha ha ha!&#39;</span>\n<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   &quot;subObject&quot;: Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subKey&quot;: &quot;subvalue&quot;,\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subSubObject&quot;: Map { &quot;subSubKey&quot;: &quot;ha ha ha!&quot; }\n</span><span class=\"token comment\" spellcheck=\"true\">//   }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and setIn() can update those values as well, treating them\nimmutably by creating new copies of those values with the changes applied.</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  subObject<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>\n    subKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'subvalue'</span><span class=\"token punctuation\" >,</span>\n    subSubObject<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>\n      subSubKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'subSubValue'</span>\n    <span class=\"token punctuation\" >}</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span></p>\n<p>originalMap<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >&#39;subObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subKey&#39;</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;ha ha!&#39;</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   &quot;subObject&quot;: {\n</span><span class=\"token comment\" spellcheck=\"true\">//     subKey: &quot;ha ha!&quot;,\n</span><span class=\"token comment\" spellcheck=\"true\">//     subSubObject: { subSubKey: &quot;subSubValue&quot; }\n</span><span class=\"token comment\" spellcheck=\"true\">//   }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If any key in the path exists but cannot be updated (such as a primitive\nlike number or a custom Object like Date), an error will be thrown.</p></p>\n<p>Note: <code><a href=\"/docs/latest@main/Map#setIn()\">setIn</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1144,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#setIn()"
          },
          "size": {
            "name": "size",
            "label": "size",
            "id": "size",
            "line": 769,
            "doc": {
              "synopsis": "<p>The number of entries in this Map.</p>\n",
              "description": "",
              "notes": []
            },
            "type": {
              "k": 6
            },
            "url": "/docs/latest@main/Map#size"
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Map#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3350,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#toArray()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection.Keyed#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Map#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Keyed collection to equivalent native JavaScript Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3338,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#toJS()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection.Keyed#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Keyed collection to equivalent native JavaScript Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3345,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#toJSON()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection.Keyed#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Map#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Map#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Map#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Map#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Map#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns Seq.Keyed.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3356,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Map#toSeq()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection.Keyed#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Map#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Map#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Map#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              },
              {
                "line": 956,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 4
                              }
                            ]
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              },
              {
                "line": 957,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Map#update()",
            "overrides": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "updateIn": {
            "name": "updateIn",
            "label": "updateIn()",
            "id": "updateIn()",
            "group": "Deep persistent changes",
            "signatures": [
              {
                "line": 1233,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 2
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              },
              {
                "line": 1238,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 2
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#updateIn()"
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Map#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Map#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          },
          "wasAltered": {
            "name": "wasAltered",
            "label": "wasAltered()",
            "id": "wasAltered()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Returns true if this is a mutable copy (see <code><a href=\"/docs/latest@main/Map#asMutable()\">asMutable()</a></code>) and mutative\nalterations have been applied.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1332,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Map#wasAltered()"
          },
          "withMutations": {
            "name": "withMutations",
            "label": "withMutations()",
            "id": "withMutations()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Every time you call one of the above functions, a new immutable Map is\ncreated. If a pure function calls a number of these to produce a final\nreturn value, then a penalty on performance and memory has been paid by\ncreating all of the intermediate immutable Maps.</p>\n",
              "description": "<p>If you need to apply a series of mutations to produce a new immutable\nMap, <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations()</a></code> creates a temporary mutable copy of the Map which\ncan apply mutations in a highly performant manner. In fact, this is\nexactly how complex mutations like <code><a href=\"/docs/latest@main/Map#merge()\">merge</a></code> are done.</p>\n<p>As an example, this results in the creation of 2, not 4, new Maps:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> map2 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span>withMutations<span class=\"token punctuation\" >(</span>map <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  map<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span>map1<span class=\"token punctuation\" >.</span>size<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span>map2<span class=\"token punctuation\" >.</span>size<span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>! Read the documentation for each method to see if it\nis safe to use in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1304,
                "params": [
                  {
                    "name": "mutator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "mutable",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Map#withMutations()"
          }
        },
        "line": 765,
        "typeParams": [
          "K",
          "V"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Collection.Keyed",
            "args": [
              {
                "k": 11,
                "param": "K"
              },
              {
                "k": 11,
                "param": "V"
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed"
          }
        ]
      },
      "label": "Map",
      "url": "/docs/latest@main/Map"
    },
    "OrderedMap": {
      "qualifiedName": "OrderedMap",
      "doc": {
        "synopsis": "<p>A type of Map that has the additional guarantee that the iteration order of\nentries will be the order in which they were set().</p>\n",
        "description": "<p>The iteration behavior of OrderedMap is the same as native ES6 Map and\nJavaScript Object.</p>\n<p>Note that <code><a href=\"/docs/latest@main/OrderedMap\">OrderedMap</a></code> are more expensive than non-ordered <code><a href=\"/docs/latest@main/Map\">Map</a></code> and may\nconsume more memory. <code><a href=\"/docs/latest@main/OrderedMap#set()\">OrderedMap#set</a></code> is amortized O(log32 N), but not\nstable.</p>\n",
        "notes": []
      },
      "functions": {
        "isOrderedMap": {
          "name": "OrderedMap.isOrderedMap",
          "label": "OrderedMap.isOrderedMap()",
          "id": "isOrderedMap()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1429,
              "params": [
                {
                  "name": "maybeOrderedMap",
                  "type": {
                    "k": 2
                  }
                }
              ],
              "type": {
                "k": 5
              }
            }
          ],
          "url": "/docs/latest@main/OrderedMap#isOrderedMap()"
        }
      },
      "call": {
        "name": "OrderedMap",
        "label": "OrderedMap()",
        "id": "OrderedMap()",
        "signatures": [
          {
            "line": 1449,
            "typeParams": [
              "K",
              "V"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Iterable",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "OrderedMap",
              "args": [
                {
                  "k": 11,
                  "param": "K"
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/OrderedMap"
            }
          },
          {
            "line": 1450,
            "typeParams": [
              "V"
            ],
            "params": [
              {
                "name": "obj",
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "OrderedMap",
              "args": [
                {
                  "k": 7
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/OrderedMap"
            }
          }
        ],
        "url": "/docs/latest@main/OrderedMap#OrderedMap()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Sequence functions",
            "signatures": [
              {
                "line": 3472,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#[Symbol.iterator]()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection.Keyed#[Symbol.iterator]()"
            }
          },
          "asImmutable": {
            "name": "asImmutable",
            "label": "asImmutable()",
            "id": "asImmutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>The yin to <code><a href=\"/docs/latest@main/Map#asMutable()\">asMutable</a></code>&#39;s yang. Because it applies to mutable collections,\nthis operation is <em>mutable</em> and may return itself (though may not\nreturn itself, i.e. if the result is an empty collection). Once\nperformed, the original mutable copy must no longer be mutated since it\nmay be the immutable result.</p>\n",
              "description": "<p>If possible, use <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code> to work with temporary mutable copies as\nit provides an easier to use API and considers many common optimizations.</p>\n",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1346,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#asImmutable()",
            "inherited": {
              "interface": "Map",
              "label": "asImmutable()",
              "url": "/docs/latest@main/Map#asImmutable()"
            }
          },
          "asMutable": {
            "name": "asMutable",
            "label": "asMutable()",
            "id": "asMutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Another way to avoid creation of intermediate Immutable maps is to create\na mutable copy of this collection. Mutable copies <em>always</em> return <code><span class=\"token var\" >this</span></code>,\nand thus shouldn&#39;t be used for equality. Your function should never return\na mutable copy of a collection, only use it internally to create a new\ncollection.</p>\n",
              "description": "<p>If possible, use <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code> to work with temporary mutable copies as\nit provides an easier to use API and considers many common optimizations.</p>\n<p>Note: if the collection is already mutable, <code><a href=\"/docs/latest@main/Map#asMutable()\">asMutable</a></code> returns itself.</p>\n<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>! Read the documentation for each method to see if it\nis safe to use in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1324,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#asMutable()",
            "inherited": {
              "interface": "Map",
              "label": "asMutable()",
              "url": "/docs/latest@main/Map#asMutable()"
            }
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "clear": {
            "name": "clear",
            "label": "clear()",
            "id": "clear()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map containing no keys or values.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> key<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'value'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>clear<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {}</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#clear()\">clear</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 851,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#clear()",
            "inherited": {
              "interface": "Map",
              "label": "clear()",
              "url": "/docs/latest@main/Map#clear()"
            }
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Sequence functions",
            "signatures": [
              {
                "line": 3376,
                "typeParams": [
                  "KC",
                  "VC"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 15,
                              "types": [
                                {
                                  "k": 11,
                                  "param": "KC"
                                },
                                {
                                  "k": 11,
                                  "param": "VC"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "KC"
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "VC"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              },
              {
                "line": 3379,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 8,
                          "members": [
                            {
                              "index": true,
                              "params": [
                                {
                                  "name": "key",
                                  "type": {
                                    "k": 7
                                  }
                                }
                              ],
                              "type": {
                                "k": 11,
                                "param": "C"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 7
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#concat()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "concat()",
              "url": "/docs/latest@main/Collection.Keyed#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "delete": {
            "name": "delete",
            "label": "delete()",
            "id": "delete()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map which excludes this <code><span class=\"t param\">key</span></code>.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Map#delete()\">delete</a></code> cannot be safely used in IE8, but is provided to mirror\nthe ES6 collection API.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  key<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'value'</span><span class=\"token punctuation\" >,</span>\n  otherKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'other value'</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"key\": \"value\", \"otherKey\": \"other value\" }\n</span>originalMap<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >delete</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'otherKey'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"key\": \"value\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#delete()\">delete</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "remove"
                }
              ]
            },
            "signatures": [
              {
                "line": 818,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#delete()",
            "inherited": {
              "interface": "Map",
              "label": "delete()",
              "url": "/docs/latest@main/Map#delete()"
            }
          },
          "deleteAll": {
            "name": "deleteAll",
            "label": "deleteAll()",
            "id": "deleteAll()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map which excludes the provided <code><span class=\"t param\">keys</span></code>.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> names <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Aaron\"</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Barry\"</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Connor\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nnames<span class=\"token punctuation\" >.</span>deleteAll<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"b\": \"Barry\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#deleteAll()\">deleteAll</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "removeAll"
                }
              ]
            },
            "signatures": [
              {
                "line": 836,
                "params": [
                  {
                    "name": "keys",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "K"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#deleteAll()",
            "inherited": {
              "interface": "Map",
              "label": "deleteAll()",
              "url": "/docs/latest@main/Map#deleteAll()"
            }
          },
          "deleteIn": {
            "name": "deleteIn",
            "label": "deleteIn()",
            "id": "deleteIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map having removed the value at this <code><span class=\"t param\">keyPath</span></code>. If any keys\nin <code><span class=\"t param\">keyPath</span></code> do not exist, no change will occur.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Map#deleteIn()\">deleteIn</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "removeIn"
                }
              ]
            },
            "signatures": [
              {
                "line": 1154,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#deleteIn()",
            "inherited": {
              "interface": "Map",
              "label": "deleteIn()",
              "url": "/docs/latest@main/Map#deleteIn()"
            }
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 1567,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              },
              {
                "line": 1571,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#filter()",
            "overrides": {
              "interface": "Map",
              "label": "filter()",
              "url": "/docs/latest@main/Map#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the OrderedMap, returning a new OrderedMap.</p>\n",
              "description": "<p>Similar to <code>data<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1555,
                "typeParams": [
                  "KM",
                  "VM"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "KM"
                              },
                              {
                                "k": 11,
                                "param": "VM"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "KM"
                    },
                    {
                      "k": 11,
                      "param": "VM"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#flatMap()",
            "overrides": {
              "interface": "Map",
              "label": "flatMap()",
              "url": "/docs/latest@main/Map#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "flip": {
            "name": "flip",
            "label": "flip()",
            "id": "flip()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p>Collection.Keyed.flip</p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1579,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#flip()",
            "overrides": {
              "interface": "Map",
              "label": "flip()",
              "url": "/docs/latest@main/Map#flip()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#get()",
            "inherited": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new OrderedMap with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 10, \"b\": 20 }</span></code><p>Note: <code><a href=\"/docs/latest@main/OrderedMap#map()\">map()</a></code> always returns a new instance, even if it produced the same\nvalue at every step.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1525,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#map()",
            "overrides": {
              "interface": "Map",
              "label": "map()",
              "url": "/docs/latest@main/Map#map()"
            }
          },
          "mapEntries": {
            "name": "mapEntries",
            "label": "mapEntries()",
            "id": "mapEntries()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p>Collection.Keyed.mapEntries</p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1541,
                "typeParams": [
                  "KM",
                  "VM"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "entry",
                          "type": {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "K"
                              },
                              {
                                "k": 11,
                                "param": "V"
                              }
                            ]
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "KM"
                              },
                              {
                                "k": 11,
                                "param": "VM"
                              }
                            ]
                          },
                          {
                            "k": 4
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "KM"
                    },
                    {
                      "k": 11,
                      "param": "VM"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#mapEntries()",
            "overrides": {
              "interface": "Map",
              "label": "mapEntries()",
              "url": "/docs/latest@main/Map#mapEntries()"
            }
          },
          "mapKeys": {
            "name": "mapKeys",
            "label": "mapKeys()",
            "id": "mapKeys()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p>Collection.Keyed.mapKeys</p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1533,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#mapKeys()",
            "overrides": {
              "interface": "Map",
              "label": "mapKeys()",
              "url": "/docs/latest@main/Map#mapKeys()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "merge": {
            "name": "merge",
            "label": "merge()",
            "id": "merge()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 1500,
                "typeParams": [
                  "KC",
                  "VC"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 15,
                              "types": [
                                {
                                  "k": 11,
                                  "param": "KC"
                                },
                                {
                                  "k": 11,
                                  "param": "VC"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "KC"
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "VC"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              },
              {
                "line": 1503,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 8,
                          "members": [
                            {
                              "index": true,
                              "params": [
                                {
                                  "name": "key",
                                  "type": {
                                    "k": 7
                                  }
                                }
                              ],
                              "type": {
                                "k": 11,
                                "param": "C"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 7
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#merge()",
            "overrides": {
              "interface": "Map",
              "label": "merge()",
              "url": "/docs/latest@main/Map#merge()"
            }
          },
          "mergeDeep": {
            "name": "mergeDeep",
            "label": "mergeDeep()",
            "id": "mergeDeep()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/Map#merge()\">merge()</a></code>, but when two compatible collections are encountered with\nthe same key, it merges them as well, recursing deeply through the nested\ndata. Two collections are considered to be compatible (and thus will be\nmerged together) if they both fall into one of three categories: keyed\n(e.g., <code><a href=\"/docs/latest@main/Map\">Map</a></code>s, <code><a href=\"/docs/latest@main/Record\">Record</a></code>s, and objects), indexed (e.g., <code><a href=\"/docs/latest@main/List\">List</a></code>s and\narrays), or set-like (e.g., <code><a href=\"/docs/latest@main/Set\">Set</a></code>s). If they fall into separate\ncategories, <code><a href=\"/docs/latest@main/Map#mergeDeep()\">mergeDeep</a></code> will replace the existing collection with the\ncollection being merged in. This behavior can be customized by using\n<code><a href=\"/docs/latest@main/Map#mergeDeepWith()\">mergeDeepWith()</a></code>.</p>\n",
              "description": "<p>Note: Indexed and set-like collections are merged using\n<code><a href=\"/docs/latest@main/Map#concat()\">concat()</a></code>/<code>union<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> and therefore do not recurse.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> one <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> two <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\none<span class=\"token punctuation\" >.</span>mergeDeep<span class=\"token punctuation\" >(</span>two<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"a\": Map { \"x\": 2, \"y\": 10 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"b\": Map { \"x\": 20, \"y\": 5 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"c\": Map { \"z\": 3 }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#mergeDeep()\">mergeDeep</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1045,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 15,
                                  "types": [
                                    {
                                      "k": 11,
                                      "param": "K"
                                    },
                                    {
                                      "k": 11,
                                      "param": "V"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "k": 8,
                              "members": [
                                {
                                  "index": true,
                                  "params": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "k": 7
                                      }
                                    }
                                  ],
                                  "type": {
                                    "k": 11,
                                    "param": "V"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#mergeDeep()",
            "inherited": {
              "interface": "Map",
              "label": "mergeDeep()",
              "url": "/docs/latest@main/Map#mergeDeep()"
            }
          },
          "mergeDeepIn": {
            "name": "mergeDeepIn",
            "label": "mergeDeepIn()",
            "id": "mergeDeepIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>A combination of <code><a href=\"/docs/latest@main/Map#updateIn()\">updateIn</a></code> and <code><a href=\"/docs/latest@main/Map#mergeDeep()\">mergeDeep</a></code>, returning a new Map, but\nperforming the deep merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n",
              "description": "<p><code class=\"codeBlock\">map<span class=\"token punctuation\" >.</span>updateIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> abc <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> abc<span class=\"token punctuation\" >.</span>mergeDeep<span class=\"token punctuation\" >(</span>y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\nmap<span class=\"token punctuation\" >.</span>mergeDeepIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span></code><p>Note: <code><a href=\"/docs/latest@main/Map#mergeDeepIn()\">mergeDeepIn</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1269,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#mergeDeepIn()",
            "inherited": {
              "interface": "Map",
              "label": "mergeDeepIn()",
              "url": "/docs/latest@main/Map#mergeDeepIn()"
            }
          },
          "mergeDeepWith": {
            "name": "mergeDeepWith",
            "label": "mergeDeepWith()",
            "id": "mergeDeepWith()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/Map#mergeDeep()\">mergeDeep()</a></code>, but when two non-collections or incompatible\ncollections are encountered at the same key, it uses the <code><span class=\"t param\">merger</span></code>\nfunction to determine the resulting value. Collections are considered\nincompatible if they fall into separate categories between keyed,\nindexed, and set-like.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> one <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> two <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >5</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\none<span class=\"token punctuation\" >.</span>mergeDeepWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >/</span> newVal<span class=\"token punctuation\" >,</span> two<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"a\": Map { \"x\": 5, \"y\": 10 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"b\": Map { \"x\": 20, \"y\": 10 },\n</span><span class=\"token comment\" spellcheck=\"true\">//   \"c\": Map { \"z\": 3 }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#mergeDeepWith()\">mergeDeepWith</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1071,
                "params": [
                  {
                    "name": "merger",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "oldVal",
                          "type": {
                            "k": 2
                          }
                        },
                        {
                          "name": "newVal",
                          "type": {
                            "k": 2
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 2
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 15,
                                  "types": [
                                    {
                                      "k": 11,
                                      "param": "K"
                                    },
                                    {
                                      "k": 11,
                                      "param": "V"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "k": 8,
                              "members": [
                                {
                                  "index": true,
                                  "params": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "k": 7
                                      }
                                    }
                                  ],
                                  "type": {
                                    "k": 11,
                                    "param": "V"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#mergeDeepWith()",
            "inherited": {
              "interface": "Map",
              "label": "mergeDeepWith()",
              "url": "/docs/latest@main/Map#mergeDeepWith()"
            }
          },
          "mergeIn": {
            "name": "mergeIn",
            "label": "mergeIn()",
            "id": "mergeIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>A combination of <code><a href=\"/docs/latest@main/Map#updateIn()\">updateIn</a></code> and <code><a href=\"/docs/latest@main/Map#merge()\">merge</a></code>, returning a new Map, but\nperforming the merge at a point arrived at by following the keyPath.\nIn other words, these two lines are equivalent:</p>\n",
              "description": "<p><code class=\"codeBlock\">map<span class=\"token punctuation\" >.</span>updateIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> abc <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> abc<span class=\"token punctuation\" >.</span>merge<span class=\"token punctuation\" >(</span>y<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\nmap<span class=\"token punctuation\" >.</span>mergeIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >)</span></code><p>Note: <code><a href=\"/docs/latest@main/Map#mergeIn()\">mergeIn</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1255,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#mergeIn()",
            "inherited": {
              "interface": "Map",
              "label": "mergeIn()",
              "url": "/docs/latest@main/Map#mergeIn()"
            }
          },
          "mergeWith": {
            "name": "mergeWith",
            "label": "mergeWith()",
            "id": "mergeWith()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/Map#merge()\">merge()</a></code>, <code><a href=\"/docs/latest@main/Map#mergeWith()\">mergeWith()</a></code> returns a new Map resulting from merging\nthe provided Collections (or JS objects) into this Map, but uses the\n<code><span class=\"t param\">merger</span></code> function for dealing with conflicts.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> one <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> two <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >,</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >50</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >60</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\none<span class=\"token punctuation\" >.</span>mergeWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >/</span> newVal<span class=\"token punctuation\" >,</span> two<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// { \"a\": 0.2, \"b\": 0.5, \"c\": 30, \"d\": 60 }\n</span>two<span class=\"token punctuation\" >.</span>mergeWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >/</span> newVal<span class=\"token punctuation\" >,</span> one<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// { \"b\": 2, \"a\": 5, \"d\": 60, \"c\": 30 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Map#mergeWith()\">mergeWith</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1011,
                "params": [
                  {
                    "name": "merger",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "oldVal",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "newVal",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 15,
                                  "types": [
                                    {
                                      "k": 11,
                                      "param": "K"
                                    },
                                    {
                                      "k": 11,
                                      "param": "V"
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "k": 8,
                              "members": [
                                {
                                  "index": true,
                                  "params": [
                                    {
                                      "name": "key",
                                      "type": {
                                        "k": 7
                                      }
                                    }
                                  ],
                                  "type": {
                                    "k": 11,
                                    "param": "V"
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#mergeWith()",
            "inherited": {
              "interface": "Map",
              "label": "mergeWith()",
              "url": "/docs/latest@main/Map#mergeWith()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "set": {
            "name": "set",
            "label": "set()",
            "id": "set()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new OrderedMap also containing the new key, value pair. If an\nequivalent key already exists in this OrderedMap, it will be replaced\nwhile maintaining the existing order.</p>\n",
              "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> updatedMap <span class=\"token operator\" >=</span> originalMap<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span>\n\noriginalMap\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap {a: 1, b: 1, c: 1}\n</span>updatedMap\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap {a: 1, b: 2, c: 1}</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/OrderedMap#set()\">set</a></code> can be used in <code><a href=\"/docs/latest@main/OrderedMap#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1477,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#set()",
            "overrides": {
              "interface": "Map",
              "label": "set()",
              "url": "/docs/latest@main/Map#set()"
            }
          },
          "setIn": {
            "name": "setIn",
            "label": "setIn()",
            "id": "setIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Map having set <code><span class=\"t param\">value</span></code> at this <code><span class=\"t param\">keyPath</span></code>. If any keys in\n<code><span class=\"t param\">keyPath</span></code> do not exist, a new immutable Map will be created at that key.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  subObject<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n    subKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'subvalue'</span><span class=\"token punctuation\" >,</span>\n    subSubObject<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n      subSubKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'subSubValue'</span>\n    <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span></p>\n<p><span class=\"token keyword\" >const</span> newMap <span class=\"token operator\" >=</span> originalMap<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >&#39;subObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subKey&#39;</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;ha ha!&#39;</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   &quot;subObject&quot;: Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subKey&quot;: &quot;ha ha!&quot;,\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subSubObject&quot;: Map { &quot;subSubKey&quot;: &quot;subSubValue&quot; }\n</span><span class=\"token comment\" spellcheck=\"true\">//   }\n</span><span class=\"token comment\" spellcheck=\"true\">// }\n</span>\n<span class=\"token keyword\" >const</span> newerMap <span class=\"token operator\" >=</span> originalMap<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span>\n  <span class=\"token punctuation\" >[</span><span class=\"token string\" >&#39;subObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subSubObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subSubKey&#39;</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token string\" >&#39;ha ha ha!&#39;</span>\n<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   &quot;subObject&quot;: Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subKey&quot;: &quot;subvalue&quot;,\n</span><span class=\"token comment\" spellcheck=\"true\">//     &quot;subSubObject&quot;: Map { &quot;subSubKey&quot;: &quot;ha ha ha!&quot; }\n</span><span class=\"token comment\" spellcheck=\"true\">//   }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and setIn() can update those values as well, treating them\nimmutably by creating new copies of those values with the changes applied.</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> originalMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  subObject<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>\n    subKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'subvalue'</span><span class=\"token punctuation\" >,</span>\n    subSubObject<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>\n      subSubKey<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'subSubValue'</span>\n    <span class=\"token punctuation\" >}</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span></p>\n<p>originalMap<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >&#39;subObject&#39;</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;subKey&#39;</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >&#39;ha ha!&#39;</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   &quot;subObject&quot;: {\n</span><span class=\"token comment\" spellcheck=\"true\">//     subKey: &quot;ha ha!&quot;,\n</span><span class=\"token comment\" spellcheck=\"true\">//     subSubObject: { subSubKey: &quot;subSubValue&quot; }\n</span><span class=\"token comment\" spellcheck=\"true\">//   }\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If any key in the path exists but cannot be updated (such as a primitive\nlike number or a custom Object like Date), an error will be thrown.</p></p>\n<p>Note: <code><a href=\"/docs/latest@main/Map#setIn()\">setIn</a></code> can be used in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1144,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#setIn()",
            "inherited": {
              "interface": "Map",
              "label": "setIn()",
              "url": "/docs/latest@main/Map#setIn()"
            }
          },
          "size": {
            "name": "size",
            "label": "size",
            "id": "size",
            "line": 1456,
            "doc": {
              "synopsis": "<p>The number of entries in this OrderedMap.</p>\n",
              "description": "",
              "notes": []
            },
            "type": {
              "k": 6
            },
            "url": "/docs/latest@main/OrderedMap#size",
            "overrides": {
              "interface": "Map",
              "label": "size",
              "url": "/docs/latest@main/Map#size"
            }
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3350,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toArray()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection.Keyed#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Keyed collection to equivalent native JavaScript Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3338,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toJS()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection.Keyed#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Keyed collection to equivalent native JavaScript Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3345,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toJSON()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection.Keyed#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns Seq.Keyed.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3356,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toSeq()",
            "inherited": {
              "interface": "Collection.Keyed",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection.Keyed#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              },
              {
                "line": 956,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 4
                              }
                            ]
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              },
              {
                "line": 957,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#update()",
            "inherited": {
              "interface": "Map",
              "label": "update()",
              "url": "/docs/latest@main/Map#update()"
            }
          },
          "updateIn": {
            "name": "updateIn",
            "label": "updateIn()",
            "id": "updateIn()",
            "group": "Deep persistent changes",
            "signatures": [
              {
                "line": 1233,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 2
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              },
              {
                "line": 1238,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 2
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#updateIn()",
            "inherited": {
              "interface": "Map",
              "label": "updateIn()",
              "url": "/docs/latest@main/Map#updateIn()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          },
          "wasAltered": {
            "name": "wasAltered",
            "label": "wasAltered()",
            "id": "wasAltered()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Returns true if this is a mutable copy (see <code><a href=\"/docs/latest@main/Map#asMutable()\">asMutable()</a></code>) and mutative\nalterations have been applied.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1332,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#wasAltered()",
            "inherited": {
              "interface": "Map",
              "label": "wasAltered()",
              "url": "/docs/latest@main/Map#wasAltered()"
            }
          },
          "withMutations": {
            "name": "withMutations",
            "label": "withMutations()",
            "id": "withMutations()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Every time you call one of the above functions, a new immutable Map is\ncreated. If a pure function calls a number of these to produce a final\nreturn value, then a penalty on performance and memory has been paid by\ncreating all of the intermediate immutable Maps.</p>\n",
              "description": "<p>If you need to apply a series of mutations to produce a new immutable\nMap, <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations()</a></code> creates a temporary mutable copy of the Map which\ncan apply mutations in a highly performant manner. In fact, this is\nexactly how complex mutations like <code><a href=\"/docs/latest@main/Map#merge()\">merge</a></code> are done.</p>\n<p>As an example, this results in the creation of 2, not 4, new Maps:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> map2 <span class=\"token operator\" >=</span> map1<span class=\"token punctuation\" >.</span>withMutations<span class=\"token punctuation\" >(</span>map <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  map<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span>map1<span class=\"token punctuation\" >.</span>size<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span>map2<span class=\"token punctuation\" >.</span>size<span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >)</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>! Read the documentation for each method to see if it\nis safe to use in <code><a href=\"/docs/latest@main/Map#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1304,
                "params": [
                  {
                    "name": "mutator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "mutable",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedMap#withMutations()",
            "inherited": {
              "interface": "Map",
              "label": "withMutations()",
              "url": "/docs/latest@main/Map#withMutations()"
            }
          }
        },
        "line": 1452,
        "typeParams": [
          "K",
          "V"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Map",
            "args": [
              {
                "k": 11,
                "param": "K"
              },
              {
                "k": 11,
                "param": "V"
              }
            ],
            "url": "/docs/latest@main/Map"
          }
        ]
      },
      "label": "OrderedMap",
      "url": "/docs/latest@main/OrderedMap"
    },
    "OrderedSet": {
      "qualifiedName": "OrderedSet",
      "doc": {
        "synopsis": "<p>A type of Set that has the additional guarantee that the iteration order of\nvalues will be the order in which they were <code><a href=\"/docs/latest@main/OrderedSet#add()\">add</a></code>ed.</p>\n",
        "description": "<p>The iteration behavior of OrderedSet is the same as native ES6 Set.</p>\n<p>Note that <code><a href=\"/docs/latest@main/OrderedSet\">OrderedSet</a></code> are more expensive than non-ordered <code><a href=\"/docs/latest@main/Set\">Set</a></code> and may\nconsume more memory. <code><a href=\"/docs/latest@main/OrderedSet#add()\">OrderedSet#add</a></code> is amortized O(log32 N), but not\nstable.</p>\n",
        "notes": []
      },
      "functions": {
        "fromKeys": {
          "name": "OrderedSet.fromKeys",
          "label": "OrderedSet.fromKeys()",
          "id": "fromKeys()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1816,
              "typeParams": [
                "T"
              ],
              "params": [
                {
                  "name": "iter",
                  "type": {
                    "k": 12,
                    "name": "Collection",
                    "args": [
                      {
                        "k": 11,
                        "param": "T"
                      },
                      {
                        "k": 2
                      }
                    ],
                    "url": "/docs/latest@main/Collection"
                  }
                }
              ],
              "type": {
                "k": 12,
                "name": "OrderedSet",
                "args": [
                  {
                    "k": 11,
                    "param": "T"
                  }
                ],
                "url": "/docs/latest@main/OrderedSet"
              }
            },
            {
              "line": 1817,
              "params": [
                {
                  "name": "obj",
                  "type": {
                    "k": 8,
                    "members": [
                      {
                        "index": true,
                        "params": [
                          {
                            "name": "key",
                            "type": {
                              "k": 7
                            }
                          }
                        ],
                        "type": {
                          "k": 2
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "k": 12,
                "name": "OrderedSet",
                "args": [
                  {
                    "k": 7
                  }
                ],
                "url": "/docs/latest@main/OrderedSet"
              }
            }
          ],
          "url": "/docs/latest@main/OrderedSet#fromKeys()"
        },
        "isOrderedSet": {
          "name": "OrderedSet.isOrderedSet",
          "label": "OrderedSet.isOrderedSet()",
          "id": "isOrderedSet()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1805,
              "params": [
                {
                  "name": "maybeOrderedSet",
                  "type": {
                    "k": 2
                  }
                }
              ],
              "type": {
                "k": 5
              }
            }
          ],
          "url": "/docs/latest@main/OrderedSet#isOrderedSet()"
        },
        "of": {
          "name": "OrderedSet.of",
          "label": "OrderedSet.of()",
          "id": "of()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1810,
              "typeParams": [
                "T"
              ],
              "params": [
                {
                  "name": "values",
                  "type": {
                    "k": 12,
                    "name": "Array",
                    "args": [
                      {
                        "k": 11,
                        "param": "T"
                      }
                    ]
                  },
                  "varArgs": true
                }
              ],
              "type": {
                "k": 12,
                "name": "OrderedSet",
                "args": [
                  {
                    "k": 11,
                    "param": "T"
                  }
                ],
                "url": "/docs/latest@main/OrderedSet"
              }
            }
          ],
          "url": "/docs/latest@main/OrderedSet#of()"
        }
      },
      "call": {
        "name": "OrderedSet",
        "label": "OrderedSet()",
        "id": "OrderedSet()",
        "doc": {
          "synopsis": "<p>Create a new immutable OrderedSet containing the values of the provided\ncollection-like.</p>\n",
          "description": "<p>Note: <code><a href=\"/docs/latest@main/OrderedSet\">OrderedSet</a></code> is a factory function and not a class, and does not use\nthe <code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 1827,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "ArrayLike",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "OrderedSet",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/OrderedSet"
            }
          }
        ],
        "url": "/docs/latest@main/OrderedSet#OrderedSet()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 3871,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#[Symbol.iterator]()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection.Set#[Symbol.iterator]()"
            }
          },
          "add": {
            "name": "add",
            "label": "add()",
            "id": "add()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Set which also includes this value.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Set#add()\">add</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1664,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#add()",
            "inherited": {
              "interface": "Set",
              "label": "add()",
              "url": "/docs/latest@main/Set#add()"
            }
          },
          "asImmutable": {
            "name": "asImmutable",
            "label": "asImmutable()",
            "id": "asImmutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1748,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#asImmutable()",
            "inherited": {
              "interface": "Set",
              "label": "asImmutable()",
              "url": "/docs/latest@main/Set#asImmutable()"
            }
          },
          "asMutable": {
            "name": "asMutable",
            "label": "asMutable()",
            "id": "asMutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nmentions being safe to use in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1738,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#asMutable()",
            "inherited": {
              "interface": "Set",
              "label": "asMutable()",
              "url": "/docs/latest@main/Set#asMutable()"
            }
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "clear": {
            "name": "clear",
            "label": "clear()",
            "id": "clear()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Set containing no values.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Set#clear()\">clear</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1684,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#clear()",
            "inherited": {
              "interface": "Set",
              "label": "clear()",
              "url": "/docs/latest@main/Set#clear()"
            }
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection with other collections concatenated to this one.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3826,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 11,
                              "param": "U"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Set",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Set"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#concat()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "concat()",
              "url": "/docs/latest@main/Collection.Set#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "delete": {
            "name": "delete",
            "label": "delete()",
            "id": "delete()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Set which excludes this value.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Set#delete()\">delete</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Set#delete()\">delete</a></code> <strong>cannot</strong> be safely used in IE8, use <code><a href=\"/docs/latest@main/remove()\">remove</a></code> if\nsupporting old browsers.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "remove"
                }
              ]
            },
            "signatures": [
              {
                "line": 1676,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#delete()",
            "inherited": {
              "interface": "Set",
              "label": "delete()",
              "url": "/docs/latest@main/Set#delete()"
            }
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 1880,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              },
              {
                "line": 1884,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#filter()",
            "overrides": {
              "interface": "Set",
              "label": "filter()",
              "url": "/docs/latest@main/Set#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the OrderedSet, returning a new OrderedSet.</p>\n",
              "description": "<p>Similar to <code><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1868,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#flatMap()",
            "overrides": {
              "interface": "Set",
              "label": "flatMap()",
              "url": "/docs/latest@main/Set#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#get()",
            "inherited": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "intersect": {
            "name": "intersect",
            "label": "intersect()",
            "id": "intersect()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a Set which has removed any values not also contained\nwithin <code><span class=\"t param\">collections</span></code>.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Set#intersect()\">intersect</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1704,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 11,
                              "param": "T"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#intersect()",
            "inherited": {
              "interface": "Set",
              "label": "intersect()",
              "url": "/docs/latest@main/Set#intersect()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Set with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedSet [10, 20]</span></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 1858,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#map()",
            "overrides": {
              "interface": "Set",
              "label": "map()",
              "url": "/docs/latest@main/Set#map()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "size": {
            "name": "size",
            "label": "size",
            "id": "size",
            "line": 1835,
            "doc": {
              "synopsis": "<p>The number of items in this OrderedSet.</p>\n",
              "description": "",
              "notes": []
            },
            "type": {
              "k": 6
            },
            "url": "/docs/latest@main/OrderedSet#size",
            "overrides": {
              "interface": "Set",
              "label": "size",
              "url": "/docs/latest@main/Set#size"
            }
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "subtract": {
            "name": "subtract",
            "label": "subtract()",
            "id": "subtract()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a Set excluding any values contained within <code><span class=\"t param\">collections</span></code>.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>subtract<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedSet [2]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Set#subtract()\">subtract</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1718,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 11,
                              "param": "T"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#subtract()",
            "inherited": {
              "interface": "Set",
              "label": "subtract()",
              "url": "/docs/latest@main/Set#subtract()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3813,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toArray()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection.Set#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Set collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3803,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toJS()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection.Set#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Set collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3808,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toJSON()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection.Set#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "T"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns Seq.Set.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3819,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toSeq()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection.Set#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "union": {
            "name": "union",
            "label": "union()",
            "id": "union()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns an OrderedSet including any value from <code><span class=\"t param\">collections</span></code> that does\nnot already exist in this OrderedSet.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/OrderedSet#union()\">union</a></code> can be used in <code><a href=\"/docs/latest@main/OrderedSet#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "merge"
                },
                {
                  "name": "alias",
                  "body": "concat"
                }
              ]
            },
            "signatures": [
              {
                "line": 1845,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 11,
                              "param": "C"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#union()",
            "overrides": {
              "interface": "Set",
              "label": "union()",
              "url": "/docs/latest@main/Set#union()"
            }
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#update()",
            "inherited": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          },
          "wasAltered": {
            "name": "wasAltered",
            "label": "wasAltered()",
            "id": "wasAltered()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#wasAltered()\">Map#wasAltered</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1743,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#wasAltered()",
            "inherited": {
              "interface": "Set",
              "label": "wasAltered()",
              "url": "/docs/latest@main/Set#wasAltered()"
            }
          },
          "withMutations": {
            "name": "withMutations",
            "label": "withMutations()",
            "id": "withMutations()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nmentions being safe to use in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#withMutations()\">Map#withMutations</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1729,
                "params": [
                  {
                    "name": "mutator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "mutable",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#withMutations()",
            "inherited": {
              "interface": "Set",
              "label": "withMutations()",
              "url": "/docs/latest@main/Set#withMutations()"
            }
          },
          "zip": {
            "name": "zip",
            "label": "zip()",
            "id": "zip()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 1902,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              },
              {
                "line": 1903,
                "typeParams": [
                  "U",
                  "V"
                ],
                "params": [
                  {
                    "name": "other1",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "other2",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              },
              {
                "line": 1907,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#zip()"
          },
          "zipAll": {
            "name": "zipAll",
            "label": "zipAll()",
            "id": "zipAll()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 1928,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              },
              {
                "line": 1929,
                "typeParams": [
                  "U",
                  "V"
                ],
                "params": [
                  {
                    "name": "other1",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "other2",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              },
              {
                "line": 1933,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#zipAll()"
          },
          "zipWith": {
            "name": "zipWith",
            "label": "zipWith()",
            "id": "zipWith()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 1943,
                "typeParams": [
                  "U",
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "otherValue",
                          "type": {
                            "k": 11,
                            "param": "U"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "otherCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              },
              {
                "line": 1947,
                "typeParams": [
                  "U",
                  "V",
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "otherValue",
                          "type": {
                            "k": 11,
                            "param": "U"
                          }
                        },
                        {
                          "name": "thirdValue",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "otherCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "thirdCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              },
              {
                "line": 1952,
                "typeParams": [
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "values",
                          "type": {
                            "k": 12,
                            "name": "Array",
                            "args": [
                              {
                                "k": 2
                              }
                            ]
                          },
                          "varArgs": true
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/OrderedSet#zipWith()"
          }
        },
        "line": 1831,
        "typeParams": [
          "T"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Set",
            "args": [
              {
                "k": 11,
                "param": "T"
              }
            ],
            "url": "/docs/latest@main/Set"
          }
        ]
      },
      "label": "OrderedSet",
      "url": "/docs/latest@main/OrderedSet"
    },
    "Range": {
      "qualifiedName": "Range",
      "call": {
        "name": "Range",
        "label": "Range()",
        "id": "Range()",
        "doc": {
          "synopsis": "<p>Returns a Seq.Indexed of numbers from <code><span class=\"t param\">start</span></code> (inclusive) to <code><span class=\"t param\">end</span></code>\n(exclusive), by <code><span class=\"t param\">step</span></code>, where <code><span class=\"t param\">start</span></code> defaults to 0, <code><span class=\"t param\">step</span></code> to 1, and <code><span class=\"t param\">end</span></code> to\ninfinity. When <code><span class=\"t param\">start</span></code> is equal to <code><span class=\"t param\">end</span></code>, returns empty range.</p>\n",
          "description": "<p>Note: <code><a href=\"/docs/latest@main/Range()\">Range</a></code> is a factory function and not a class, and does not use the\n<code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Range</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Range</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [ 0, 1, 2, 3, ... ]\n</span><span class=\"token qualifier\" >Range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [ 10, 11, 12, 13, ... ]\n</span><span class=\"token qualifier\" >Range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >15</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [ 10, 11, 12, 13, 14 ]\n</span><span class=\"token qualifier\" >Range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [ 10, 15, 20, 25 ]\n</span><span class=\"token qualifier\" >Range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [ 30, 25, 20, 15 ]\n</span><span class=\"token qualifier\" >Range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// []</span></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 2224,
            "params": [
              {
                "name": "start",
                "type": {
                  "k": 6
                },
                "optional": true
              },
              {
                "name": "end",
                "type": {
                  "k": 6
                },
                "optional": true
              },
              {
                "name": "step",
                "type": {
                  "k": 6
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Seq.Indexed",
              "args": [
                {
                  "k": 6
                }
              ],
              "url": "/docs/latest@main/Seq.Indexed"
            }
          }
        ],
        "url": "/docs/latest@main/Range()"
      },
      "label": "Range()",
      "url": "/docs/latest@main/Range()"
    },
    "Record": {
      "qualifiedName": "Record",
      "doc": {
        "synopsis": "<p>A record is similar to a JS object, but enforces a specific set of allowed\nstring keys, and has default values.</p>\n",
        "description": "<p>The <code><a href=\"/docs/latest@main/Record\">Record()</a></code> function produces new Record Factories, which when called\ncreate Record instances.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Record</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> ABRecord <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> myRecord <span class=\"token operator\" >=</span> ABRecord<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span></code><p>Records always have a value for the keys they define. <code><a href=\"/docs/latest@main/remove()\">remove</a></code>ing a key\nfrom a record simply resets it to the default value for that key.</p>\n<code class=\"codeBlock\">myRecord<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'a'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 1\n</span>myRecord<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 3\n</span><span class=\"token keyword\" >const</span> myRecordWithoutB <span class=\"token operator\" >=</span> myRecord<span class=\"token punctuation\" >.</span>remove<span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span>\nmyRecordWithoutB<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'b'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 2</span></code><p>Values provided to the constructor not found in the Record type will\nbe ignored. For example, in this case, ABRecord is provided a key &quot;x&quot; even\nthough only &quot;a&quot; and &quot;b&quot; have been defined. The value for &quot;x&quot; will be\nignored for this record.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> myRecord <span class=\"token operator\" >=</span> ABRecord<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nmyRecord<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// undefined</span></code><p>Because Records have a known set of string keys, property get access works\nas expected, however property sets will throw an Error.</p>\n<p>Note: IE8 does not support property access. Only use <code><a href=\"/docs/latest@main/Record#get()\">get()</a></code> when\nsupporting IE8.</p>\n<code class=\"codeBlock\">myRecord<span class=\"token punctuation\" >.</span>b <span class=\"token comment\" spellcheck=\"true\">// 3\n</span>myRecord<span class=\"token punctuation\" >.</span>b <span class=\"token operator\" >=</span> <span class=\"token number\" >5</span> <span class=\"token comment\" spellcheck=\"true\">// throws Error</span></code><p>Record Types can be extended as well, allowing for custom methods on your\nRecord. This is not a common pattern in functional environments, but is in\nmany JS programs.</p>\n<p>However Record Types are more restricted than typical JavaScript classes.\nThey do not use a class constructor, which also means they cannot use\nclass properties (since those are technically part of a constructor).</p>\n<p>While Record Types can be syntactically created with the JavaScript <code><span class=\"token keyword\" >class</span></code>\nform, the resulting Record function is actually a factory function, not a\nclass constructor. Even though Record Types are not classes, JavaScript\ncurrently requires the use of <code><span class=\"token keyword\" >new</span></code> when creating new Record instances if\nthey are defined as a <code><span class=\"token keyword\" >class</span></code>.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >class</span> <span class=\"token class-name\" >ABRecord</span> <span class=\"token keyword\" >extends</span> <span class=\"token class-name\" >Record</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  getAB<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>a <span class=\"token operator\" >+</span> <span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>b<span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span>\n\n<span class=\"token keyword\" >var</span> myRecord <span class=\"token operator\" >=</span> <span class=\"token keyword\" >new</span> <span class=\"token class-name\" >ABRecord</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nmyRecord<span class=\"token punctuation\" >.</span>getAB<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 4</span></code><p><strong>Flow Typing Records:</strong></p>\n<p>Immutable.js exports two Flow types designed to make it easier to use\nRecords with flow typed code, <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code> and <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code>.</p>\n<p>When defining a new kind of Record factory function, use a flow type that\ndescribes the values the record contains along with <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code>.\nTo type instances of the Record (which the factory function returns),\nuse <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code>.</p>\n<p>Typically, new Record definitions will export both the Record factory\nfunction as well as the Record instance type for use in other code.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >import</span> type <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span> <span class=\"token punctuation\" >}</span> from <span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Use RecordFactory&lt;TProps> for defining new Record factory functions.\n</span>type <span class=\"token qualifier\" >Point3</span>DProps <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> number<span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> number<span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> number <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> defaultValues<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Point3</span>DProps <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> makePoint3D<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span><span class=\"token qualifier\" >Point3</span>DProps<span class=\"token operator\" >></span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span>defaultValues<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >export</span> makePoint3D<span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Use RecordOf&lt;T> for defining new instances of that Record.\n</span><span class=\"token keyword\" >export</span> type <span class=\"token qualifier\" >Point3</span>D <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span><span class=\"token operator\" >&lt;</span><span class=\"token qualifier\" >Point3</span>DProps<span class=\"token operator\" >></span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> some3DPoint<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Point3</span>D <span class=\"token operator\" >=</span> makePoint3D<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >30</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code><p><strong>Flow Typing Record Subclasses:</strong></p>\n<p>Records can be subclassed as a means to add additional methods to Record\ninstances. This is generally discouraged in favor of a more functional API,\nsince Subclasses have some minor overhead. However the ability to create\na rich API on Record types can be quite valuable.</p>\n<p>When using Flow to type Subclasses, do not use <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code>,\ninstead apply the props type when subclassing:</p>\n<code class=\"codeBlock\">type <span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span> <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>name<span class=\"token punctuation\" >:</span> string<span class=\"token punctuation\" >,</span> age<span class=\"token punctuation\" >:</span> number<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> defaultValues<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span> <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span>name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Aristotle'</span><span class=\"token punctuation\" >,</span> age<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2400</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> <span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Record</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span>defaultValues<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >class</span> <span class=\"token class-name\" >Person</span> <span class=\"token keyword\" >extends</span> <span class=\"token class-name\" >PersonRecord</span><span class=\"token operator\" >&lt;</span><span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  getName<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> string <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'name'</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >}</span>\n\n  setName<span class=\"token punctuation\" >(</span>name<span class=\"token punctuation\" >:</span> string<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >:</span> <span class=\"token var\" >this</span> <span class=\"token punctuation\" >{</span>\n    <span class=\"token keyword\" >return</span> <span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'name'</span><span class=\"token punctuation\" >,</span> name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n  <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span></code><p><strong>Choosing Records vs plain JavaScript objects</strong></p>\n<p>Records offer a persistently immutable alternative to plain JavaScript\nobjects, however they&#39;re not required to be used within Immutable.js\ncollections. In fact, the deep-access and deep-updating functions\nlike <code><a href=\"/docs/latest@main/Record#getIn()\">getIn()</a></code> and <code><a href=\"/docs/latest@main/Record#setIn()\">setIn()</a></code> work with plain JavaScript Objects as well.</p>\n<p>Deciding to use Records or Objects in your application should be informed\nby the tradeoffs and relative benefits of each:</p>\n<ul>\n<li><p><em>Runtime immutability</em>: plain JS objects may be carefully treated as\nimmutable, however Record instances will <em>throw</em> if attempted to be\nmutated directly. Records provide this additional guarantee, however at\nsome marginal runtime cost. While JS objects are mutable by nature, the\nuse of type-checking tools like <a href=\"https://medium.com/@gcanti/immutability-with-flow-faa050a1aef4\">Flow</a>\ncan help gain confidence in code written to favor immutability.</p>\n</li>\n<li><p><em>Value equality</em>: Records use value equality when compared with <code><a href=\"/docs/latest@main/is()\">is()</a></code>\nor <code>record<span class=\"token punctuation\" >.</span>equals<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>. That is, two Records with the same keys and values\nare equal. Plain objects use <em>reference equality</em>. Two objects with the\nsame keys and values are not equal since they are different objects.\nThis is important to consider when using objects as keys in a <code><a href=\"/docs/latest@main/Map\">Map</a></code> or\nvalues in a <code><a href=\"/docs/latest@main/Set\">Set</a></code>, which use equality when retrieving values.</p>\n</li>\n<li><p><em>API methods</em>: Records have a full featured API, with methods like\n<code><span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>, and <code><span class=\"token punctuation\" >.</span>equals<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>. These can make working with these values\neasier, but comes at the cost of not allowing keys with those names.</p>\n</li>\n<li><p><em>Default values</em>: Records provide default values for every key, which\ncan be useful when constructing Records with often unchanging values.\nHowever default values can make using Flow and TypeScript more laborious.</p>\n</li>\n<li><p><em>Serialization</em>: Records use a custom internal representation to\nefficiently store and update their values. Converting to and from this\nform isn&#39;t free. If converting Records to plain objects is common,\nconsider sticking with plain objects to begin with.</p>\n</li>\n</ul>\n",
        "notes": []
      },
      "functions": {
        "getDescriptiveName": {
          "name": "Record.getDescriptiveName",
          "label": "Record.getDescriptiveName()",
          "id": "getDescriptiveName()",
          "isStatic": true,
          "signatures": [
            {
              "line": 2427,
              "params": [
                {
                  "name": "record",
                  "type": {
                    "k": 12,
                    "name": "Record",
                    "args": [
                      {
                        "k": 1
                      }
                    ],
                    "url": "/docs/latest@main/Record"
                  }
                }
              ],
              "type": {
                "k": 7
              }
            }
          ],
          "url": "/docs/latest@main/Record#getDescriptiveName()"
        },
        "isRecord": {
          "name": "Record.isRecord",
          "label": "Record.isRecord()",
          "id": "isRecord()",
          "isStatic": true,
          "signatures": [
            {
              "line": 2408,
              "params": [
                {
                  "name": "maybeRecord",
                  "type": {
                    "k": 2
                  }
                }
              ],
              "type": {
                "k": 5
              }
            }
          ],
          "url": "/docs/latest@main/Record#isRecord()"
        }
      },
      "call": {
        "name": "Record",
        "label": "Record()",
        "id": "Record()",
        "doc": {
          "synopsis": "<p>Unlike other types in Immutable.js, the <code><a href=\"/docs/latest@main/Record\">Record()</a></code> function creates a new\nRecord Factory, which is a function that creates Record instances.</p>\n",
          "description": "<p>See above for examples of using <code><a href=\"/docs/latest@main/Record\">Record()</a></code>.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Record\">Record</a></code> is a factory function and not a class, and does not use the\n<code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 2507,
            "typeParams": [
              "TProps"
            ],
            "params": [
              {
                "name": "defaultValues",
                "type": {
                  "k": 11,
                  "param": "TProps"
                }
              },
              {
                "name": "name",
                "type": {
                  "k": 7
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Record.Factory",
              "args": [
                {
                  "k": 11,
                  "param": "TProps"
                }
              ],
              "url": "/docs/latest@main/Record.Factory"
            }
          }
        ],
        "url": "/docs/latest@main/Record#Record()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 2644,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 17,
                          "operator": "keyof",
                          "type": {
                            "k": 11,
                            "param": "TProps"
                          }
                        },
                        {
                          "k": 16,
                          "type": {
                            "k": 11,
                            "param": "TProps"
                          },
                          "index": {
                            "k": 17,
                            "operator": "keyof",
                            "type": {
                              "k": 11,
                              "param": "TProps"
                            }
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Record#[Symbol.iterator]()"
          },
          "asImmutable": {
            "name": "asImmutable",
            "label": "asImmutable()",
            "id": "asImmutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2638,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#asImmutable()"
          },
          "asMutable": {
            "name": "asMutable",
            "label": "asMutable()",
            "id": "asMutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2628,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#asMutable()"
          },
          "clear": {
            "name": "clear",
            "label": "clear()",
            "id": "clear()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new instance of this Record type with all values set\nto their default values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2574,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#clear()"
          },
          "delete": {
            "name": "delete",
            "label": "delete()",
            "id": "delete()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new instance of this Record type with the value for the\nspecific key set to its default value.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "remove"
                }
              ]
            },
            "signatures": [
              {
                "line": 2567,
                "typeParams": [
                  "K"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#delete()"
          },
          "deleteIn": {
            "name": "deleteIn",
            "label": "deleteIn()",
            "id": "deleteIn()",
            "group": "Deep persistent changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "removeIn"
                }
              ]
            },
            "signatures": [
              {
                "line": 2592,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#deleteIn()"
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "signatures": [
              {
                "line": 2535,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Record#equals()"
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 2525,
                "typeParams": [
                  "K"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 16,
                  "type": {
                    "k": 11,
                    "param": "TProps"
                  },
                  "index": {
                    "k": 11,
                    "param": "K"
                  }
                }
              },
              {
                "line": 2526,
                "typeParams": [
                  "T"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 7
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "T"
                }
              }
            ],
            "url": "/docs/latest@main/Record#get()"
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "signatures": [
              {
                "line": 2531,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Record#getIn()"
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 2515,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 7
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Record#has()"
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "signatures": [
              {
                "line": 2530,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Record#hasIn()"
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "signatures": [
              {
                "line": 2536,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Record#hashCode()"
          },
          "merge": {
            "name": "merge",
            "label": "merge()",
            "id": "merge()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 2545,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Partial",
                              "args": [
                                {
                                  "k": 11,
                                  "param": "TProps"
                                }
                              ]
                            },
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 15,
                                  "types": [
                                    {
                                      "k": 7
                                    },
                                    {
                                      "k": 2
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#merge()"
          },
          "mergeDeep": {
            "name": "mergeDeep",
            "label": "mergeDeep()",
            "id": "mergeDeep()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 2548,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Partial",
                              "args": [
                                {
                                  "k": 11,
                                  "param": "TProps"
                                }
                              ]
                            },
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 15,
                                  "types": [
                                    {
                                      "k": 7
                                    },
                                    {
                                      "k": 2
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#mergeDeep()"
          },
          "mergeDeepIn": {
            "name": "mergeDeepIn",
            "label": "mergeDeepIn()",
            "id": "mergeDeepIn()",
            "group": "Deep persistent changes",
            "signatures": [
              {
                "line": 2584,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#mergeDeepIn()"
          },
          "mergeDeepWith": {
            "name": "mergeDeepWith",
            "label": "mergeDeepWith()",
            "id": "mergeDeepWith()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 2556,
                "params": [
                  {
                    "name": "merger",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "oldVal",
                          "type": {
                            "k": 2
                          }
                        },
                        {
                          "name": "newVal",
                          "type": {
                            "k": 2
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 2
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Partial",
                              "args": [
                                {
                                  "k": 11,
                                  "param": "TProps"
                                }
                              ]
                            },
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 15,
                                  "types": [
                                    {
                                      "k": 7
                                    },
                                    {
                                      "k": 2
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#mergeDeepWith()"
          },
          "mergeIn": {
            "name": "mergeIn",
            "label": "mergeIn()",
            "id": "mergeIn()",
            "group": "Deep persistent changes",
            "signatures": [
              {
                "line": 2583,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#mergeIn()"
          },
          "mergeWith": {
            "name": "mergeWith",
            "label": "mergeWith()",
            "id": "mergeWith()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 2552,
                "params": [
                  {
                    "name": "merger",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "oldVal",
                          "type": {
                            "k": 2
                          }
                        },
                        {
                          "name": "newVal",
                          "type": {
                            "k": 2
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 17,
                            "operator": "keyof",
                            "type": {
                              "k": 11,
                              "param": "TProps"
                            }
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Partial",
                              "args": [
                                {
                                  "k": 11,
                                  "param": "TProps"
                                }
                              ]
                            },
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 15,
                                  "types": [
                                    {
                                      "k": 7
                                    },
                                    {
                                      "k": 2
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#mergeWith()"
          },
          "set": {
            "name": "set",
            "label": "set()",
            "id": "set()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 2540,
                "typeParams": [
                  "K"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "k": 16,
                      "type": {
                        "k": 11,
                        "param": "TProps"
                      },
                      "index": {
                        "k": 11,
                        "param": "K"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#set()"
          },
          "setIn": {
            "name": "setIn",
            "label": "setIn()",
            "id": "setIn()",
            "group": "Deep persistent changes",
            "signatures": [
              {
                "line": 2578,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "value",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#setIn()"
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Record to equivalent native JavaScript Object.</p>\n",
              "description": "<p>Note: This method may not be overridden. Objects with custom\nserialization to plain JS may override toJSON() instead.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2603,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Record#toJS()"
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Record to equivalent native JavaScript Object.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2608,
                "type": {
                  "k": 11,
                  "param": "TProps"
                }
              }
            ],
            "url": "/docs/latest@main/Record#toJSON()"
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Record to equivalent JavaScript Object.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2613,
                "type": {
                  "k": 11,
                  "param": "TProps"
                }
              }
            ],
            "url": "/docs/latest@main/Record#toObject()"
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 2642,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 17,
                      "operator": "keyof",
                      "type": {
                        "k": 11,
                        "param": "TProps"
                      }
                    },
                    {
                      "k": 16,
                      "type": {
                        "k": 11,
                        "param": "TProps"
                      },
                      "index": {
                        "k": 17,
                        "operator": "keyof",
                        "type": {
                          "k": 11,
                          "param": "TProps"
                        }
                      }
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Record#toSeq()"
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "signatures": [
              {
                "line": 2541,
                "typeParams": [
                  "K"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 16,
                            "type": {
                              "k": 11,
                              "param": "TProps"
                            },
                            "index": {
                              "k": 11,
                              "param": "K"
                            }
                          }
                        }
                      ],
                      "type": {
                        "k": 16,
                        "type": {
                          "k": 11,
                          "param": "TProps"
                        },
                        "index": {
                          "k": 11,
                          "param": "K"
                        }
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#update()"
          },
          "updateIn": {
            "name": "updateIn",
            "label": "updateIn()",
            "id": "updateIn()",
            "group": "Deep persistent changes",
            "signatures": [
              {
                "line": 2579,
                "params": [
                  {
                    "name": "keyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 2
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#updateIn()"
          },
          "wasAltered": {
            "name": "wasAltered",
            "label": "wasAltered()",
            "id": "wasAltered()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#wasAltered()\">Map#wasAltered</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2633,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Record#wasAltered()"
          },
          "withMutations": {
            "name": "withMutations",
            "label": "withMutations()",
            "id": "withMutations()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Record#withMutations()\">withMutations</a></code>! Only <code><a href=\"/docs/latest@main/Record#set()\">set</a></code> may be used mutatively.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#withMutations()\">Map#withMutations</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2623,
                "params": [
                  {
                    "name": "mutator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "mutable",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Record#withMutations()"
          }
        },
        "line": 2512,
        "typeParams": [
          "TProps"
        ]
      },
      "label": "Record",
      "url": "/docs/latest@main/Record"
    },
    "Record.Factory": {
      "qualifiedName": "Record.Factory",
      "doc": {
        "synopsis": "<p>A Record.Factory is created by the <code><a href=\"/docs/latest@main/Record\">Record()</a></code> function. Record instances\nare created by passing it some of the accepted values for that Record\ntype:</p>\n",
        "description": "<!-- runkit:activate\n     { \"preamble\": \"const { Record } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token comment\" spellcheck=\"true\">// makePerson is a Record Factory function\n</span><span class=\"token keyword\" >const</span> makePerson <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token primitive\" >null</span><span class=\"token punctuation\" >,</span> favoriteColor<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'unknown'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// alan is a Record instance\n</span><span class=\"token keyword\" >const</span> alan <span class=\"token operator\" >=</span> makePerson<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Alan'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Record%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note that Record Factories return <code><span class=\"token qualifier\" >Record</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span> <span class=\"token operator\" >&amp;</span> <span class=\"token qualifier\" >Readonly</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code>,\nthis allows use of both the Record instance API, and direct property\naccess on the resulting instances:</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Record } = require('immutable');const makePerson = Record({ name: null, favoriteColor: 'unknown' });const alan = makePerson({ name: 'Alan' });\" }\n-->\n<code class=\"codeBlock\"><span class=\"token comment\" spellcheck=\"true\">// Use the Record API\n</span>console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span><span class=\"token string\" >'Record API: '</span> <span class=\"token operator\" >+</span> alan<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'name'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Or direct property access (Readonly)\n</span>console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span><span class=\"token string\" >'property access: '</span> <span class=\"token operator\" >+</span> alan<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Record%20%7D%20%3D%20require%28%27immutable%27%29%3Bconst%20makePerson%20%3D%20Record%28%7B%20name%3A%20null%2C%20favoriteColor%3A%20%27unknown%27%20%7D%29%3Bconst%20alan%20%3D%20makePerson%28%7B%20name%3A%20%27Alan%27%20%7D%29%3B%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p><strong>Flow Typing Records:</strong></p>\n<p>Use the <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code> Flow type to get high quality type checking of\nRecords:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >import</span> type <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span> <span class=\"token punctuation\" >}</span> from <span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Use RecordFactory&lt;TProps> for defining new Record factory functions.\n</span>type <span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span> <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token operator\" >?</span>string<span class=\"token punctuation\" >,</span> favoriteColor<span class=\"token punctuation\" >:</span> string <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> makePerson<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span><span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span><span class=\"token operator\" >></span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token primitive\" >null</span><span class=\"token punctuation\" >,</span> favoriteColor<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'unknown'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Use RecordOf&lt;T> for defining new instances of that Record.\n</span>type <span class=\"token qualifier\" >Person</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span><span class=\"token operator\" >&lt;</span><span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span><span class=\"token operator\" >></span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> alan<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Person</span> <span class=\"token operator\" >=</span> makePerson<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Alan'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>",
        "notes": []
      },
      "interface": {
        "members": {
          "displayName": {
            "name": "displayName",
            "label": "displayName",
            "id": "displayName",
            "line": 2490,
            "doc": {
              "synopsis": "<p>The name provided to <code><span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span>values<span class=\"token punctuation\" >,</span> name<span class=\"token punctuation\" >)</span></code> can be accessed with\n<code><a href=\"/docs/latest@main/Record.Factory#displayName\">displayName</a></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "type": {
              "k": 7
            },
            "url": "/docs/latest@main/Record.Factory#displayName"
          }
        },
        "line": 2479,
        "typeParams": [
          "TProps"
        ]
      },
      "call": {
        "name": "Record.Factory",
        "label": "Record.Factory()",
        "id": "Record.Factory()",
        "signatures": [
          {
            "line": 2493,
            "typeParams": [
              "TProps"
            ],
            "params": [
              {
                "name": "values",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Partial",
                      "args": [
                        {
                          "k": 11,
                          "param": "TProps"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 15,
                          "types": [
                            {
                              "k": 7
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 14,
              "types": [
                {
                  "k": 12,
                  "name": "Record",
                  "args": [
                    {
                      "k": 11,
                      "param": "TProps"
                    }
                  ]
                },
                {
                  "k": 12,
                  "name": "Readonly",
                  "args": [
                    {
                      "k": 11,
                      "param": "TProps"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "url": "/docs/latest@main/Record.Factory#Record.Factory()"
      },
      "label": "Record.Factory",
      "url": "/docs/latest@main/Record.Factory"
    },
    "Repeat": {
      "qualifiedName": "Repeat",
      "call": {
        "name": "Repeat",
        "label": "Repeat()",
        "id": "Repeat()",
        "doc": {
          "synopsis": "<p>Returns a Seq.Indexed of <code><span class=\"t param\">value</span></code> repeated <code><span class=\"t param\">times</span></code> times. When <code><span class=\"t param\">times</span></code> is\nnot defined, returns an infinite <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> of <code><span class=\"t param\">value</span></code>.</p>\n",
          "description": "<p>Note: <code><a href=\"/docs/latest@main/Repeat()\">Repeat</a></code> is a factory function and not a class, and does not use the\n<code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Repeat</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Repeat</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'foo'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [ 'foo', 'foo', 'foo', ... ]\n</span><span class=\"token qualifier\" >Repeat</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'bar'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// [ 'bar', 'bar', 'bar', 'bar' ]</span></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 2243,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "value",
                "type": {
                  "k": 11,
                  "param": "T"
                }
              },
              {
                "name": "times",
                "type": {
                  "k": 6
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Seq.Indexed",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/Seq.Indexed"
            }
          }
        ],
        "url": "/docs/latest@main/Repeat()"
      },
      "label": "Repeat()",
      "url": "/docs/latest@main/Repeat()"
    },
    "Seq": {
      "qualifiedName": "Seq",
      "doc": {
        "synopsis": "<p><code><a href=\"/docs/latest@main/Seq\">Seq</a></code> describes a lazy operation, allowing them to efficiently chain\nuse of all the higher-order collection methods (such as <code><a href=\"/docs/latest@main/Seq#map()\">map</a></code> and <code><a href=\"/docs/latest@main/Seq#filter()\">filter</a></code>)\nby not creating intermediate collections.</p>\n",
        "description": "<p><strong>Seq is immutable</strong> — Once a Seq is created, it cannot be\nchanged, appended to, rearranged or otherwise modified. Instead, any\nmutative method called on a <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> will return a new <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>.</p>\n<p><strong>Seq is lazy</strong> — <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> does as little work as necessary to respond to any\nmethod call. Values are often created during iteration, including implicit\niteration when reducing or converting to a concrete data structure such as\na <code><a href=\"/docs/latest@main/List\">List</a></code> or JavaScript <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>.</p>\n<p>For example, the following performs no work, because the resulting\n<code><a href=\"/docs/latest@main/Seq\">Seq</a></code>&#39;s values are never iterated:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> oddSquares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >6</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >7</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >8</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >!</span><span class=\"token operator\" >==</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span></code><p>Once the <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> is used, it performs only the work necessary. In this\nexample, no intermediate arrays are ever created, filter is called three\ntimes, and map is only called once:</p>\n<code class=\"codeBlock\">oddSquares<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// 9</span></code><p>Any collection can be converted to a lazy Seq with <code><a href=\"/docs/latest@main/Seq\">Seq()</a></code>.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> map <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> lazySeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span>map<span class=\"token punctuation\" >)</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p><code><a href=\"/docs/latest@main/Seq\">Seq</a></code> allows for the efficient chaining of operations, allowing for the\nexpression of logic that can otherwise be very tedious:</p>\n<code class=\"codeBlock\">lazySeq\n  <span class=\"token punctuation\" >.</span>flip<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>key <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> key<span class=\"token punctuation\" >.</span>toUpperCase<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>flip<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { A: 1, B: 1, C: 1 }</span></code><p>As well as expressing logic that would otherwise seem memory or time\nlimited, for example <code><a href=\"/docs/latest@main/Range()\">Range</a></code> is a special kind of Lazy sequence.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Range</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Range</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >Infinity</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skip<span class=\"token punctuation\" >(</span><span class=\"token number\" >1000</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>n <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token operator\" >-</span>n<span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>n <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> n <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>take<span class=\"token punctuation\" >(</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>r<span class=\"token punctuation\" >,</span> n<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> r <span class=\"token operator\" >*</span> n<span class=\"token punctuation\" >,</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 1006008</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Seq is often used to provide a rich collection API to JavaScript Object.</p>\n<code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >*</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>toObject<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// { x: 0, y: 2, z: 4 }</span></code>",
        "notes": []
      },
      "functions": {
        "isSeq": {
          "name": "Seq.isSeq",
          "label": "Seq.isSeq()",
          "id": "isSeq()",
          "isStatic": true,
          "signatures": [
            {
              "line": 2735,
              "params": [
                {
                  "name": "maybeSeq",
                  "type": {
                    "k": 2
                  }
                }
              ],
              "type": {
                "k": 5
              }
            }
          ],
          "url": "/docs/latest@main/Seq#isSeq()"
        }
      },
      "call": {
        "name": "Seq",
        "label": "Seq()",
        "id": "Seq()",
        "signatures": [
          {
            "line": 3145,
            "typeParams": [
              "S"
            ],
            "params": [
              {
                "name": "seq",
                "type": {
                  "k": 11,
                  "param": "S"
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "S"
            }
          },
          {
            "line": 3146,
            "typeParams": [
              "K",
              "V"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Collection.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Keyed"
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Seq.Keyed",
              "args": [
                {
                  "k": 11,
                  "param": "K"
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Seq.Keyed"
            }
          },
          {
            "line": 3147,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Collection.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Set"
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Seq.Set",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/Seq.Set"
            }
          },
          {
            "line": 3148,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Collection.Indexed",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "ArrayLike",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Seq.Indexed",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/Seq.Indexed"
            }
          },
          {
            "line": 3151,
            "typeParams": [
              "V"
            ],
            "params": [
              {
                "name": "obj",
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Seq.Keyed",
              "args": [
                {
                  "k": 7
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Seq.Keyed"
            }
          },
          {
            "line": 3152,
            "typeParams": [
              "K",
              "V"
            ],
            "type": {
              "k": 12,
              "name": "Seq",
              "args": [
                {
                  "k": 11,
                  "param": "K"
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Seq"
            }
          }
        ],
        "url": "/docs/latest@main/Seq#Seq()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Iterators",
            "signatures": [
              {
                "line": 4210,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#[Symbol.iterator]()",
            "inherited": {
              "interface": "Collection",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection#[Symbol.iterator]()"
            }
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "cacheResult": {
            "name": "cacheResult",
            "label": "cacheResult()",
            "id": "cacheResult()",
            "group": "Force evaluation",
            "doc": {
              "synopsis": "<p>Because Sequences are lazy and designed to be chained together, they do\nnot cache their results. For example, this map function is called a total\nof 6 times, as each <code><a href=\"/docs/latest@main/Seq#join()\">join</a></code> iterates the Seq of three values.</p>\n",
              "description": "<p><code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" ><em></span> x<span class=\"token punctuation\" >)</span>\nsquares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code><p>If you know a <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> will be used multiple times, it may be more\nefficient to first cache it in memory. Here, the map function is called\nonly 3 times.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" ></em></span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>cacheResult<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\nsquares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code><p>Use this method judiciously, as it must fully evaluate a Seq which can be\na burden on memory and possibly performance.</p></p>\n<p>Note: after calling <code><a href=\"/docs/latest@main/Seq#cacheResult()\">cacheResult</a></code>, a Seq will always have a <code><a href=\"/docs/latest@main/Seq#size\">size</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3189,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#cacheResult()"
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with other values and\ncollection-like concatenated to this one.</p>\n",
              "description": "<p>For Seqs, all entries will be present in the resulting Seq, even if they\nhave the same key.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4543,
                "params": [
                  {
                    "name": "valuesOrCollections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#concat()",
            "inherited": {
              "interface": "Collection",
              "label": "concat()",
              "url": "/docs/latest@main/Collection#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 3258,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Seq"
                }
              },
              {
                "line": 3262,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#filter()",
            "overrides": {
              "interface": "Collection",
              "label": "filter()",
              "url": "/docs/latest@main/Collection#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the Seq, returning a Seq of the same type.</p>\n",
              "description": "<p>Similar to <code>seq<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.\nNote: Used only for sets.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3235,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Seq"
                }
              },
              {
                "line": 3246,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    },
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Seq"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#flatMap()",
            "overrides": {
              "interface": "Collection",
              "label": "flatMap()",
              "url": "/docs/latest@main/Collection#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#get()",
            "inherited": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Seq#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Seq#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Seq with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 10, 20 ]</span></code><p>Note: <code><a href=\"/docs/latest@main/Seq#map()\">map()</a></code> always returns a new instance, even if it produced the same\nvalue at every step.\nNote: used only for sets.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3206,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Seq"
                }
              },
              {
                "line": 3225,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    },
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Seq"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#map()",
            "overrides": {
              "interface": "Collection",
              "label": "map()",
              "url": "/docs/latest@main/Collection#map()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "size": {
            "name": "size",
            "label": "size",
            "id": "size",
            "line": 3165,
            "doc": {
              "synopsis": "<p>Some Seqs can describe their size lazily. When this is the case,\nsize will be an integer. Otherwise it will be undefined.</p>\n",
              "description": "<p>For example, Seqs returned from <code><a href=\"/docs/latest@main/Seq#map()\">map()</a></code> or <code><a href=\"/docs/latest@main/Seq#reverse()\">reverse()</a></code>\npreserve the size of the original <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> while <code><a href=\"/docs/latest@main/Seq#filter()\">filter()</a></code> does not.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Range()\">Range</a></code>, <code><a href=\"/docs/latest@main/Repeat()\">Repeat</a></code> and <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>s made from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>s and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>s will\nalways have a size.</p>\n",
              "notes": []
            },
            "type": {
              "k": 13,
              "types": [
                {
                  "k": 6
                },
                {
                  "k": 4
                }
              ]
            },
            "url": "/docs/latest@main/Seq#size"
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "<p><code><a href=\"/docs/latest@main/Collection.Indexed\">Collection.Indexed</a></code>, and <code><a href=\"/docs/latest@main/Collection.Set\">Collection.Set</a></code> produce an Array of values.\n<code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> produce an Array of [key, value] tuples.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4067,
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 15,
                          "types": [
                            {
                              "k": 11,
                              "param": "K"
                            },
                            {
                              "k": 11,
                              "param": "V"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toArray()",
            "inherited": {
              "interface": "Collection",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Collection to equivalent native JavaScript Array or Object.</p>\n",
              "description": "<p><code><a href=\"/docs/latest@main/Collection.Indexed\">Collection.Indexed</a></code>, and <code><a href=\"/docs/latest@main/Collection.Set\">Collection.Set</a></code> become <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>, while\n<code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> become <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>, converting keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4051,
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    },
                    {
                      "k": 8,
                      "members": [
                        {
                          "index": true,
                          "params": [
                            {
                              "name": "key",
                              "type": {
                                "k": 7
                              }
                            }
                          ],
                          "type": {
                            "k": 2
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toJS()",
            "inherited": {
              "interface": "Collection",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to equivalent native JavaScript Array or Object.</p>\n",
              "description": "<p><code><a href=\"/docs/latest@main/Collection.Indexed\">Collection.Indexed</a></code>, and <code><a href=\"/docs/latest@main/Collection.Set\">Collection.Set</a></code> become <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>, while\n<code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> become <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>, converting keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4059,
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 8,
                      "members": [
                        {
                          "index": true,
                          "params": [
                            {
                              "name": "key",
                              "type": {
                                "k": 7
                              }
                            }
                          ],
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toJSON()",
            "inherited": {
              "interface": "Collection",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Seq of the same kind (indexed,\nkeyed, or set).</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4145,
                "type": {
                  "k": 12,
                  "name": "Seq",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#update()",
            "inherited": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          }
        },
        "line": 3154,
        "typeParams": [
          "K",
          "V"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Collection",
            "args": [
              {
                "k": 11,
                "param": "K"
              },
              {
                "k": 11,
                "param": "V"
              }
            ],
            "url": "/docs/latest@main/Collection"
          }
        ]
      },
      "label": "Seq",
      "url": "/docs/latest@main/Seq"
    },
    "Seq.Indexed": {
      "qualifiedName": "Seq.Indexed",
      "doc": {
        "synopsis": "<p><code><a href=\"/docs/latest@main/Seq\">Seq</a></code> which represents an ordered indexed list of values.</p>\n",
        "description": "",
        "notes": []
      },
      "functions": {
        "of": {
          "name": "Seq.Indexed.of",
          "label": "Seq.Indexed.of()",
          "id": "of()",
          "isStatic": true,
          "signatures": [
            {
              "line": 2874,
              "typeParams": [
                "T"
              ],
              "params": [
                {
                  "name": "values",
                  "type": {
                    "k": 12,
                    "name": "Array",
                    "args": [
                      {
                        "k": 11,
                        "param": "T"
                      }
                    ]
                  },
                  "varArgs": true
                }
              ],
              "type": {
                "k": 12,
                "name": "Seq.Indexed",
                "args": [
                  {
                    "k": 11,
                    "param": "T"
                  }
                ],
                "url": "/docs/latest@main/Seq.Indexed"
              }
            }
          ],
          "url": "/docs/latest@main/Seq.Indexed#of()"
        }
      },
      "call": {
        "name": "Seq.Indexed",
        "label": "Seq.Indexed()",
        "id": "Seq.Indexed()",
        "doc": {
          "synopsis": "<p>Always returns Seq.Indexed, discarding associated keys and\nsupplying incrementing indices.</p>\n",
          "description": "<p>Note: <code><a href=\"/docs/latest@main/Seq.Indexed\">Seq.Indexed</a></code> is a conversion function and not a class, and does\nnot use the <code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 2884,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "ArrayLike",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Seq.Indexed",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/Seq.Indexed"
            }
          }
        ],
        "url": "/docs/latest@main/Seq.Indexed#Seq.Indexed()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Iterators",
            "signatures": [
              {
                "line": 3026,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#[Symbol.iterator]()",
            "overrides": {
              "interface": "Collection",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection#[Symbol.iterator]()"
            }
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "cacheResult": {
            "name": "cacheResult",
            "label": "cacheResult()",
            "id": "cacheResult()",
            "group": "Force evaluation",
            "doc": {
              "synopsis": "<p>Because Sequences are lazy and designed to be chained together, they do\nnot cache their results. For example, this map function is called a total\nof 6 times, as each <code><a href=\"/docs/latest@main/Seq#join()\">join</a></code> iterates the Seq of three values.</p>\n",
              "description": "<p><code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" ><em></span> x<span class=\"token punctuation\" >)</span>\nsquares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code><p>If you know a <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> will be used multiple times, it may be more\nefficient to first cache it in memory. Here, the map function is called\nonly 3 times.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" ></em></span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>cacheResult<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\nsquares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code><p>Use this method judiciously, as it must fully evaluate a Seq which can be\na burden on memory and possibly performance.</p></p>\n<p>Note: after calling <code><a href=\"/docs/latest@main/Seq#cacheResult()\">cacheResult</a></code>, a Seq will always have a <code><a href=\"/docs/latest@main/Seq#size\">size</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3189,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#cacheResult()",
            "inherited": {
              "interface": "Seq",
              "label": "cacheResult()",
              "url": "/docs/latest@main/Seq#cacheResult()"
            }
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a new Seq with other collections concatenated to this one.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2912,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "valuesOrCollections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 11,
                                  "param": "C"
                                }
                              ]
                            },
                            {
                              "k": 11,
                              "param": "C"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#concat()",
            "overrides": {
              "interface": "Collection",
              "label": "concat()",
              "url": "/docs/latest@main/Collection#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 2951,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              },
              {
                "line": 2955,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#filter()",
            "overrides": {
              "interface": "Seq",
              "label": "filter()",
              "url": "/docs/latest@main/Seq#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findIndex": {
            "name": "findIndex",
            "label": "findIndex()",
            "id": "findIndex()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first index in the Collection where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#findIndex()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "findIndex()",
              "url": "/docs/latest@main/Collection.Indexed#findIndex()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastIndex": {
            "name": "findLastIndex",
            "label": "findLastIndex()",
            "id": "findLastIndex()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last index in the Collection where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3711,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#findLastIndex()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "findLastIndex()",
              "url": "/docs/latest@main/Collection.Indexed#findLastIndex()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the Seq, returning a a Seq of the same type.</p>\n",
              "description": "<p>Similar to <code>seq<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2939,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#flatMap()",
            "overrides": {
              "interface": "Seq",
              "label": "flatMap()",
              "url": "/docs/latest@main/Seq#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "fromEntrySeq": {
            "name": "fromEntrySeq",
            "label": "fromEntrySeq()",
            "id": "fromEntrySeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>If this is a collection of [key, value] entry tuples, it will return a\nSeq.Keyed of those entries.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3542,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#fromEntrySeq()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "fromEntrySeq()",
              "url": "/docs/latest@main/Collection.Indexed#fromEntrySeq()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#get()",
            "inherited": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "indexOf": {
            "name": "indexOf",
            "label": "indexOf()",
            "id": "indexOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first index at which a given value can be found in the\nCollection, or -1 if it is not present.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3690,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#indexOf()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "indexOf()",
              "url": "/docs/latest@main/Collection.Indexed#indexOf()"
            }
          },
          "interleave": {
            "name": "interleave",
            "label": "interleave()",
            "id": "interleave()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a Collection of the same type with the provided <code><span class=\"t param\">collections</span></code>\ninterleaved into this collection.</p>\n",
              "description": "<p>The resulting Collection includes the first item from each, then the\nsecond from each, etc.</p>\n<!-- runkit:activate\n     { \"preamble\": \"require('immutable')\"}\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>interleave<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, \"A\", 2, \"B\", 3, \"C\" ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>The shortest Collection stops interleave.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>interleave<span class=\"token punctuation\" >(</span>\n  <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'X'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'Y'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'Z'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, \"A\", \"X\", 2, \"B\", \"Y\" ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Since <code><a href=\"/docs/latest@main/List#interleave()\">interleave()</a></code> re-indexes values, it produces a complete copy,\nwhich has <code>O<span class=\"token punctuation\" >(</span>N<span class=\"token punctuation\" >)</span></code> complexity.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#interleave()\">interleave</a></code> <em>cannot</em> be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3586,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 11,
                              "param": "T"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#interleave()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "interleave()",
              "url": "/docs/latest@main/Collection.Indexed#interleave()"
            }
          },
          "interpose": {
            "name": "interpose",
            "label": "interpose()",
            "id": "interpose()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a Collection of the same type with <code><span class=\"t param\">separator</span></code> between each item\nin this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3550,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#interpose()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "interpose()",
              "url": "/docs/latest@main/Collection.Indexed#interpose()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 6
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastIndexOf": {
            "name": "lastIndexOf",
            "label": "lastIndexOf()",
            "id": "lastIndexOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last index at which a given value can be found in the\nCollection, or -1 if it is not present.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3696,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#lastIndexOf()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "lastIndexOf()",
              "url": "/docs/latest@main/Collection.Indexed#lastIndexOf()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Indexed</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ 10, 20 ]</span></code><p>Note: <code><a href=\"/docs/latest@main/Seq.Indexed#map()\">map()</a></code> always returns a new instance, even if it produced the\nsame value at every step.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2929,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#map()",
            "overrides": {
              "interface": "Seq",
              "label": "map()",
              "url": "/docs/latest@main/Seq#map()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "size": {
            "name": "size",
            "label": "size",
            "id": "size",
            "line": 3165,
            "doc": {
              "synopsis": "<p>Some Seqs can describe their size lazily. When this is the case,\nsize will be an integer. Otherwise it will be undefined.</p>\n",
              "description": "<p>For example, Seqs returned from <code><a href=\"/docs/latest@main/Seq#map()\">map()</a></code> or <code><a href=\"/docs/latest@main/Seq#reverse()\">reverse()</a></code>\npreserve the size of the original <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> while <code><a href=\"/docs/latest@main/Seq#filter()\">filter()</a></code> does not.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Range()\">Range</a></code>, <code><a href=\"/docs/latest@main/Repeat()\">Repeat</a></code> and <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>s made from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>s and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>s will\nalways have a size.</p>\n",
              "notes": []
            },
            "type": {
              "k": 13,
              "types": [
                {
                  "k": 6
                },
                {
                  "k": 4
                }
              ]
            },
            "url": "/docs/latest@main/Seq.Indexed#size",
            "inherited": {
              "interface": "Seq",
              "label": "size",
              "url": "/docs/latest@main/Seq#size"
            }
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "splice": {
            "name": "splice",
            "label": "splice()",
            "id": "splice()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Splice returns a new indexed Collection by replacing a region of this\nCollection with new values. If values are not provided, it only skips the\nregion to be removed.</p>\n",
              "description": "<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nCollection. <code>s<span class=\"token punctuation\" >.</span>splice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> splices after the second to last item.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'d'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>splice<span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'q'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'r'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'s'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"a\", \"q\", \"r\", \"s\", \"d\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Since <code><a href=\"/docs/latest@main/List#splice()\">splice()</a></code> re-indexes values, it produces a complete copy, which\nhas <code>O<span class=\"token punctuation\" >(</span>N<span class=\"token punctuation\" >)</span></code> complexity.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#splice()\">splice</a></code> <em>cannot</em> be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3608,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "removeNum",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "values",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#splice()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "splice()",
              "url": "/docs/latest@main/Collection.Indexed#splice()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2902,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toArray()",
            "overrides": {
              "interface": "Collection",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Indexed Seq to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2892,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toJS()",
            "overrides": {
              "interface": "Collection",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Indexed Seq to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2897,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toJSON()",
            "overrides": {
              "interface": "Collection",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "T"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns itself</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2907,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toSeq()",
            "overrides": {
              "interface": "Collection",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#update()",
            "inherited": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          },
          "zip": {
            "name": "zip",
            "label": "zip()",
            "id": "zip()",
            "group": "Combination",
            "signatures": [
              {
                "line": 2971,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              },
              {
                "line": 2972,
                "typeParams": [
                  "U",
                  "V"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "other2",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              },
              {
                "line": 2976,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#zip()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "zip()",
              "url": "/docs/latest@main/Collection.Indexed#zip()"
            }
          },
          "zipAll": {
            "name": "zipAll",
            "label": "zipAll()",
            "id": "zipAll()",
            "group": "Combination",
            "signatures": [
              {
                "line": 2992,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              },
              {
                "line": 2993,
                "typeParams": [
                  "U",
                  "V"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "other2",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              },
              {
                "line": 2997,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#zipAll()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "zipAll()",
              "url": "/docs/latest@main/Collection.Indexed#zipAll()"
            }
          },
          "zipWith": {
            "name": "zipWith",
            "label": "zipWith()",
            "id": "zipWith()",
            "group": "Combination",
            "signatures": [
              {
                "line": 3012,
                "typeParams": [
                  "U",
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "otherValue",
                          "type": {
                            "k": 11,
                            "param": "U"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "otherCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              },
              {
                "line": 3016,
                "typeParams": [
                  "U",
                  "V",
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "otherValue",
                          "type": {
                            "k": 11,
                            "param": "U"
                          }
                        },
                        {
                          "name": "thirdValue",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "otherCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "thirdCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              },
              {
                "line": 3021,
                "typeParams": [
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "values",
                          "type": {
                            "k": 12,
                            "name": "Array",
                            "args": [
                              {
                                "k": 2
                              }
                            ]
                          },
                          "varArgs": true
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Indexed#zipWith()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "zipWith()",
              "url": "/docs/latest@main/Collection.Indexed#zipWith()"
            }
          }
        },
        "line": 2888,
        "typeParams": [
          "T"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Seq",
            "args": [
              {
                "k": 6
              },
              {
                "k": 11,
                "param": "T"
              }
            ],
            "url": "/docs/latest@main/Seq"
          },
          {
            "k": 12,
            "name": "Collection.Indexed",
            "args": [
              {
                "k": 11,
                "param": "T"
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed"
          }
        ]
      },
      "label": "Seq.Indexed",
      "url": "/docs/latest@main/Seq.Indexed"
    },
    "Seq.Keyed": {
      "qualifiedName": "Seq.Keyed",
      "doc": {
        "synopsis": "<p><code><a href=\"/docs/latest@main/Seq\">Seq</a></code> which represents key-value pairs.</p>\n",
        "description": "",
        "notes": []
      },
      "call": {
        "name": "Seq.Keyed",
        "label": "Seq.Keyed()",
        "id": "Seq.Keyed()",
        "signatures": [
          {
            "line": 2754,
            "typeParams": [
              "K",
              "V"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Iterable",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Seq.Keyed",
              "args": [
                {
                  "k": 11,
                  "param": "K"
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Seq.Keyed"
            }
          },
          {
            "line": 2755,
            "typeParams": [
              "V"
            ],
            "params": [
              {
                "name": "obj",
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Seq.Keyed",
              "args": [
                {
                  "k": 7
                },
                {
                  "k": 11,
                  "param": "V"
                }
              ],
              "url": "/docs/latest@main/Seq.Keyed"
            }
          }
        ],
        "url": "/docs/latest@main/Seq.Keyed#Seq.Keyed()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Iterators",
            "signatures": [
              {
                "line": 2864,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#[Symbol.iterator]()",
            "overrides": {
              "interface": "Collection",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection#[Symbol.iterator]()"
            }
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "cacheResult": {
            "name": "cacheResult",
            "label": "cacheResult()",
            "id": "cacheResult()",
            "group": "Force evaluation",
            "doc": {
              "synopsis": "<p>Because Sequences are lazy and designed to be chained together, they do\nnot cache their results. For example, this map function is called a total\nof 6 times, as each <code><a href=\"/docs/latest@main/Seq#join()\">join</a></code> iterates the Seq of three values.</p>\n",
              "description": "<p><code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" ><em></span> x<span class=\"token punctuation\" >)</span>\nsquares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code><p>If you know a <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> will be used multiple times, it may be more\nefficient to first cache it in memory. Here, the map function is called\nonly 3 times.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" ></em></span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>cacheResult<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\nsquares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code><p>Use this method judiciously, as it must fully evaluate a Seq which can be\na burden on memory and possibly performance.</p></p>\n<p>Note: after calling <code><a href=\"/docs/latest@main/Seq#cacheResult()\">cacheResult</a></code>, a Seq will always have a <code><a href=\"/docs/latest@main/Seq#size\">size</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3189,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#cacheResult()",
            "inherited": {
              "interface": "Seq",
              "label": "cacheResult()",
              "url": "/docs/latest@main/Seq#cacheResult()"
            }
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Combination",
            "signatures": [
              {
                "line": 2788,
                "typeParams": [
                  "KC",
                  "VC"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 15,
                              "types": [
                                {
                                  "k": 11,
                                  "param": "KC"
                                },
                                {
                                  "k": 11,
                                  "param": "VC"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "KC"
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "VC"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              },
              {
                "line": 2791,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 8,
                          "members": [
                            {
                              "index": true,
                              "params": [
                                {
                                  "name": "key",
                                  "type": {
                                    "k": 7
                                  }
                                }
                              ],
                              "type": {
                                "k": 11,
                                "param": "C"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 7
                        }
                      ]
                    },
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "V"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#concat()",
            "overrides": {
              "interface": "Collection",
              "label": "concat()",
              "url": "/docs/latest@main/Collection#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 2850,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              },
              {
                "line": 2854,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#filter()",
            "overrides": {
              "interface": "Seq",
              "label": "filter()",
              "url": "/docs/latest@main/Seq#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the Seq, returning a Seq of the same type.</p>\n",
              "description": "<p>Similar to <code>seq<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2838,
                "typeParams": [
                  "KM",
                  "VM"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "KM"
                              },
                              {
                                "k": 11,
                                "param": "VM"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "KM"
                    },
                    {
                      "k": 11,
                      "param": "VM"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#flatMap()",
            "overrides": {
              "interface": "Seq",
              "label": "flatMap()",
              "url": "/docs/latest@main/Seq#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "flip": {
            "name": "flip",
            "label": "flip()",
            "id": "flip()",
            "group": "Sequence functions",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p>Collection.Keyed.flip</p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2862,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#flip()",
            "overrides": {
              "interface": "Collection.Keyed",
              "label": "flip()",
              "url": "/docs/latest@main/Collection.Keyed#flip()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#get()",
            "inherited": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "V"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Keyed with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyed</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { \"a\": 10, \"b\": 20 }</span></code><p>Note: <code><a href=\"/docs/latest@main/Seq.Keyed#map()\">map()</a></code> always returns a new instance, even if it produced the\nsame value at every step.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2808,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#map()",
            "overrides": {
              "interface": "Seq",
              "label": "map()",
              "url": "/docs/latest@main/Seq#map()"
            }
          },
          "mapEntries": {
            "name": "mapEntries",
            "label": "mapEntries()",
            "id": "mapEntries()",
            "group": "Sequence functions",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p>Collection.Keyed.mapEntries</p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2824,
                "typeParams": [
                  "KM",
                  "VM"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "entry",
                          "type": {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "K"
                              },
                              {
                                "k": 11,
                                "param": "V"
                              }
                            ]
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 15,
                            "types": [
                              {
                                "k": 11,
                                "param": "KM"
                              },
                              {
                                "k": 11,
                                "param": "VM"
                              }
                            ]
                          },
                          {
                            "k": 4
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "KM"
                    },
                    {
                      "k": 11,
                      "param": "VM"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#mapEntries()",
            "overrides": {
              "interface": "Collection.Keyed",
              "label": "mapEntries()",
              "url": "/docs/latest@main/Collection.Keyed#mapEntries()"
            }
          },
          "mapKeys": {
            "name": "mapKeys",
            "label": "mapKeys()",
            "id": "mapKeys()",
            "group": "Sequence functions",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p>Collection.Keyed.mapKeys</p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2816,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#mapKeys()",
            "overrides": {
              "interface": "Collection.Keyed",
              "label": "mapKeys()",
              "url": "/docs/latest@main/Collection.Keyed#mapKeys()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "V"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "V"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "size": {
            "name": "size",
            "label": "size",
            "id": "size",
            "line": 3165,
            "doc": {
              "synopsis": "<p>Some Seqs can describe their size lazily. When this is the case,\nsize will be an integer. Otherwise it will be undefined.</p>\n",
              "description": "<p>For example, Seqs returned from <code><a href=\"/docs/latest@main/Seq#map()\">map()</a></code> or <code><a href=\"/docs/latest@main/Seq#reverse()\">reverse()</a></code>\npreserve the size of the original <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> while <code><a href=\"/docs/latest@main/Seq#filter()\">filter()</a></code> does not.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Range()\">Range</a></code>, <code><a href=\"/docs/latest@main/Repeat()\">Repeat</a></code> and <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>s made from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>s and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>s will\nalways have a size.</p>\n",
              "notes": []
            },
            "type": {
              "k": 13,
              "types": [
                {
                  "k": 6
                },
                {
                  "k": 4
                }
              ]
            },
            "url": "/docs/latest@main/Seq.Keyed#size",
            "inherited": {
              "interface": "Seq",
              "label": "size",
              "url": "/docs/latest@main/Seq#size"
            }
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "K"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2775,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "K"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toArray()",
            "overrides": {
              "interface": "Collection",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Keyed Seq to equivalent native JavaScript Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2763,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toJS()",
            "overrides": {
              "interface": "Collection",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Keyed Seq to equivalent native JavaScript Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2770,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toJSON()",
            "overrides": {
              "interface": "Collection",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns itself</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2780,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toSeq()",
            "overrides": {
              "interface": "Collection",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#update()",
            "inherited": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Keyed#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          }
        },
        "line": 2757,
        "typeParams": [
          "K",
          "V"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Seq",
            "args": [
              {
                "k": 11,
                "param": "K"
              },
              {
                "k": 11,
                "param": "V"
              }
            ],
            "url": "/docs/latest@main/Seq"
          },
          {
            "k": 12,
            "name": "Collection.Keyed",
            "args": [
              {
                "k": 11,
                "param": "K"
              },
              {
                "k": 11,
                "param": "V"
              }
            ],
            "url": "/docs/latest@main/Collection.Keyed"
          }
        ]
      },
      "label": "Seq.Keyed",
      "url": "/docs/latest@main/Seq.Keyed"
    },
    "Seq.Set": {
      "qualifiedName": "Seq.Set",
      "doc": {
        "synopsis": "<p><code><a href=\"/docs/latest@main/Seq\">Seq</a></code> which represents a set of values.</p>\n",
        "description": "<p>Because <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> are often lazy, <code><a href=\"/docs/latest@main/Seq.Set\">Seq.Set</a></code> does not provide the same guarantee\nof value uniqueness as the concrete <code><a href=\"/docs/latest@main/Set\">Set</a></code>.</p>\n",
        "notes": []
      },
      "functions": {
        "of": {
          "name": "Seq.Set.of",
          "label": "Seq.Set.of()",
          "id": "of()",
          "isStatic": true,
          "signatures": [
            {
              "line": 3039,
              "typeParams": [
                "T"
              ],
              "params": [
                {
                  "name": "values",
                  "type": {
                    "k": 12,
                    "name": "Array",
                    "args": [
                      {
                        "k": 11,
                        "param": "T"
                      }
                    ]
                  },
                  "varArgs": true
                }
              ],
              "type": {
                "k": 12,
                "name": "Seq.Set",
                "args": [
                  {
                    "k": 11,
                    "param": "T"
                  }
                ],
                "url": "/docs/latest@main/Seq.Set"
              }
            }
          ],
          "url": "/docs/latest@main/Seq.Set#of()"
        }
      },
      "call": {
        "name": "Seq.Set",
        "label": "Seq.Set()",
        "id": "Seq.Set()",
        "doc": {
          "synopsis": "<p>Always returns a Seq.Set, discarding associated indices or keys.</p>\n",
          "description": "<p>Note: <code><a href=\"/docs/latest@main/Seq.Set\">Seq.Set</a></code> is a conversion function and not a class, and does not\nuse the <code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 3048,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "ArrayLike",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Seq.Set",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/Seq.Set"
            }
          }
        ],
        "url": "/docs/latest@main/Seq.Set#Seq.Set()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Iterators",
            "signatures": [
              {
                "line": 3122,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#[Symbol.iterator]()",
            "overrides": {
              "interface": "Collection",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection#[Symbol.iterator]()"
            }
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "cacheResult": {
            "name": "cacheResult",
            "label": "cacheResult()",
            "id": "cacheResult()",
            "group": "Force evaluation",
            "doc": {
              "synopsis": "<p>Because Sequences are lazy and designed to be chained together, they do\nnot cache their results. For example, this map function is called a total\nof 6 times, as each <code><a href=\"/docs/latest@main/Seq#join()\">join</a></code> iterates the Seq of three values.</p>\n",
              "description": "<p><code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" ><em></span> x<span class=\"token punctuation\" >)</span>\nsquares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code><p>If you know a <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> will be used multiple times, it may be more\nefficient to first cache it in memory. Here, the map function is called\nonly 3 times.</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >var</span> squares <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" ></em></span> x<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>cacheResult<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\nsquares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token operator\" >+</span> squares<span class=\"token punctuation\" >.</span>join<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code><p>Use this method judiciously, as it must fully evaluate a Seq which can be\na burden on memory and possibly performance.</p></p>\n<p>Note: after calling <code><a href=\"/docs/latest@main/Seq#cacheResult()\">cacheResult</a></code>, a Seq will always have a <code><a href=\"/docs/latest@main/Seq#size\">size</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3189,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#cacheResult()",
            "inherited": {
              "interface": "Seq",
              "label": "cacheResult()",
              "url": "/docs/latest@main/Seq#cacheResult()"
            }
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a new Seq with other collections concatenated to this one.</p>\n",
              "description": "<p>All entries will be present in the resulting Seq, even if they\nare duplicates.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3077,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 11,
                              "param": "U"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#concat()",
            "overrides": {
              "interface": "Collection",
              "label": "concat()",
              "url": "/docs/latest@main/Collection#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 3113,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              },
              {
                "line": 3117,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#filter()",
            "overrides": {
              "interface": "Seq",
              "label": "filter()",
              "url": "/docs/latest@main/Seq#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the Seq, returning a Seq of the same type.</p>\n",
              "description": "<p>Similar to <code>seq<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3101,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#flatMap()",
            "overrides": {
              "interface": "Seq",
              "label": "flatMap()",
              "url": "/docs/latest@main/Seq#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#get()",
            "inherited": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Set with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 10, 20 }</span></code><p>Note: <code><a href=\"/docs/latest@main/Seq.Set#map()\">map()</a></code> always returns a new instance, even if it produced the\nsame value at every step.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3091,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#map()",
            "overrides": {
              "interface": "Seq",
              "label": "map()",
              "url": "/docs/latest@main/Seq#map()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "size": {
            "name": "size",
            "label": "size",
            "id": "size",
            "line": 3165,
            "doc": {
              "synopsis": "<p>Some Seqs can describe their size lazily. When this is the case,\nsize will be an integer. Otherwise it will be undefined.</p>\n",
              "description": "<p>For example, Seqs returned from <code><a href=\"/docs/latest@main/Seq#map()\">map()</a></code> or <code><a href=\"/docs/latest@main/Seq#reverse()\">reverse()</a></code>\npreserve the size of the original <code><a href=\"/docs/latest@main/Seq\">Seq</a></code> while <code><a href=\"/docs/latest@main/Seq#filter()\">filter()</a></code> does not.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Range()\">Range</a></code>, <code><a href=\"/docs/latest@main/Repeat()\">Repeat</a></code> and <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>s made from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>s and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>s will\nalways have a size.</p>\n",
              "notes": []
            },
            "type": {
              "k": 13,
              "types": [
                {
                  "k": 6
                },
                {
                  "k": 4
                }
              ]
            },
            "url": "/docs/latest@main/Seq.Set#size",
            "inherited": {
              "interface": "Seq",
              "label": "size",
              "url": "/docs/latest@main/Seq#size"
            }
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3064,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toArray()",
            "overrides": {
              "interface": "Collection",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Set Seq to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3054,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toJS()",
            "overrides": {
              "interface": "Collection",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Set Seq to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3059,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toJSON()",
            "overrides": {
              "interface": "Collection",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "T"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns itself</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3069,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toSeq()",
            "overrides": {
              "interface": "Collection",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#update()",
            "inherited": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Seq.Set#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          }
        },
        "line": 3050,
        "typeParams": [
          "T"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Seq",
            "args": [
              {
                "k": 11,
                "param": "T"
              },
              {
                "k": 11,
                "param": "T"
              }
            ],
            "url": "/docs/latest@main/Seq"
          },
          {
            "k": 12,
            "name": "Collection.Set",
            "args": [
              {
                "k": 11,
                "param": "T"
              }
            ],
            "url": "/docs/latest@main/Collection.Set"
          }
        ]
      },
      "label": "Seq.Set",
      "url": "/docs/latest@main/Seq.Set"
    },
    "Set": {
      "qualifiedName": "Set",
      "doc": {
        "synopsis": "<p>A Collection of unique values with <code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> adds and has.</p>\n",
        "description": "<p>When iterating a Set, the entries will be (value, value) pairs. Iteration\norder of a Set is undefined, however is stable. Multiple iterations of the\nsame Set will iterate in the same order.</p>\n<p>Set values, like Map keys, may be of any type. Equality is determined using\n<code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>, enabling Sets to uniquely include other Immutable\ncollections, custom value types, and NaN.</p>\n",
        "notes": []
      },
      "functions": {
        "fromKeys": {
          "name": "Set.fromKeys",
          "label": "Set.fromKeys()",
          "id": "fromKeys()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1608,
              "typeParams": [
                "T"
              ],
              "params": [
                {
                  "name": "iter",
                  "type": {
                    "k": 12,
                    "name": "Collection",
                    "args": [
                      {
                        "k": 11,
                        "param": "T"
                      },
                      {
                        "k": 2
                      }
                    ],
                    "url": "/docs/latest@main/Collection"
                  }
                }
              ],
              "type": {
                "k": 12,
                "name": "Set",
                "args": [
                  {
                    "k": 11,
                    "param": "T"
                  }
                ],
                "url": "/docs/latest@main/Set"
              }
            },
            {
              "line": 1609,
              "params": [
                {
                  "name": "obj",
                  "type": {
                    "k": 8,
                    "members": [
                      {
                        "index": true,
                        "params": [
                          {
                            "name": "key",
                            "type": {
                              "k": 7
                            }
                          }
                        ],
                        "type": {
                          "k": 2
                        }
                      }
                    ]
                  }
                }
              ],
              "type": {
                "k": 12,
                "name": "Set",
                "args": [
                  {
                    "k": 7
                  }
                ],
                "url": "/docs/latest@main/Set"
              }
            }
          ],
          "url": "/docs/latest@main/Set#fromKeys()"
        },
        "intersect": {
          "name": "Set.intersect",
          "label": "Set.intersect()",
          "id": "intersect()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1624,
              "typeParams": [
                "T"
              ],
              "params": [
                {
                  "name": "sets",
                  "type": {
                    "k": 12,
                    "name": "Iterable",
                    "args": [
                      {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "T"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "type": {
                "k": 12,
                "name": "Set",
                "args": [
                  {
                    "k": 11,
                    "param": "T"
                  }
                ],
                "url": "/docs/latest@main/Set"
              }
            }
          ],
          "url": "/docs/latest@main/Set#intersect()"
        },
        "isSet": {
          "name": "Set.isSet",
          "label": "Set.isSet()",
          "id": "isSet()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1597,
              "params": [
                {
                  "name": "maybeSet",
                  "type": {
                    "k": 2
                  }
                }
              ],
              "type": {
                "k": 5
              }
            }
          ],
          "url": "/docs/latest@main/Set#isSet()"
        },
        "of": {
          "name": "Set.of",
          "label": "Set.of()",
          "id": "of()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1602,
              "typeParams": [
                "T"
              ],
              "params": [
                {
                  "name": "values",
                  "type": {
                    "k": 12,
                    "name": "Array",
                    "args": [
                      {
                        "k": 11,
                        "param": "T"
                      }
                    ]
                  },
                  "varArgs": true
                }
              ],
              "type": {
                "k": 12,
                "name": "Set",
                "args": [
                  {
                    "k": 11,
                    "param": "T"
                  }
                ],
                "url": "/docs/latest@main/Set"
              }
            }
          ],
          "url": "/docs/latest@main/Set#of()"
        },
        "union": {
          "name": "Set.union",
          "label": "Set.union()",
          "id": "union()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1639,
              "typeParams": [
                "T"
              ],
              "params": [
                {
                  "name": "sets",
                  "type": {
                    "k": 12,
                    "name": "Iterable",
                    "args": [
                      {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "T"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "type": {
                "k": 12,
                "name": "Set",
                "args": [
                  {
                    "k": 11,
                    "param": "T"
                  }
                ],
                "url": "/docs/latest@main/Set"
              }
            }
          ],
          "url": "/docs/latest@main/Set#union()"
        }
      },
      "call": {
        "name": "Set",
        "label": "Set()",
        "id": "Set()",
        "doc": {
          "synopsis": "<p>Create a new immutable Set containing the values of the provided\ncollection-like.</p>\n",
          "description": "<p>Note: <code><a href=\"/docs/latest@main/Set\">Set</a></code> is a factory function and not a class, and does not use the\n<code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 1649,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "ArrayLike",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Set",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/Set"
            }
          }
        ],
        "url": "/docs/latest@main/Set#Set()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 3871,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#[Symbol.iterator]()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection.Set#[Symbol.iterator]()"
            }
          },
          "add": {
            "name": "add",
            "label": "add()",
            "id": "add()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Set which also includes this value.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Set#add()\">add</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1664,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#add()"
          },
          "asImmutable": {
            "name": "asImmutable",
            "label": "asImmutable()",
            "id": "asImmutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1748,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#asImmutable()"
          },
          "asMutable": {
            "name": "asMutable",
            "label": "asMutable()",
            "id": "asMutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nmentions being safe to use in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1738,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#asMutable()"
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "clear": {
            "name": "clear",
            "label": "clear()",
            "id": "clear()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Set containing no values.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Set#clear()\">clear</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1684,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#clear()"
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection with other collections concatenated to this one.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3826,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 11,
                              "param": "U"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection.Set",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Collection.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Set#concat()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "concat()",
              "url": "/docs/latest@main/Collection.Set#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Set#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Set#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "delete": {
            "name": "delete",
            "label": "delete()",
            "id": "delete()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Set which excludes this value.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Set#delete()\">delete</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Set#delete()\">delete</a></code> <strong>cannot</strong> be safely used in IE8, use <code><a href=\"/docs/latest@main/remove()\">remove</a></code> if\nsupporting old browsers.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "remove"
                }
              ]
            },
            "signatures": [
              {
                "line": 1676,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#delete()"
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Set#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Set#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Set#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 1781,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              },
              {
                "line": 1785,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#filter()",
            "overrides": {
              "interface": "Collection.Set",
              "label": "filter()",
              "url": "/docs/latest@main/Collection.Set#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the Set, returning a new Set.</p>\n",
              "description": "<p>Similar to <code><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1769,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Set#flatMap()",
            "overrides": {
              "interface": "Collection.Set",
              "label": "flatMap()",
              "url": "/docs/latest@main/Collection.Set#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Set#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Set#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3954,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3955,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#get()",
            "inherited": {
              "interface": "Collection",
              "label": "get()",
              "url": "/docs/latest@main/Collection#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Set#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Set#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Set#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Set#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Set#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Set#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "intersect": {
            "name": "intersect",
            "label": "intersect()",
            "id": "intersect()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a Set which has removed any values not also contained\nwithin <code><span class=\"t param\">collections</span></code>.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Set#intersect()\">intersect</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1704,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 11,
                              "param": "T"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#intersect()"
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Set#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Set#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Set#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Set#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Set#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Set with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Set [10,20]</span></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 1759,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Set#map()",
            "overrides": {
              "interface": "Collection.Set",
              "label": "map()",
              "url": "/docs/latest@main/Collection.Set#map()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Set#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Set#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "size": {
            "name": "size",
            "label": "size",
            "id": "size",
            "line": 1655,
            "doc": {
              "synopsis": "<p>The number of items in this Set.</p>\n",
              "description": "",
              "notes": []
            },
            "type": {
              "k": 6
            },
            "url": "/docs/latest@main/Set#size"
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Set#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "subtract": {
            "name": "subtract",
            "label": "subtract()",
            "id": "subtract()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a Set excluding any values contained within <code><span class=\"t param\">collections</span></code>.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>subtract<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedSet [2]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/Set#subtract()\">subtract</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 1718,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 11,
                              "param": "T"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#subtract()"
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3813,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#toArray()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection.Set#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Set#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Set collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3803,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#toJS()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection.Set#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Set collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3808,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#toJSON()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection.Set#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Set#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Set#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Set#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "T"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Set#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Set#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns Seq.Set.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3819,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Set#toSeq()",
            "inherited": {
              "interface": "Collection.Set",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection.Set#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Set#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Set#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Set#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "union": {
            "name": "union",
            "label": "union()",
            "id": "union()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a Set including any value from <code><span class=\"t param\">collections</span></code> that does not already\nexist in this Set.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Set#union()\">union</a></code> can be used in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": [
                {
                  "name": "alias",
                  "body": "merge"
                },
                {
                  "name": "alias",
                  "body": "concat"
                }
              ]
            },
            "signatures": [
              {
                "line": 1694,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 11,
                              "param": "C"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Set#union()"
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Set#update()",
            "inherited": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Set#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Set#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          },
          "wasAltered": {
            "name": "wasAltered",
            "label": "wasAltered()",
            "id": "wasAltered()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#wasAltered()\">Map#wasAltered</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1743,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Set#wasAltered()"
          },
          "withMutations": {
            "name": "withMutations",
            "label": "withMutations()",
            "id": "withMutations()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nmentions being safe to use in <code><a href=\"/docs/latest@main/Set#withMutations()\">withMutations</a></code>.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#withMutations()\">Map#withMutations</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 1729,
                "params": [
                  {
                    "name": "mutator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "mutable",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Set#withMutations()"
          }
        },
        "line": 1651,
        "typeParams": [
          "T"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Collection.Set",
            "args": [
              {
                "k": 11,
                "param": "T"
              }
            ],
            "url": "/docs/latest@main/Collection.Set"
          }
        ]
      },
      "label": "Set",
      "url": "/docs/latest@main/Set"
    },
    "Stack": {
      "qualifiedName": "Stack",
      "doc": {
        "synopsis": "<p>Stacks are indexed collections which support very efficient O(1) addition\nand removal from the front using <code><a href=\"/docs/latest@main/Stack#unshift()\">unshift(v)</a></code> and <code><a href=\"/docs/latest@main/Stack#shift()\">shift()</a></code>.</p>\n",
        "description": "<p>For familiarity, Stack also provides <code><a href=\"/docs/latest@main/Stack#push()\">push(v)</a></code>, <code><a href=\"/docs/latest@main/Stack#pop()\">pop()</a></code>, and <code><a href=\"/docs/latest@main/Stack#peek()\">peek()</a></code>, but\nbe aware that they also operate on the front of the list, unlike List or\na JavaScript Array.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Stack#reverse()\">reverse()</a></code> or any inherent reverse traversal (<code><a href=\"/docs/latest@main/Stack#reduceRight()\">reduceRight</a></code>,\n<code><a href=\"/docs/latest@main/Stack#lastIndexOf()\">lastIndexOf</a></code>, etc.) is not efficient with a Stack.</p>\n<p>Stack is implemented with a Single-Linked List.</p>\n",
        "notes": []
      },
      "functions": {
        "isStack": {
          "name": "Stack.isStack",
          "label": "Stack.isStack()",
          "id": "isStack()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1975,
              "params": [
                {
                  "name": "maybeStack",
                  "type": {
                    "k": 2
                  }
                }
              ],
              "type": {
                "k": 5
              }
            }
          ],
          "url": "/docs/latest@main/Stack#isStack()"
        },
        "of": {
          "name": "Stack.of",
          "label": "Stack.of()",
          "id": "of()",
          "isStatic": true,
          "signatures": [
            {
              "line": 1980,
              "typeParams": [
                "T"
              ],
              "params": [
                {
                  "name": "values",
                  "type": {
                    "k": 12,
                    "name": "Array",
                    "args": [
                      {
                        "k": 11,
                        "param": "T"
                      }
                    ]
                  },
                  "varArgs": true
                }
              ],
              "type": {
                "k": 12,
                "name": "Stack",
                "args": [
                  {
                    "k": 11,
                    "param": "T"
                  }
                ],
                "url": "/docs/latest@main/Stack"
              }
            }
          ],
          "url": "/docs/latest@main/Stack#of()"
        }
      },
      "call": {
        "name": "Stack",
        "label": "Stack()",
        "id": "Stack()",
        "doc": {
          "synopsis": "<p>Create a new immutable Stack containing the values of the provided\ncollection-like.</p>\n",
          "description": "<p>The iteration order of the provided collection is preserved in the\nresulting <code><a href=\"/docs/latest@main/Stack\">Stack</a></code>.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Stack\">Stack</a></code> is a factory function and not a class, and does not use the\n<code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 1993,
            "typeParams": [
              "T"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 12,
                      "name": "ArrayLike",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Stack",
              "args": [
                {
                  "k": 11,
                  "param": "T"
                }
              ],
              "url": "/docs/latest@main/Stack"
            }
          }
        ],
        "url": "/docs/latest@main/Stack#Stack()"
      },
      "interface": {
        "members": {
          "[Symbol.iterator]": {
            "name": "[Symbol.iterator]",
            "label": "[Symbol.iterator]()",
            "id": "[Symbol.iterator]()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 3769,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#[Symbol.iterator]()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "[Symbol.iterator]()",
              "url": "/docs/latest@main/Collection.Indexed#[Symbol.iterator]()"
            }
          },
          "asImmutable": {
            "name": "asImmutable",
            "label": "asImmutable()",
            "id": "asImmutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2089,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#asImmutable()"
          },
          "asMutable": {
            "name": "asMutable",
            "label": "asMutable()",
            "id": "asMutable()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Stack#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nmentions being safe to use in <code><a href=\"/docs/latest@main/Stack#withMutations()\">withMutations</a></code>.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#asMutable()\">Map#asMutable</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2079,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#asMutable()"
          },
          "butLast": {
            "name": "butLast",
            "label": "butLast()",
            "id": "butLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4440,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#butLast()",
            "inherited": {
              "interface": "Collection",
              "label": "butLast()",
              "url": "/docs/latest@main/Collection#butLast()"
            }
          },
          "clear": {
            "name": "clear",
            "label": "clear()",
            "id": "clear()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Stack with 0 size and no values.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Stack#clear()\">clear</a></code> can be used in <code><a href=\"/docs/latest@main/Stack#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2015,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#clear()"
          },
          "concat": {
            "name": "concat",
            "label": "concat()",
            "id": "concat()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Stack with other collections concatenated to this one.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2096,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "valuesOrCollections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 13,
                          "types": [
                            {
                              "k": 12,
                              "name": "Iterable",
                              "args": [
                                {
                                  "k": 11,
                                  "param": "C"
                                }
                              ]
                            },
                            {
                              "k": 11,
                              "param": "C"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "C"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#concat()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "concat()",
              "url": "/docs/latest@main/Collection.Indexed#concat()"
            }
          },
          "count": {
            "name": "count",
            "label": "count()",
            "id": "count()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4660,
                "type": {
                  "k": 6
                }
              },
              {
                "line": 4661,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Stack#count()",
            "inherited": {
              "interface": "Collection",
              "label": "count()",
              "url": "/docs/latest@main/Collection#count()"
            }
          },
          "countBy": {
            "name": "countBy",
            "label": "countBy()",
            "id": "countBy()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is not a lazy operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4672,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#countBy()",
            "inherited": {
              "interface": "Collection",
              "label": "countBy()",
              "url": "/docs/latest@main/Collection#countBy()"
            }
          },
          "entries": {
            "name": "entries",
            "label": "entries()",
            "id": "entries()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\" >[</span> key<span class=\"token punctuation\" >,</span> value <span class=\"token punctuation\" >]</span></code> tuples.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4208,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#entries()",
            "inherited": {
              "interface": "Collection",
              "label": "entries()",
              "url": "/docs/latest@main/Collection#entries()"
            }
          },
          "entrySeq": {
            "name": "entrySeq",
            "label": "entrySeq()",
            "id": "entrySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4228,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#entrySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "entrySeq()",
              "url": "/docs/latest@main/Collection#entrySeq()"
            }
          },
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3916,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Stack#equals()",
            "inherited": {
              "interface": "Collection",
              "label": "equals()",
              "url": "/docs/latest@main/Collection#equals()"
            }
          },
          "every": {
            "name": "every",
            "label": "every()",
            "id": "every()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4623,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Stack#every()",
            "inherited": {
              "interface": "Collection",
              "label": "every()",
              "url": "/docs/latest@main/Collection#every()"
            }
          },
          "filter": {
            "name": "filter",
            "label": "filter()",
            "id": "filter()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 2130,
                "typeParams": [
                  "F"
                ],
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "F"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              },
              {
                "line": 2134,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#filter()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "filter()",
              "url": "/docs/latest@main/Collection.Indexed#filter()"
            }
          },
          "filterNot": {
            "name": "filterNot",
            "label": "filterNot()",
            "id": "filterNot()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> d<span class=\"token punctuation\" >:</span> <span class=\"token number\" >4</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>filterNot<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map { \"a\": 1, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#filterNot()\">filterNot()</a></code> always returns a new instance, even if it results in\nnot filtering out any values.</p></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4296,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#filterNot()",
            "inherited": {
              "interface": "Collection",
              "label": "filterNot()",
              "url": "/docs/latest@main/Collection#filterNot()"
            }
          },
          "find": {
            "name": "find",
            "label": "find()",
            "id": "find()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4682,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#find()",
            "inherited": {
              "interface": "Collection",
              "label": "find()",
              "url": "/docs/latest@main/Collection#find()"
            }
          },
          "findEntry": {
            "name": "findEntry",
            "label": "findEntry()",
            "id": "findEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#findEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findEntry()",
              "url": "/docs/latest@main/Collection#findEntry()"
            }
          },
          "findIndex": {
            "name": "findIndex",
            "label": "findIndex()",
            "id": "findIndex()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first index in the Collection where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3702,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Stack#findIndex()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "findIndex()",
              "url": "/docs/latest@main/Collection.Indexed#findIndex()"
            }
          },
          "findKey": {
            "name": "findKey",
            "label": "findKey()",
            "id": "findKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4723,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#findKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findKey()",
              "url": "/docs/latest@main/Collection#findKey()"
            }
          },
          "findLast": {
            "name": "findLast",
            "label": "findLast()",
            "id": "findLast()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4693,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#findLast()",
            "inherited": {
              "interface": "Collection",
              "label": "findLast()",
              "url": "/docs/latest@main/Collection#findLast()"
            }
          },
          "findLastEntry": {
            "name": "findLastEntry",
            "label": "findLastEntry()",
            "id": "findLastEntry()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4714,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#findLastEntry()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastEntry()",
              "url": "/docs/latest@main/Collection#findLastEntry()"
            }
          },
          "findLastIndex": {
            "name": "findLastIndex",
            "label": "findLastIndex()",
            "id": "findLastIndex()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last index in the Collection where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3711,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "index",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Stack#findLastIndex()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "findLastIndex()",
              "url": "/docs/latest@main/Collection.Indexed#findLastIndex()"
            }
          },
          "findLastKey": {
            "name": "findLastKey",
            "label": "findLastKey()",
            "id": "findLastKey()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4733,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#findLastKey()",
            "inherited": {
              "interface": "Collection",
              "label": "findLastKey()",
              "url": "/docs/latest@main/Collection#findLastKey()"
            }
          },
          "first": {
            "name": "first",
            "label": "first()",
            "id": "first()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3977,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#first()",
            "inherited": {
              "interface": "Collection",
              "label": "first()",
              "url": "/docs/latest@main/Collection#first()"
            }
          },
          "flatMap": {
            "name": "flatMap",
            "label": "flatMap()",
            "id": "flatMap()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Flat-maps the Stack, returning a new Stack.</p>\n",
              "description": "<p>Similar to <code>stack<span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >.</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>flatten<span class=\"token punctuation\" >(</span><span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2118,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 12,
                        "name": "Iterable",
                        "args": [
                          {
                            "k": 11,
                            "param": "M"
                          }
                        ]
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#flatMap()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "flatMap()",
              "url": "/docs/latest@main/Collection.Indexed#flatMap()"
            }
          },
          "flatten": {
            "name": "flatten",
            "label": "flatten()",
            "id": "flatten()",
            "group": "Combination",
            "signatures": [
              {
                "line": 4560,
                "params": [
                  {
                    "name": "depth",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "line": 4562,
                "params": [
                  {
                    "name": "shallow",
                    "type": {
                      "k": 5
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#flatten()",
            "inherited": {
              "interface": "Collection",
              "label": "flatten()",
              "url": "/docs/latest@main/Collection#flatten()"
            }
          },
          "forEach": {
            "name": "forEach",
            "label": "forEach()",
            "id": "forEach()",
            "group": "Side effects",
            "doc": {
              "synopsis": "<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n",
              "description": "<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\" >false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4405,
                "params": [
                  {
                    "name": "sideEffect",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Stack#forEach()",
            "inherited": {
              "interface": "Collection",
              "label": "forEach()",
              "url": "/docs/latest@main/Collection#forEach()"
            }
          },
          "fromEntrySeq": {
            "name": "fromEntrySeq",
            "label": "fromEntrySeq()",
            "id": "fromEntrySeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>If this is a collection of [key, value] entry tuples, it will return a\nSeq.Keyed of those entries.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3542,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 2
                    },
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#fromEntrySeq()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "fromEntrySeq()",
              "url": "/docs/latest@main/Collection.Indexed#fromEntrySeq()"
            }
          },
          "get": {
            "name": "get",
            "label": "get()",
            "id": "get()",
            "group": "Reading values",
            "signatures": [
              {
                "line": 3527,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              },
              {
                "line": 3528,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#get()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "get()",
              "url": "/docs/latest@main/Collection.Indexed#get()"
            }
          },
          "getIn": {
            "name": "getIn",
            "label": "getIn()",
            "id": "getIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js\nCollection, and getIn() can access those values as well:</p></p>\n<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> deepData <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >]</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\ndeepData<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4010,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  },
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 2
                }
              }
            ],
            "url": "/docs/latest@main/Stack#getIn()",
            "inherited": {
              "interface": "Collection",
              "label": "getIn()",
              "url": "/docs/latest@main/Collection#getIn()"
            }
          },
          "groupBy": {
            "name": "groupBy",
            "label": "groupBy()",
            "id": "groupBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a <code><a href=\"/docs/latest@main/Collection.Keyed\">Collection.Keyed</a></code> of <code><span class=\"token qualifier\" >Collection</span><span class=\"token punctuation\" >.</span><span class=\"token qualifier\" >Keyeds</span></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n",
              "description": "<p>Note: This is always an eager operation.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> listOfMaps <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >0</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> v<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> groupsOfMaps <span class=\"token operator\" >=</span> listOfMaps<span class=\"token punctuation\" >.</span>groupBy<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'v'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Map {\n</span><span class=\"token comment\" spellcheck=\"true\">//   0: List [ Map{ \"v\": 0 }, Map { \"v\": 0 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   1: List [ Map{ \"v\": 1 }, Map { \"v\": 1 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">//   2: List [ Map{ \"v\": 2 } ],\n</span><span class=\"token comment\" spellcheck=\"true\">// }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4391,
                "typeParams": [
                  "G"
                ],
                "params": [
                  {
                    "name": "grouper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "G"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 11,
                      "param": "G"
                    },
                    {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 6
                        },
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#groupBy()",
            "inherited": {
              "interface": "Collection",
              "label": "groupBy()",
              "url": "/docs/latest@main/Collection#groupBy()"
            }
          },
          "has": {
            "name": "has",
            "label": "has()",
            "id": "has()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a key exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3961,
                "params": [
                  {
                    "name": "key",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Stack#has()",
            "inherited": {
              "interface": "Collection",
              "label": "has()",
              "url": "/docs/latest@main/Collection#has()"
            }
          },
          "hasIn": {
            "name": "hasIn",
            "label": "hasIn()",
            "id": "hasIn()",
            "group": "Reading deep values",
            "doc": {
              "synopsis": "<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4016,
                "params": [
                  {
                    "name": "searchKeyPath",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 2
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Stack#hasIn()",
            "inherited": {
              "interface": "Collection",
              "label": "hasIn()",
              "url": "/docs/latest@main/Collection#hasIn()"
            }
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "group": "Value equality",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Set,  List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>If two values have the same <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/List#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3942,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Stack#hashCode()",
            "inherited": {
              "interface": "Collection",
              "label": "hashCode()",
              "url": "/docs/latest@main/Collection#hashCode()"
            }
          },
          "includes": {
            "name": "includes",
            "label": "includes()",
            "id": "includes()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>True if a value exists within this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>, using <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code>\nto determine equality</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "alias",
                  "body": "contains"
                }
              ]
            },
            "signatures": [
              {
                "line": 3968,
                "params": [
                  {
                    "name": "value",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Stack#includes()",
            "inherited": {
              "interface": "Collection",
              "label": "includes()",
              "url": "/docs/latest@main/Collection#includes()"
            }
          },
          "indexOf": {
            "name": "indexOf",
            "label": "indexOf()",
            "id": "indexOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the first index at which a given value can be found in the\nCollection, or -1 if it is not present.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3690,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Stack#indexOf()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "indexOf()",
              "url": "/docs/latest@main/Collection.Indexed#indexOf()"
            }
          },
          "interleave": {
            "name": "interleave",
            "label": "interleave()",
            "id": "interleave()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a Collection of the same type with the provided <code><span class=\"t param\">collections</span></code>\ninterleaved into this collection.</p>\n",
              "description": "<p>The resulting Collection includes the first item from each, then the\nsecond from each, etc.</p>\n<!-- runkit:activate\n     { \"preamble\": \"require('immutable')\"}\n-->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>interleave<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, \"A\", 2, \"B\", 3, \"C\" ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>The shortest Collection stops interleave.</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { List } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>interleave<span class=\"token punctuation\" >(</span>\n  <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'X'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'Y'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'Z'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ 1, \"A\", \"X\", 2, \"B\", \"Y\" ]</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Since <code><a href=\"/docs/latest@main/List#interleave()\">interleave()</a></code> re-indexes values, it produces a complete copy,\nwhich has <code>O<span class=\"token punctuation\" >(</span>N<span class=\"token punctuation\" >)</span></code> complexity.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#interleave()\">interleave</a></code> <em>cannot</em> be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3586,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 11,
                              "param": "T"
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#interleave()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "interleave()",
              "url": "/docs/latest@main/Collection.Indexed#interleave()"
            }
          },
          "interpose": {
            "name": "interpose",
            "label": "interpose()",
            "id": "interpose()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Returns a Collection of the same type with <code><span class=\"t param\">separator</span></code> between each item\nin this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3550,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#interpose()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "interpose()",
              "url": "/docs/latest@main/Collection.Indexed#interpose()"
            }
          },
          "isEmpty": {
            "name": "isEmpty",
            "label": "isEmpty()",
            "id": "isEmpty()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Returns true if this Collection includes no values.</p>\n",
              "description": "<p>For some lazy <code><a href=\"/docs/latest@main/Seq\">Seq</a></code>, <code><a href=\"/docs/latest@main/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4648,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Stack#isEmpty()",
            "inherited": {
              "interface": "Collection",
              "label": "isEmpty()",
              "url": "/docs/latest@main/Collection#isEmpty()"
            }
          },
          "isSubset": {
            "name": "isSubset",
            "label": "isSubset()",
            "id": "isSubset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4827,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Stack#isSubset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSubset()",
              "url": "/docs/latest@main/Collection#isSubset()"
            }
          },
          "isSuperset": {
            "name": "isSuperset",
            "label": "isSuperset()",
            "id": "isSuperset()",
            "group": "Comparison",
            "doc": {
              "synopsis": "<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4832,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Stack#isSuperset()",
            "inherited": {
              "interface": "Collection",
              "label": "isSuperset()",
              "url": "/docs/latest@main/Collection#isSuperset()"
            }
          },
          "join": {
            "name": "join",
            "label": "join()",
            "id": "join()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\" >\",\"</span></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4640,
                "params": [
                  {
                    "name": "separator",
                    "type": {
                      "k": 7
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 7
                }
              }
            ],
            "url": "/docs/latest@main/Stack#join()",
            "inherited": {
              "interface": "Collection",
              "label": "join()",
              "url": "/docs/latest@main/Collection#join()"
            }
          },
          "keyOf": {
            "name": "keyOf",
            "label": "keyOf()",
            "id": "keyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4741,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#keyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "keyOf()",
              "url": "/docs/latest@main/Collection#keyOf()"
            }
          },
          "keySeq": {
            "name": "keySeq",
            "label": "keySeq()",
            "id": "keySeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4218,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 6
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#keySeq()",
            "inherited": {
              "interface": "Collection",
              "label": "keySeq()",
              "url": "/docs/latest@main/Collection#keySeq()"
            }
          },
          "keys": {
            "name": "keys",
            "label": "keys()",
            "id": "keys()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s keys.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4190,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 6
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#keys()",
            "inherited": {
              "interface": "Collection",
              "label": "keys()",
              "url": "/docs/latest@main/Collection#keys()"
            }
          },
          "last": {
            "name": "last",
            "label": "last()",
            "id": "last()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>In case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/latest@main/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3985,
                "typeParams": [
                  "NSV"
                ],
                "params": [
                  {
                    "name": "notSetValue",
                    "type": {
                      "k": 11,
                      "param": "NSV"
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 11,
                      "param": "NSV"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#last()",
            "inherited": {
              "interface": "Collection",
              "label": "last()",
              "url": "/docs/latest@main/Collection#last()"
            }
          },
          "lastIndexOf": {
            "name": "lastIndexOf",
            "label": "lastIndexOf()",
            "id": "lastIndexOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last index at which a given value can be found in the\nCollection, or -1 if it is not present.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3696,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/Stack#lastIndexOf()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "lastIndexOf()",
              "url": "/docs/latest@main/Collection.Indexed#lastIndexOf()"
            }
          },
          "lastKeyOf": {
            "name": "lastKeyOf",
            "label": "lastKeyOf()",
            "id": "lastKeyOf()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the last key associated with the search value, or undefined.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4746,
                "params": [
                  {
                    "name": "searchValue",
                    "type": {
                      "k": 11,
                      "param": "T"
                    }
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 6
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#lastKeyOf()",
            "inherited": {
              "interface": "Collection",
              "label": "lastKeyOf()",
              "url": "/docs/latest@main/Collection#lastKeyOf()"
            }
          },
          "map": {
            "name": "map",
            "label": "map()",
            "id": "map()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Stack with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n",
              "description": "<code class=\"codeBlock\"><span class=\"token qualifier\" >Stack</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token number\" >10</span> <span class=\"token operator\" >*</span> x<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Stack [ 10, 20 ]</span></code><p>Note: <code><a href=\"/docs/latest@main/Stack#map()\">map()</a></code> always returns a new instance, even if it produced the same\nvalue at every step.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2108,
                "typeParams": [
                  "M"
                ],
                "params": [
                  {
                    "name": "mapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "M"
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "M"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#map()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "map()",
              "url": "/docs/latest@main/Collection.Indexed#map()"
            }
          },
          "max": {
            "name": "max",
            "label": "max()",
            "id": "max()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4763,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#max()",
            "inherited": {
              "interface": "Collection",
              "label": "max()",
              "url": "/docs/latest@main/Collection#max()"
            }
          },
          "maxBy": {
            "name": "maxBy",
            "label": "maxBy()",
            "id": "maxBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>maxBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Max', avgHit: 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4780,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#maxBy()",
            "inherited": {
              "interface": "Collection",
              "label": "maxBy()",
              "url": "/docs/latest@main/Collection#maxBy()"
            }
          },
          "min": {
            "name": "min",
            "label": "min()",
            "id": "min()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n",
              "description": "<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/latest@main/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\" >&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/latest@main/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\" >&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4800,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#min()",
            "inherited": {
              "interface": "Collection",
              "label": "min()",
              "url": "/docs/latest@main/Collection#min()"
            }
          },
          "minBy": {
            "name": "minBy",
            "label": "minBy()",
            "id": "minBy()",
            "group": "Search for value",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> l <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Bob'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Max'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Lili'</span><span class=\"token punctuation\" >,</span> avgHit<span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span> <span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nl<span class=\"token punctuation\" >.</span>minBy<span class=\"token punctuation\" >(</span>i <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> i<span class=\"token punctuation\" >.</span>avgHit<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// will output { name: 'Bob', avgHit: 1 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4817,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#minBy()",
            "inherited": {
              "interface": "Collection",
              "label": "minBy()",
              "url": "/docs/latest@main/Collection#minBy()"
            }
          },
          "peek": {
            "name": "peek",
            "label": "peek()",
            "id": "peek()",
            "group": "Reading values",
            "doc": {
              "synopsis": "<p>Alias for <code><a href=\"/docs/latest@main/Stack#first()\">Stack.first()</a></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2006,
                "type": {
                  "k": 13,
                  "types": [
                    {
                      "k": 11,
                      "param": "T"
                    },
                    {
                      "k": 4
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#peek()"
          },
          "pop": {
            "name": "pop",
            "label": "pop()",
            "id": "pop()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Alias for <code><a href=\"/docs/latest@main/Stack#shift()\">Stack#shift</a></code> and is not equivalent to <code><a href=\"/docs/latest@main/List#pop()\">List#pop</a></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2059,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#pop()"
          },
          "push": {
            "name": "push",
            "label": "push()",
            "id": "push()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Alias for <code><a href=\"/docs/latest@main/Stack#unshift()\">Stack#unshift</a></code> and is not equivalent to <code><a href=\"/docs/latest@main/List#push()\">List#push</a></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2049,
                "params": [
                  {
                    "name": "values",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#push()"
          },
          "pushAll": {
            "name": "pushAll",
            "label": "pushAll()",
            "id": "pushAll()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Alias for <code><a href=\"/docs/latest@main/Stack#unshiftAll()\">Stack#unshiftAll</a></code>.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 2054,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#pushAll()"
          },
          "reduce": {
            "name": "reduce",
            "label": "reduce()",
            "id": "reduce()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4596,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4601,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#reduce()",
            "inherited": {
              "interface": "Collection",
              "label": "reduce()",
              "url": "/docs/latest@main/Collection#reduce()"
            }
          },
          "reduceRight": {
            "name": "reduceRight",
            "label": "reduceRight()",
            "id": "reduceRight()",
            "group": "Reducing a value",
            "signatures": [
              {
                "line": 4611,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 11,
                            "param": "R"
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  },
                  {
                    "name": "initialReduction",
                    "type": {
                      "k": 11,
                      "param": "R"
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              },
              {
                "line": 4616,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "reducer",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "reduction",
                          "type": {
                            "k": 13,
                            "types": [
                              {
                                "k": 11,
                                "param": "T"
                              },
                              {
                                "k": 11,
                                "param": "R"
                              }
                            ]
                          }
                        },
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#reduceRight()",
            "inherited": {
              "interface": "Collection",
              "label": "reduceRight()",
              "url": "/docs/latest@main/Collection#reduceRight()"
            }
          },
          "rest": {
            "name": "rest",
            "label": "rest()",
            "id": "rest()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4434,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#rest()",
            "inherited": {
              "interface": "Collection",
              "label": "rest()",
              "url": "/docs/latest@main/Collection#rest()"
            }
          },
          "reverse": {
            "name": "reverse",
            "label": "reverse()",
            "id": "reverse()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type in reverse order.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4304,
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#reverse()",
            "inherited": {
              "interface": "Collection",
              "label": "reverse()",
              "url": "/docs/latest@main/Collection#reverse()"
            }
          },
          "shift": {
            "name": "shift",
            "label": "shift()",
            "id": "shift()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Stack with a size ones less than this Stack, excluding\nthe first item in this Stack, shifting all other values to a lower index.</p>\n",
              "description": "<p>Note: this differs from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\" target=\"_blank\" rel=\"noopener\">Array#shift</a></code> because it returns a new\nStack rather than the removed value. Use <code><a href=\"/docs/latest@main/Stack#first()\">first()</a></code> or <code><a href=\"/docs/latest@main/Stack#peek()\">peek()</a></code> to get the\nfirst value in this Stack.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Stack#shift()\">shift</a></code> can be used in <code><a href=\"/docs/latest@main/Stack#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2044,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#shift()"
          },
          "size": {
            "name": "size",
            "label": "size",
            "id": "size",
            "line": 1999,
            "doc": {
              "synopsis": "<p>The number of items in this Stack.</p>\n",
              "description": "",
              "notes": []
            },
            "type": {
              "k": 6
            },
            "url": "/docs/latest@main/Stack#size"
          },
          "skip": {
            "name": "skip",
            "label": "skip()",
            "id": "skip()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4446,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#skip()",
            "inherited": {
              "interface": "Collection",
              "label": "skip()",
              "url": "/docs/latest@main/Collection#skip()"
            }
          },
          "skipLast": {
            "name": "skipLast",
            "label": "skipLast()",
            "id": "skipLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4452,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#skipLast()",
            "inherited": {
              "interface": "Collection",
              "label": "skipLast()",
              "url": "/docs/latest@main/Collection#skipLast()"
            }
          },
          "skipUntil": {
            "name": "skipUntil",
            "label": "skipUntil()",
            "id": "skipUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/hat/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4483,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#skipUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "skipUntil()",
              "url": "/docs/latest@main/Collection#skipUntil()"
            }
          },
          "skipWhile": {
            "name": "skipWhile",
            "label": "skipWhile()",
            "id": "skipWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>skipWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/g/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"cat\", \"hat\", \"god\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4466,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#skipWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "skipWhile()",
              "url": "/docs/latest@main/Collection#skipWhile()"
            }
          },
          "slice": {
            "name": "slice",
            "label": "slice()",
            "id": "slice()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n",
              "description": "<p>If begin is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> returns a Collection of the last two entries. If it is not\nprovided the new Collection will begin at the beginning of this Collection.</p>\n<p>If end is negative, it is offset from the end of the Collection. e.g.\n<code>slice<span class=\"token punctuation\" >(</span><span class=\"token number\" >0</span><span class=\"token punctuation\" >,</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span></code> returns a Collection of everything but the last entry. If\nit is not provided, the new Collection will continue through the end of\nthis Collection.</p>\n<p>If the requested slice is equivalent to the current Collection, then it\nwill return itself.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4428,
                "params": [
                  {
                    "name": "begin",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  },
                  {
                    "name": "end",
                    "type": {
                      "k": 6
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#slice()",
            "inherited": {
              "interface": "Collection",
              "label": "slice()",
              "url": "/docs/latest@main/Collection#slice()"
            }
          },
          "some": {
            "name": "some",
            "label": "some()",
            "id": "some()",
            "group": "Reducing a value",
            "doc": {
              "synopsis": "<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4631,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Stack#some()",
            "inherited": {
              "interface": "Collection",
              "label": "some()",
              "url": "/docs/latest@main/Collection#some()"
            }
          },
          "sort": {
            "name": "sort",
            "label": "sort()",
            "id": "sort()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n",
              "description": "<p>If a <code><span class=\"t param\">comparator</span></code> is not provided, a default comparator uses <code><span class=\"token operator\" >&lt;</span></code> and <code><span class=\"token operator\" >></span></code>.</p>\n<p><code>comparator<span class=\"token punctuation\" >(</span>valueA<span class=\"token punctuation\" >,</span> valueB<span class=\"token punctuation\" >)</span></code>:</p>\n<ul>\n<li>Returns <code><span class=\"token number\" >0</span></code> if the elements should not be swapped.</li>\n<li>Returns <code><span class=\"token operator\" >-</span><span class=\"token number\" >1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>\n<li>Returns <code><span class=\"token number\" >1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>\n<li>Is pure, i.e. it must always return the same value for the same pair\nof values.</li>\n</ul>\n<p>When sorting collections which have no defined order, their ordered\nequivalents will be returned. e.g. <code>map<span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> returns OrderedMap.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> <span class=\"token string\" >\"c\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >3</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >:</span> <span class=\"token number\" >2</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>sort<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >&lt;</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token operator\" >-</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >></span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n  <span class=\"token block-keyword\" >if</span> <span class=\"token punctuation\" >(</span>a <span class=\"token operator\" >===</span> b<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span> <span class=\"token keyword\" >return</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >;</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token comment\" spellcheck=\"true\">// OrderedMap { \"a\": 1, \"b\": 2, \"c\": 3 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sort()\">sort()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4339,
                "params": [
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#sort()",
            "inherited": {
              "interface": "Collection",
              "label": "sort()",
              "url": "/docs/latest@main/Collection#sort()"
            }
          },
          "sortBy": {
            "name": "sortBy",
            "label": "sortBy()",
            "id": "sortBy()",
            "group": "Sequence algorithms",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> beattles <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span>\n  <span class=\"token qualifier\" >John</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Lennon\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Paul</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"McCartney\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >George</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Harrison\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n  <span class=\"token qualifier\" >Ringo</span><span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"Starr\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nbeattles<span class=\"token punctuation\" >.</span>sortBy<span class=\"token punctuation\" >(</span>member <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> member<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: <code><a href=\"/docs/latest@main/List#sortBy()\">sortBy()</a></code> Always returns a new instance, even if the original was\nalready sorted.</p></p>\n<p>Note: This is always an eager operation.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4362,
                "typeParams": [
                  "C"
                ],
                "params": [
                  {
                    "name": "comparatorValueMapper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "C"
                      }
                    }
                  },
                  {
                    "name": "comparator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "valueA",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        },
                        {
                          "name": "valueB",
                          "type": {
                            "k": 11,
                            "param": "C"
                          }
                        }
                      ],
                      "type": {
                        "k": 6
                      }
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#sortBy()",
            "inherited": {
              "interface": "Collection",
              "label": "sortBy()",
              "url": "/docs/latest@main/Collection#sortBy()"
            }
          },
          "splice": {
            "name": "splice",
            "label": "splice()",
            "id": "splice()",
            "group": "Combination",
            "doc": {
              "synopsis": "<p>Splice returns a new indexed Collection by replacing a region of this\nCollection with new values. If values are not provided, it only skips the\nregion to be removed.</p>\n",
              "description": "<p><code><span class=\"t param\">index</span></code> may be a negative number, which indexes back from the end of the\nCollection. <code>s<span class=\"token punctuation\" >.</span>splice<span class=\"token punctuation\" >(</span><span class=\"token operator\" >-</span><span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span></code> splices after the second to last item.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'a'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'b'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'c'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'d'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>splice<span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'q'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'r'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'s'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"a\", \"q\", \"r\", \"s\", \"d\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Since <code><a href=\"/docs/latest@main/List#splice()\">splice()</a></code> re-indexes values, it produces a complete copy, which\nhas <code>O<span class=\"token punctuation\" >(</span>N<span class=\"token punctuation\" >)</span></code> complexity.</p>\n<p>Note: <code><a href=\"/docs/latest@main/List#splice()\">splice</a></code> <em>cannot</em> be used in <code><a href=\"/docs/latest@main/List#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 3608,
                "params": [
                  {
                    "name": "index",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "removeNum",
                    "type": {
                      "k": 6
                    }
                  },
                  {
                    "name": "values",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#splice()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "splice()",
              "url": "/docs/latest@main/Collection.Indexed#splice()"
            }
          },
          "take": {
            "name": "take",
            "label": "take()",
            "id": "take()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4492,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#take()",
            "inherited": {
              "interface": "Collection",
              "label": "take()",
              "url": "/docs/latest@main/Collection#take()"
            }
          },
          "takeLast": {
            "name": "takeLast",
            "label": "takeLast()",
            "id": "takeLast()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4498,
                "params": [
                  {
                    "name": "amount",
                    "type": {
                      "k": 6
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#takeLast()",
            "inherited": {
              "interface": "Collection",
              "label": "takeLast()",
              "url": "/docs/latest@main/Collection#takeLast()"
            }
          },
          "takeUntil": {
            "name": "takeUntil",
            "label": "takeUntil()",
            "id": "takeUntil()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeUntil<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/at/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4529,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#takeUntil()",
            "inherited": {
              "interface": "Collection",
              "label": "takeUntil()",
              "url": "/docs/latest@main/Collection#takeUntil()"
            }
          },
          "takeWhile": {
            "name": "takeWhile",
            "label": "takeWhile()",
            "id": "takeWhile()",
            "group": "Creating subsets",
            "doc": {
              "synopsis": "<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n",
              "description": "<!-- runkit:activate -->\n<p><code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'hat'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'god'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>takeWhile<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> x<span class=\"token punctuation\" >.</span>match<span class=\"token punctuation\" >(</span><span class=\"token regex\" >/o/</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// List [ \"dog\", \"frog\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4512,
                "params": [
                  {
                    "name": "predicate",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "key",
                          "type": {
                            "k": 6
                          }
                        },
                        {
                          "name": "iter",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 5
                      }
                    }
                  },
                  {
                    "name": "context",
                    "type": {
                      "k": 2
                    },
                    "optional": true
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#takeWhile()",
            "inherited": {
              "interface": "Collection",
              "label": "takeWhile()",
              "url": "/docs/latest@main/Collection#takeWhile()"
            }
          },
          "toArray": {
            "name": "toArray",
            "label": "toArray()",
            "id": "toArray()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this collection to an Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3516,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toArray()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "toArray()",
              "url": "/docs/latest@main/Collection.Indexed#toArray()"
            }
          },
          "toIndexedSeq": {
            "name": "toIndexedSeq",
            "label": "toIndexedSeq()",
            "id": "toIndexedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4174,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toIndexedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toIndexedSeq()",
              "url": "/docs/latest@main/Collection#toIndexedSeq()"
            }
          },
          "toJS": {
            "name": "toJS",
            "label": "toJS()",
            "id": "toJS()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Deeply converts this Indexed collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3506,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toJS()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "toJS()",
              "url": "/docs/latest@main/Collection.Indexed#toJS()"
            }
          },
          "toJSON": {
            "name": "toJSON",
            "label": "toJSON()",
            "id": "toJSON()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Indexed collection to equivalent native JavaScript Array.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3511,
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toJSON()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "toJSON()",
              "url": "/docs/latest@main/Collection.Indexed#toJSON()"
            }
          },
          "toKeyedSeq": {
            "name": "toKeyedSeq",
            "label": "toKeyedSeq()",
            "id": "toKeyedSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n",
              "description": "<p>This is useful if you want to operate on an\nCollection.Indexed and preserve the [index, value] pairs.</p>\n<p>The returned Seq will have identical iteration order as\nthis Collection.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> indexedSeq <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'A'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'C'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"A\", \"B\", \"C\" ]\n</span>indexedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq [ \"B\" ]\n</span><span class=\"token keyword\" >const</span> keyedSeq <span class=\"token operator\" >=</span> indexedSeq<span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 0: \"A\", 1: \"B\", 2: \"C\" }\n</span>keyedSeq<span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>v <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> v <span class=\"token operator\" >===</span> <span class=\"token string\" >'B'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Seq { 1: \"B\" }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4169,
                "type": {
                  "k": 12,
                  "name": "Seq.Keyed",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Keyed"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toKeyedSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toKeyedSeq()",
              "url": "/docs/latest@main/Collection#toKeyedSeq()"
            }
          },
          "toList": {
            "name": "toList",
            "label": "toList()",
            "id": "toList()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a List, discarding keys.</p>\n",
              "description": "<p>This is similar to <code><a href=\"/docs/latest@main/List\">List(collection)</a></code>, but provided to allow for chained\nexpressions. However, when called on <code><a href=\"/docs/latest@main/Map\">Map</a></code> or other keyed collections,\n<code>collection<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> discards the keys and creates a list of only the\nvalues, whereas <code><a href=\"/docs/latest@main/List\">List(collection)</a></code> creates a list of entry tuples.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >var</span> myMap <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Apple'</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Banana'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span>myMap<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ [ \"a\", \"Apple\" ], [ \"b\", \"Banana\" ] ]\n</span>myMap<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// List [ \"Apple\", \"Banana\" ]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
              "notes": []
            },
            "signatures": [
              {
                "line": 4128,
                "type": {
                  "k": 12,
                  "name": "List",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/List"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toList()",
            "inherited": {
              "interface": "Collection",
              "label": "toList()",
              "url": "/docs/latest@main/Collection#toList()"
            }
          },
          "toMap": {
            "name": "toMap",
            "label": "toMap()",
            "id": "toMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4084,
                "type": {
                  "k": 12,
                  "name": "Map",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Map"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toMap()",
              "url": "/docs/latest@main/Collection#toMap()"
            }
          },
          "toObject": {
            "name": "toObject",
            "label": "toObject()",
            "id": "toObject()",
            "group": "Conversion to JavaScript types",
            "doc": {
              "synopsis": "<p>Shallowly converts this Collection to an Object.</p>\n",
              "description": "<p>Converts keys to Strings.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4074,
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "T"
                      }
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toObject()",
            "inherited": {
              "interface": "Collection",
              "label": "toObject()",
              "url": "/docs/latest@main/Collection#toObject()"
            }
          },
          "toOrderedMap": {
            "name": "toOrderedMap",
            "label": "toOrderedMap()",
            "id": "toOrderedMap()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>toKeyedSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4092,
                "type": {
                  "k": 12,
                  "name": "OrderedMap",
                  "args": [
                    {
                      "k": 6
                    },
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedMap"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toOrderedMap()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedMap()",
              "url": "/docs/latest@main/Collection#toOrderedMap()"
            }
          },
          "toOrderedSet": {
            "name": "toOrderedSet",
            "label": "toOrderedSet()",
            "id": "toOrderedSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >.</span>valueSeq<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4110,
                "type": {
                  "k": 12,
                  "name": "OrderedSet",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/OrderedSet"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toOrderedSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toOrderedSet()",
              "url": "/docs/latest@main/Collection#toOrderedSet()"
            }
          },
          "toSeq": {
            "name": "toSeq",
            "label": "toSeq()",
            "id": "toSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns Seq.Indexed.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 3536,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toSeq()",
            "inherited": {
              "interface": "Collection.Indexed",
              "label": "toSeq()",
              "url": "/docs/latest@main/Collection.Indexed#toSeq()"
            }
          },
          "toSet": {
            "name": "toSet",
            "label": "toSet()",
            "id": "toSet()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4101,
                "type": {
                  "k": 12,
                  "name": "Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Set"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toSet()",
            "inherited": {
              "interface": "Collection",
              "label": "toSet()",
              "url": "/docs/latest@main/Collection#toSet()"
            }
          },
          "toSetSeq": {
            "name": "toSetSeq",
            "label": "toSetSeq()",
            "id": "toSetSeq()",
            "group": "Conversion to Seq",
            "doc": {
              "synopsis": "<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4179,
                "type": {
                  "k": 12,
                  "name": "Seq.Set",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Set"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toSetSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "toSetSeq()",
              "url": "/docs/latest@main/Collection#toSetSeq()"
            }
          },
          "toStack": {
            "name": "toStack",
            "label": "toStack()",
            "id": "toStack()",
            "group": "Conversion to Collections",
            "doc": {
              "synopsis": "<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n",
              "description": "<p>Note: This is equivalent to <code><a href=\"/docs/latest@main/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4137,
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#toStack()",
            "inherited": {
              "interface": "Collection",
              "label": "toStack()",
              "url": "/docs/latest@main/Collection#toStack()"
            }
          },
          "unshift": {
            "name": "unshift",
            "label": "unshift()",
            "id": "unshift()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Returns a new Stack with the provided <code><span class=\"t param\">values</span></code> prepended, shifting other\nvalues ahead to higher indices.</p>\n",
              "description": "<p>This is very efficient for Stack.</p>\n<p>Note: <code><a href=\"/docs/latest@main/Stack#unshift()\">unshift</a></code> can be used in <code><a href=\"/docs/latest@main/Stack#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2025,
                "params": [
                  {
                    "name": "values",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#unshift()"
          },
          "unshiftAll": {
            "name": "unshiftAll",
            "label": "unshiftAll()",
            "id": "unshiftAll()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>Like <code><a href=\"/docs/latest@main/Stack#unshift()\">Stack#unshift</a></code>, but accepts a collection rather than varargs.</p>\n",
              "description": "<p>Note: <code><a href=\"/docs/latest@main/Stack#unshiftAll()\">unshiftAll</a></code> can be used in <code><a href=\"/docs/latest@main/Stack#withMutations()\">withMutations</a></code>.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 2032,
                "params": [
                  {
                    "name": "iter",
                    "type": {
                      "k": 12,
                      "name": "Iterable",
                      "args": [
                        {
                          "k": 11,
                          "param": "T"
                        }
                      ]
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#unshiftAll()"
          },
          "update": {
            "name": "update",
            "label": "update()",
            "id": "update()",
            "group": "Persistent changes",
            "doc": {
              "synopsis": "<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n",
              "description": "<p>For example, to sum a Seq after mapping and filtering:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Seq</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n\n<p><span class=\"token block-keyword\" >function</span> sum<span class=\"token punctuation\" >(</span>collection<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> collection<span class=\"token punctuation\" >.</span>reduce<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >,</span> x<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> sum <span class=\"token operator\" >+</span> x<span class=\"token punctuation\" >,</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span></p>\n<p><span class=\"token qualifier\" >Seq</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>map<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >+</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>filter<span class=\"token punctuation\" >(</span>x <span class=\"token operator\" >=</span><span class=\"token operator\" >&gt;</span> x <span class=\"token operator\" >%</span> <span class=\"token number\" >2</span> <span class=\"token operator\" >===</span> <span class=\"token number\" >0</span><span class=\"token punctuation\" >)</span>\n  <span class=\"token punctuation\" >.</span>update<span class=\"token punctuation\" >(</span>sum<span class=\"token punctuation\" >)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 6</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code></p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4041,
                "typeParams": [
                  "R"
                ],
                "params": [
                  {
                    "name": "updater",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "R"
                      }
                    }
                  }
                ],
                "type": {
                  "k": 11,
                  "param": "R"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#update()",
            "inherited": {
              "interface": "Collection",
              "label": "update()",
              "url": "/docs/latest@main/Collection#update()"
            }
          },
          "valueSeq": {
            "name": "valueSeq",
            "label": "valueSeq()",
            "id": "valueSeq()",
            "group": "Collections (Seq)",
            "doc": {
              "synopsis": "<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n",
              "description": "",
              "notes": []
            },
            "signatures": [
              {
                "line": 4223,
                "type": {
                  "k": 12,
                  "name": "Seq.Indexed",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ],
                  "url": "/docs/latest@main/Seq.Indexed"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#valueSeq()",
            "inherited": {
              "interface": "Collection",
              "label": "valueSeq()",
              "url": "/docs/latest@main/Collection#valueSeq()"
            }
          },
          "values": {
            "name": "values",
            "label": "values()",
            "id": "values()",
            "group": "Iterators",
            "doc": {
              "synopsis": "<p>An iterator of this <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>&#39;s values.</p>\n",
              "description": "<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/latest@main/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4199,
                "type": {
                  "k": 12,
                  "name": "IterableIterator",
                  "args": [
                    {
                      "k": 11,
                      "param": "T"
                    }
                  ]
                }
              }
            ],
            "url": "/docs/latest@main/Stack#values()",
            "inherited": {
              "interface": "Collection",
              "label": "values()",
              "url": "/docs/latest@main/Collection#values()"
            }
          },
          "wasAltered": {
            "name": "wasAltered",
            "label": "wasAltered()",
            "id": "wasAltered()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#wasAltered()\">Map#wasAltered</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2084,
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/Stack#wasAltered()"
          },
          "withMutations": {
            "name": "withMutations",
            "label": "withMutations()",
            "id": "withMutations()",
            "group": "Transient changes",
            "doc": {
              "synopsis": "<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/latest@main/Stack#withMutations()\">withMutations</a></code>! Check the documentation for each method to see if it\nmentions being safe to use in <code><a href=\"/docs/latest@main/Stack#withMutations()\">withMutations</a></code>.</p>\n",
              "description": "",
              "notes": [
                {
                  "name": "see",
                  "body": "<p><code><a href=\"/docs/latest@main/Map#withMutations()\">Map#withMutations</a></code></p>\n"
                }
              ]
            },
            "signatures": [
              {
                "line": 2070,
                "params": [
                  {
                    "name": "mutator",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "mutable",
                          "type": {
                            "k": 3
                          }
                        }
                      ],
                      "type": {
                        "k": 2
                      }
                    }
                  }
                ],
                "type": {
                  "k": 3
                }
              }
            ],
            "url": "/docs/latest@main/Stack#withMutations()"
          },
          "zip": {
            "name": "zip",
            "label": "zip()",
            "id": "zip()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 2150,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              },
              {
                "line": 2151,
                "typeParams": [
                  "U",
                  "V"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "other2",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              },
              {
                "line": 2155,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#zip()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "zip()",
              "url": "/docs/latest@main/Collection.Indexed#zip()"
            }
          },
          "zipAll": {
            "name": "zipAll",
            "label": "zipAll()",
            "id": "zipAll()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 2173,
                "typeParams": [
                  "U"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              },
              {
                "line": 2174,
                "typeParams": [
                  "U",
                  "V"
                ],
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "other2",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 15,
                      "types": [
                        {
                          "k": 11,
                          "param": "T"
                        },
                        {
                          "k": 11,
                          "param": "U"
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ]
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              },
              {
                "line": 2178,
                "params": [
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 2
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#zipAll()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "zipAll()",
              "url": "/docs/latest@main/Collection.Indexed#zipAll()"
            }
          },
          "zipWith": {
            "name": "zipWith",
            "label": "zipWith()",
            "id": "zipWith()",
            "group": "Sequence algorithms",
            "signatures": [
              {
                "line": 2191,
                "typeParams": [
                  "U",
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "otherValue",
                          "type": {
                            "k": 11,
                            "param": "U"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "otherCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              },
              {
                "line": 2195,
                "typeParams": [
                  "U",
                  "V",
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "value",
                          "type": {
                            "k": 11,
                            "param": "T"
                          }
                        },
                        {
                          "name": "otherValue",
                          "type": {
                            "k": 11,
                            "param": "U"
                          }
                        },
                        {
                          "name": "thirdValue",
                          "type": {
                            "k": 11,
                            "param": "V"
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "otherCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "U"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  },
                  {
                    "name": "thirdCollection",
                    "type": {
                      "k": 12,
                      "name": "Collection",
                      "args": [
                        {
                          "k": 2
                        },
                        {
                          "k": 11,
                          "param": "V"
                        }
                      ],
                      "url": "/docs/latest@main/Collection"
                    }
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              },
              {
                "line": 2200,
                "typeParams": [
                  "Z"
                ],
                "params": [
                  {
                    "name": "zipper",
                    "type": {
                      "k": 10,
                      "params": [
                        {
                          "name": "values",
                          "type": {
                            "k": 12,
                            "name": "Array",
                            "args": [
                              {
                                "k": 2
                              }
                            ]
                          },
                          "varArgs": true
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "Z"
                      }
                    }
                  },
                  {
                    "name": "collections",
                    "type": {
                      "k": 12,
                      "name": "Array",
                      "args": [
                        {
                          "k": 12,
                          "name": "Collection",
                          "args": [
                            {
                              "k": 2
                            },
                            {
                              "k": 2
                            }
                          ]
                        }
                      ]
                    },
                    "varArgs": true
                  }
                ],
                "type": {
                  "k": 12,
                  "name": "Stack",
                  "args": [
                    {
                      "k": 11,
                      "param": "Z"
                    }
                  ],
                  "url": "/docs/latest@main/Stack"
                }
              }
            ],
            "url": "/docs/latest@main/Stack#zipWith()",
            "overrides": {
              "interface": "Collection.Indexed",
              "label": "zipWith()",
              "url": "/docs/latest@main/Collection.Indexed#zipWith()"
            }
          }
        },
        "line": 1995,
        "typeParams": [
          "T"
        ],
        "extends": [
          {
            "k": 12,
            "name": "Collection.Indexed",
            "args": [
              {
                "k": 11,
                "param": "T"
              }
            ],
            "url": "/docs/latest@main/Collection.Indexed"
          }
        ]
      },
      "label": "Stack",
      "url": "/docs/latest@main/Stack"
    },
    "ValueObject": {
      "qualifiedName": "ValueObject",
      "interface": {
        "members": {
          "equals": {
            "name": "equals",
            "label": "equals()",
            "id": "equals()",
            "doc": {
              "synopsis": "<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code>.</p>\n",
              "description": "<p>Note: This is equivalent to <code><span class=\"token qualifier\" >Immutable</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span><span class=\"token var\" >this</span><span class=\"token punctuation\" >,</span> other<span class=\"token punctuation\" >)</span></code>, but provided to\nallow for chained expressions.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4846,
                "params": [
                  {
                    "name": "other",
                    "type": {
                      "k": 2
                    }
                  }
                ],
                "type": {
                  "k": 5
                }
              }
            ],
            "url": "/docs/latest@main/ValueObject#equals()"
          },
          "hashCode": {
            "name": "hashCode",
            "label": "hashCode()",
            "id": "hashCode()",
            "doc": {
              "synopsis": "<p>Computes and returns the hashed identity for this Collection.</p>\n",
              "description": "<p>The <code><a href=\"/docs/latest@main/ValueObject#hashCode()\">hashCode</a></code> of a Collection is used to determine potential equality,\nand is used when adding this to a <code><a href=\"/docs/latest@main/Set\">Set</a></code> or as a key in a <code><a href=\"/docs/latest@main/Map\">Map</a></code>, enabling\nlookup via a different instance.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Set</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> a <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> b <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >3</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notStrictEqual<span class=\"token punctuation\" >(</span>a<span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// different instances\n</span><span class=\"token keyword\" >const</span> <span class=\"token keyword\" >set</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> a <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token keyword\" >set</span><span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>b<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Note: hashCode() MUST return a Uint32 number. The easiest way to\nguarantee this is to return <code>myHash <span class=\"token operator\" >|</span> <span class=\"token number\" >0</span></code> from a custom implementation.</p>\n<p>If two values have the same <code><a href=\"/docs/latest@main/ValueObject#hashCode()\">hashCode</a></code>, they are <a href=\"https://en.wikipedia.org/wiki/Collision_(computer_science)\">not guaranteed\nto be equal</a>. If two values have different <code><a href=\"/docs/latest@main/ValueObject#hashCode()\">hashCode</a></code>s,\nthey must not be equal.</p>\n<p>Note: <code><a href=\"/docs/latest@main/ValueObject#hashCode()\">hashCode()</a></code> is not guaranteed to always be called before\n<code><a href=\"/docs/latest@main/ValueObject#equals()\">equals()</a></code>. Most but not all Immutable.js collections use hash codes to\norganize their internal data structures, while all Immutable.js\ncollections use equality during lookups.</p>\n",
              "notes": []
            },
            "signatures": [
              {
                "line": 4879,
                "type": {
                  "k": 6
                }
              }
            ],
            "url": "/docs/latest@main/ValueObject#hashCode()"
          }
        },
        "line": 4838,
        "doc": {
          "synopsis": "<p>The interface to fulfill to qualify as a Value Object.</p>\n",
          "description": "",
          "notes": []
        }
      },
      "label": "ValueObject",
      "url": "/docs/latest@main/ValueObject"
    },
    "fromJS": {
      "qualifiedName": "fromJS",
      "call": {
        "name": "fromJS",
        "label": "fromJS()",
        "id": "fromJS()",
        "doc": {
          "synopsis": "<p>Deeply converts plain JS objects and arrays to Immutable Maps and Lists.</p>\n",
          "description": "<p><code><a href=\"/docs/latest@main/fromJS()\">fromJS</a></code> will convert Arrays and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects\" title=\"Working with array-like objects\">array-like objects</a> to a List, and\nplain objects (without a custom prototype) to a Map. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol\" title=\"The iterable protocol\">Iterable objects</a>\nmay be converted to List, Map, or Set.</p>\n<p>If a <code><span class=\"t param\">reviver</span></code> is optionally provided, it will be called with every\ncollection as a Seq (beginning with the most nested collections\nand proceeding to the top-level collection itself), along with the key\nreferring to each collection and the parent JS object provided as <code><span class=\"token var\" >this</span></code>.\nFor the top level, object, the key will be <code><span class=\"token string\" >\"\"</span></code>. This <code><span class=\"t param\">reviver</span></code> is expected\nto return a new Immutable Collection, allowing for custom conversions from\ndeep JS objects. Finally, a <code>path</code> is provided which is the sequence of\nkeys to this value from the starting value.</p>\n<p><code><span class=\"t param\">reviver</span></code> acts similarly to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter\" title=\"Using the reviver parameter\">same parameter in <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\" target=\"_blank\" rel=\"noopener\">JSON.parse</a></code></a>.</p>\n<p>If <code><span class=\"t param\">reviver</span></code> is not provided, the default behavior will convert Objects\ninto Maps and Arrays into Lists like so:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> fromJS<span class=\"token punctuation\" >,</span> isKeyed <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  <span class=\"token keyword\" >return</span> isKeyed<span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >?</span> value<span class=\"token punctuation\" >.</span>toMap<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >:</span> value<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Accordingly, this example converts native JS data to OrderedMap and List:</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> fromJS<span class=\"token punctuation\" >,</span> isKeyed <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\nfromJS<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token block-keyword\" >function</span> <span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >,</span> path<span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >{</span>\n  console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >,</span> value<span class=\"token punctuation\" >,</span> path<span class=\"token punctuation\" >)</span>\n  <span class=\"token keyword\" >return</span> isKeyed<span class=\"token punctuation\" >(</span>value<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >?</span> value<span class=\"token punctuation\" >.</span>toOrderedMap<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span> <span class=\"token punctuation\" >:</span> value<span class=\"token punctuation\" >.</span>toList<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span>\n<span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n\n<span class=\"token operator\" >></span> <span class=\"token string\" >\"b\"</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span> <span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >\"b\"</span> <span class=\"token punctuation\" >]</span>\n<span class=\"token operator\" >></span> <span class=\"token string\" >\"a\"</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span> <span class=\"token string\" >\"a\"</span> <span class=\"token punctuation\" >]</span>\n<span class=\"token operator\" >></span> <span class=\"token string\" >\"\"</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span>a<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span>b<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >[</span><span class=\"token number\" >10</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >20</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >30</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >40</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Keep in mind, when using JS objects to construct Immutable Maps, that\nJavaScript Object properties are always strings, even if written in a\nquote-less shorthand, while Immutable Maps accept keys of any type.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >let</span> obj <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >:</span> <span class=\"token string\" >\"one\"</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token qualifier\" >Object</span><span class=\"token punctuation\" >.</span>keys<span class=\"token punctuation\" >(</span>obj<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// [ \"1\" ]\n</span>assert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span>obj<span class=\"token punctuation\" >[</span><span class=\"token string\" >\"1\"</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> obj<span class=\"token punctuation\" >[</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// \"one\" === \"one\"\n</span>\n<span class=\"token keyword\" >let</span> map <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span>obj<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nassert<span class=\"token punctuation\" >.</span>notEqual<span class=\"token punctuation\" >(</span>map<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >\"1\"</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> map<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token number\" >1</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// \"one\" !== undefined</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p>Property access for JavaScript Objects first converts the key to a string,\nbut since Immutable Map keys can be of any type the argument to <code><a href=\"/docs/latest@main/get()\">get()</a></code> is\nnot altered.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 4952,
            "params": [
              {
                "name": "jsValue",
                "type": {
                  "k": 2
                }
              },
              {
                "name": "reviver",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "key",
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 7
                          },
                          {
                            "k": 6
                          }
                        ]
                      }
                    },
                    {
                      "name": "sequence",
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 12,
                            "name": "Collection.Keyed",
                            "args": [
                              {
                                "k": 7
                              },
                              {
                                "k": 2
                              }
                            ]
                          },
                          {
                            "k": 12,
                            "name": "Collection.Indexed",
                            "args": [
                              {
                                "k": 2
                              }
                            ]
                          }
                        ]
                      }
                    },
                    {
                      "name": "path",
                      "type": {
                        "k": 12,
                        "name": "Array",
                        "args": [
                          {
                            "k": 13,
                            "types": [
                              {
                                "k": 7
                              },
                              {
                                "k": 6
                              }
                            ]
                          }
                        ]
                      },
                      "optional": true
                    }
                  ],
                  "type": {
                    "k": 2
                  }
                },
                "optional": true
              }
            ],
            "type": {
              "k": 12,
              "name": "Collection",
              "args": [
                {
                  "k": 2
                },
                {
                  "k": 2
                }
              ],
              "url": "/docs/latest@main/Collection"
            }
          }
        ],
        "url": "/docs/latest@main/fromJS()"
      },
      "label": "fromJS()",
      "url": "/docs/latest@main/fromJS()"
    },
    "get": {
      "qualifiedName": "get",
      "call": {
        "name": "get",
        "label": "get()",
        "id": "get()",
        "signatures": [
          {
            "line": 5198,
            "typeParams": [
              "K",
              "V"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              }
            ],
            "type": {
              "k": 13,
              "types": [
                {
                  "k": 11,
                  "param": "V"
                },
                {
                  "k": 4
                }
              ]
            }
          },
          {
            "line": 5199,
            "typeParams": [
              "K",
              "V",
              "NSV"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Collection",
                  "args": [
                    {
                      "k": 11,
                      "param": "K"
                    },
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ],
                  "url": "/docs/latest@main/Collection"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 11,
                  "param": "NSV"
                }
              }
            ],
            "type": {
              "k": 13,
              "types": [
                {
                  "k": 11,
                  "param": "V"
                },
                {
                  "k": 11,
                  "param": "NSV"
                }
              ]
            }
          },
          {
            "line": 5204,
            "typeParams": [
              "TProps",
              "K"
            ],
            "params": [
              {
                "name": "record",
                "type": {
                  "k": 12,
                  "name": "Record",
                  "args": [
                    {
                      "k": 11,
                      "param": "TProps"
                    }
                  ],
                  "url": "/docs/latest@main/Record"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 16,
              "type": {
                "k": 11,
                "param": "TProps"
              },
              "index": {
                "k": 11,
                "param": "K"
              }
            }
          },
          {
            "line": 5209,
            "typeParams": [
              "V"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ]
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 6
                }
              }
            ],
            "type": {
              "k": 13,
              "types": [
                {
                  "k": 11,
                  "param": "V"
                },
                {
                  "k": 4
                }
              ]
            }
          },
          {
            "line": 5210,
            "typeParams": [
              "V",
              "NSV"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ]
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 6
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 11,
                  "param": "NSV"
                }
              }
            ],
            "type": {
              "k": 13,
              "types": [
                {
                  "k": 11,
                  "param": "V"
                },
                {
                  "k": 11,
                  "param": "NSV"
                }
              ]
            }
          },
          {
            "line": 5215,
            "typeParams": [
              "C",
              "K"
            ],
            "params": [
              {
                "name": "object",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 16,
              "type": {
                "k": 11,
                "param": "C"
              },
              "index": {
                "k": 11,
                "param": "K"
              }
            }
          },
          {
            "line": 5220,
            "typeParams": [
              "V"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 7
                }
              }
            ],
            "type": {
              "k": 13,
              "types": [
                {
                  "k": 11,
                  "param": "V"
                },
                {
                  "k": 4
                }
              ]
            }
          },
          {
            "line": 5221,
            "typeParams": [
              "V",
              "NSV"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 8,
                  "members": [
                    {
                      "index": true,
                      "params": [
                        {
                          "name": "key",
                          "type": {
                            "k": 7
                          }
                        }
                      ],
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ]
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 7
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 11,
                  "param": "NSV"
                }
              }
            ],
            "type": {
              "k": 13,
              "types": [
                {
                  "k": 11,
                  "param": "V"
                },
                {
                  "k": 11,
                  "param": "NSV"
                }
              ]
            }
          }
        ],
        "url": "/docs/latest@main/get()"
      },
      "label": "get()",
      "url": "/docs/latest@main/get()"
    },
    "getIn": {
      "qualifiedName": "getIn",
      "call": {
        "name": "getIn",
        "label": "getIn()",
        "id": "getIn()",
        "doc": {
          "synopsis": "<p>Returns the value at the provided key path starting at the provided\ncollection, or notSetValue if the key path is not defined.</p>\n",
          "description": "<p>A functional alternative to <code>collection<span class=\"token punctuation\" >.</span>getIn<span class=\"token punctuation\" >(</span>keypath<span class=\"token punctuation\" >)</span></code> which will also\nwork with plain Objects and Arrays.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> getIn <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\ngetIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'z'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 123\n</span>getIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'q'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'p'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'ifNotSet'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// 'ifNotSet'</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5410,
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 2
                }
              },
              {
                "name": "keyPath",
                "type": {
                  "k": 12,
                  "name": "Iterable",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 2
                },
                "optional": true
              }
            ],
            "type": {
              "k": 2
            }
          }
        ],
        "url": "/docs/latest@main/getIn()"
      },
      "label": "getIn()",
      "url": "/docs/latest@main/getIn()"
    },
    "has": {
      "qualifiedName": "has",
      "call": {
        "name": "has",
        "label": "has()",
        "id": "has()",
        "doc": {
          "synopsis": "<p>Returns true if the key is defined in the provided collection.</p>\n",
          "description": "<p>A functional alternative to <code>collection<span class=\"token punctuation\" >.</span>has<span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >)</span></code> which will also work with\nplain Objects and Arrays as an alternative for\n<code>collection<span class=\"token punctuation\" >.</span>hasOwnProperty<span class=\"token punctuation\" >(</span>key<span class=\"token punctuation\" >)</span></code>.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> has <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\nhas<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >2</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>has<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span> <span class=\"token string\" >'dog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'frog'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'cat'</span> <span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >5</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>has<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >456</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'x'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>has<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >456</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'z'</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// false</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5243,
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 8
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/has()"
      },
      "label": "has()",
      "url": "/docs/latest@main/has()"
    },
    "hasIn": {
      "qualifiedName": "hasIn",
      "call": {
        "name": "hasIn",
        "label": "hasIn()",
        "id": "hasIn()",
        "doc": {
          "synopsis": "<p>Returns true if the key path is defined in the provided collection.</p>\n",
          "description": "<p>A functional alternative to <code>collection<span class=\"token punctuation\" >.</span>hasIn<span class=\"token punctuation\" >(</span>keypath<span class=\"token punctuation\" >)</span></code> which will also\nwork with plain Objects and Arrays.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> hasIn <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\nhasIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'z'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>hasIn<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'q'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'p'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// false</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5429,
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 2
                }
              },
              {
                "name": "keyPath",
                "type": {
                  "k": 12,
                  "name": "Iterable",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/hasIn()"
      },
      "label": "hasIn()",
      "url": "/docs/latest@main/hasIn()"
    },
    "hash": {
      "qualifiedName": "hash",
      "call": {
        "name": "hash",
        "label": "hash()",
        "id": "hash()",
        "doc": {
          "synopsis": "<p>The <code><a href=\"/docs/latest@main/hash()\">hash()</a></code> function is an important part of how Immutable determines if\ntwo values are equivalent and is used to determine how to store those\nvalues. Provided with any value, <code><a href=\"/docs/latest@main/hash()\">hash()</a></code> will return a 31-bit integer.</p>\n",
          "description": "<p>When designing Objects which may be equal, it&#39;s important that when a\n<code><span class=\"token punctuation\" >.</span>equals<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> method returns true, that both values <code><span class=\"token punctuation\" >.</span>hashCode<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> method\nreturn the same value. <code><a href=\"/docs/latest@main/hash()\">hash()</a></code> may be used to produce those values.</p>\n<p>For non-Immutable Objects that do not provide a <code><span class=\"token punctuation\" >.</span>hashCode<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> functions\n(including plain Objects, plain Arrays, Date objects, etc), a unique hash\nvalue will be created for each <em>instance</em>. That is, the create hash\nrepresents referential equality, and not value equality for Objects. This\nensures that if that Object is mutated over time that its hash code will\nremain consistent, allowing Objects to be used as keys and values in\nImmutable.js collections.</p>\n<p>Note that <code><a href=\"/docs/latest@main/hash()\">hash()</a></code> attempts to balance between speed and avoiding\ncollisions, however it makes no attempt to produce secure hashes.</p>\n<p><em>New in Version 4.0</em></p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 5010,
            "params": [
              {
                "name": "value",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 6
            }
          }
        ],
        "url": "/docs/latest@main/hash()"
      },
      "label": "hash()",
      "url": "/docs/latest@main/hash()"
    },
    "is": {
      "qualifiedName": "is",
      "call": {
        "name": "is",
        "label": "is()",
        "id": "is()",
        "doc": {
          "synopsis": "<p>Value equality check with semantics similar to <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\" rel=\"noopener\">Object.is</a></code>, but treats\nImmutable <code><a href=\"/docs/latest@main/Collection\">Collection</a></code>s as values, equal if the second <code><a href=\"/docs/latest@main/Collection\">Collection</a></code> includes\nequivalent values.</p>\n",
          "description": "<p>It&#39;s used throughout Immutable when checking for equality, including <code><a href=\"/docs/latest@main/Map\">Map</a></code>\nkey equality and <code><a href=\"/docs/latest@main/Set\">Set</a></code> membership.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> is <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> map1 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> map2 <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> a<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> b<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span><span class=\"token punctuation\" >,</span> c<span class=\"token punctuation\" >:</span> <span class=\"token number\" >1</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span>map1 <span class=\"token operator\" >!</span><span class=\"token operator\" >==</span> map2<span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Object</span><span class=\"token punctuation\" >.</span>is<span class=\"token punctuation\" >(</span>map1<span class=\"token punctuation\" >,</span> map2<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >false</span><span class=\"token punctuation\" >)</span>\nassert<span class=\"token punctuation\" >.</span>equal<span class=\"token punctuation\" >(</span>is<span class=\"token punctuation\" >(</span>map1<span class=\"token punctuation\" >,</span> map2<span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >,</span> <span class=\"token primitive\" >true</span><span class=\"token punctuation\" >)</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code><p><code><a href=\"/docs/latest@main/is()\">is()</a></code> compares primitive types like strings and numbers, Immutable.js\ncollections like <code><a href=\"/docs/latest@main/Map\">Map</a></code> and <code><a href=\"/docs/latest@main/List\">List</a></code>, but also any custom object which\nimplements <code><a href=\"/docs/latest@main/ValueObject\">ValueObject</a></code> by providing <code>equals<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> and <code>hashCode<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> methods.</p>\n<p>Note: Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\" rel=\"noopener\">Object.is</a></code>, <code><a href=\"/docs/latest@main/is()\">Immutable.is</a></code> assumes <code><span class=\"token number\" >0</span></code> and <code><span class=\"token operator\" >-</span><span class=\"token number\" >0</span></code> are the same\nvalue, matching the behavior of ES6 Map key equality.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 4986,
            "params": [
              {
                "name": "first",
                "type": {
                  "k": 2
                }
              },
              {
                "name": "second",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/is()"
      },
      "label": "is()",
      "url": "/docs/latest@main/is()"
    },
    "isAssociative": {
      "qualifiedName": "isAssociative",
      "call": {
        "name": "isAssociative",
        "label": "isAssociative()",
        "id": "isAssociative()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeAssociative</span></code> is either a Keyed or Indexed Collection.</p>\n",
          "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> isAssociative<span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Stack</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Set</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nisAssociative<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isAssociative<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isAssociative<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isAssociative<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isAssociative<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Stack</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isAssociative<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5098,
            "params": [
              {
                "name": "maybeAssociative",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isAssociative()"
      },
      "label": "isAssociative()",
      "url": "/docs/latest@main/isAssociative()"
    },
    "isCollection": {
      "qualifiedName": "isCollection",
      "call": {
        "name": "isCollection",
        "label": "isCollection()",
        "id": "isCollection()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeCollection</span></code> is a Collection, or any of its subclasses.</p>\n",
          "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> isCollection<span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Stack</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nisCollection<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isCollection<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isCollection<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isCollection<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isCollection<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Stack</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5045,
            "params": [
              {
                "name": "maybeCollection",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isCollection()"
      },
      "label": "isCollection()",
      "url": "/docs/latest@main/isCollection()"
    },
    "isImmutable": {
      "qualifiedName": "isImmutable",
      "call": {
        "name": "isImmutable",
        "label": "isImmutable()",
        "id": "isImmutable()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeImmutable</span></code> is an Immutable Collection or Record.</p>\n",
          "description": "<p>Note: Still returns true even if the collections is within a <code>withMutations<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> isImmutable<span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Stack</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nisImmutable<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isImmutable<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isImmutable<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isImmutable<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isImmutable<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Stack</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isImmutable<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >.</span>asMutable<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5028,
            "params": [
              {
                "name": "maybeImmutable",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isImmutable()"
      },
      "label": "isImmutable()",
      "url": "/docs/latest@main/isImmutable()"
    },
    "isIndexed": {
      "qualifiedName": "isIndexed",
      "call": {
        "name": "isIndexed",
        "label": "isIndexed()",
        "id": "isIndexed()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeIndexed</span></code> is a Collection.Indexed, or any of its subclasses.</p>\n",
          "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> isIndexed<span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Stack</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Set</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nisIndexed<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isIndexed<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isIndexed<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isIndexed<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isIndexed<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Stack</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isIndexed<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5080,
            "params": [
              {
                "name": "maybeIndexed",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isIndexed()"
      },
      "label": "isIndexed()",
      "url": "/docs/latest@main/isIndexed()"
    },
    "isKeyed": {
      "qualifiedName": "isKeyed",
      "call": {
        "name": "isKeyed",
        "label": "isKeyed()",
        "id": "isKeyed()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeKeyed</span></code> is a Collection.Keyed, or any of its subclasses.</p>\n",
          "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> isKeyed<span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Stack</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nisKeyed<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isKeyed<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isKeyed<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isKeyed<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isKeyed<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Stack</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5062,
            "params": [
              {
                "name": "maybeKeyed",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isKeyed()"
      },
      "label": "isKeyed()",
      "url": "/docs/latest@main/isKeyed()"
    },
    "isList": {
      "qualifiedName": "isList",
      "call": {
        "name": "isList",
        "label": "isList()",
        "id": "isList()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeList</span></code> is a List.</p>\n",
          "description": "",
          "notes": []
        },
        "signatures": [
          {
            "line": 5143,
            "params": [
              {
                "name": "maybeList",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isList()"
      },
      "label": "isList()",
      "url": "/docs/latest@main/isList()"
    },
    "isMap": {
      "qualifiedName": "isMap",
      "call": {
        "name": "isMap",
        "label": "isMap()",
        "id": "isMap()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeMap</span></code> is a Map.</p>\n",
          "description": "<p>Also true for OrderedMaps.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 5150,
            "params": [
              {
                "name": "maybeMap",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isMap()"
      },
      "label": "isMap()",
      "url": "/docs/latest@main/isMap()"
    },
    "isOrdered": {
      "qualifiedName": "isOrdered",
      "call": {
        "name": "isOrdered",
        "label": "isOrdered()",
        "id": "isOrdered()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeOrdered</span></code> is a Collection where iteration order is well\ndefined. True for Collection.Indexed as well as OrderedMap and OrderedSet.</p>\n",
          "description": "<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> isOrdered<span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Set</span> <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\nisOrdered<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >[</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isOrdered<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isOrdered<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false\n</span>isOrdered<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Ordered</span><span class=\"token qualifier\" >Map</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isOrdered<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >List</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// true\n</span>isOrdered<span class=\"token punctuation\" >(</span><span class=\"token qualifier\" >Set</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span> <span class=\"token comment\" spellcheck=\"true\">// false</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5119,
            "params": [
              {
                "name": "maybeOrdered",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isOrdered()"
      },
      "label": "isOrdered()",
      "url": "/docs/latest@main/isOrdered()"
    },
    "isOrderedMap": {
      "qualifiedName": "isOrderedMap",
      "call": {
        "name": "isOrderedMap",
        "label": "isOrderedMap()",
        "id": "isOrderedMap()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeOrderedMap</span></code> is an OrderedMap.</p>\n",
          "description": "",
          "notes": []
        },
        "signatures": [
          {
            "line": 5155,
            "params": [
              {
                "name": "maybeOrderedMap",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isOrderedMap()"
      },
      "label": "isOrderedMap()",
      "url": "/docs/latest@main/isOrderedMap()"
    },
    "isOrderedSet": {
      "qualifiedName": "isOrderedSet",
      "call": {
        "name": "isOrderedSet",
        "label": "isOrderedSet()",
        "id": "isOrderedSet()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeOrderedSet</span></code> is an OrderedSet.</p>\n",
          "description": "",
          "notes": []
        },
        "signatures": [
          {
            "line": 5174,
            "params": [
              {
                "name": "maybeOrderedSet",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isOrderedSet()"
      },
      "label": "isOrderedSet()",
      "url": "/docs/latest@main/isOrderedSet()"
    },
    "isRecord": {
      "qualifiedName": "isRecord",
      "call": {
        "name": "isRecord",
        "label": "isRecord()",
        "id": "isRecord()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeRecord</span></code> is a Record.</p>\n",
          "description": "",
          "notes": []
        },
        "signatures": [
          {
            "line": 5181,
            "params": [
              {
                "name": "maybeRecord",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isRecord()"
      },
      "label": "isRecord()",
      "url": "/docs/latest@main/isRecord()"
    },
    "isSeq": {
      "qualifiedName": "isSeq",
      "call": {
        "name": "isSeq",
        "label": "isSeq()",
        "id": "isSeq()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeSeq</span></code> is a Seq.</p>\n",
          "description": "",
          "notes": []
        },
        "signatures": [
          {
            "line": 5133,
            "params": [
              {
                "name": "maybeSeq",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isSeq()"
      },
      "label": "isSeq()",
      "url": "/docs/latest@main/isSeq()"
    },
    "isSet": {
      "qualifiedName": "isSet",
      "call": {
        "name": "isSet",
        "label": "isSet()",
        "id": "isSet()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeSet</span></code> is a Set.</p>\n",
          "description": "<p>Also true for OrderedSets.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 5169,
            "params": [
              {
                "name": "maybeSet",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isSet()"
      },
      "label": "isSet()",
      "url": "/docs/latest@main/isSet()"
    },
    "isStack": {
      "qualifiedName": "isStack",
      "call": {
        "name": "isStack",
        "label": "isStack()",
        "id": "isStack()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeStack</span></code> is a Stack.</p>\n",
          "description": "",
          "notes": []
        },
        "signatures": [
          {
            "line": 5162,
            "params": [
              {
                "name": "maybeStack",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isStack()"
      },
      "label": "isStack()",
      "url": "/docs/latest@main/isStack()"
    },
    "isValueObject": {
      "qualifiedName": "isValueObject",
      "call": {
        "name": "isValueObject",
        "label": "isValueObject()",
        "id": "isValueObject()",
        "doc": {
          "synopsis": "<p>True if <code><span class=\"t param\">maybeValue</span></code> is a JavaScript Object which has <em>both</em> <code>equals<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>\nand <code>hashCode<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> methods.</p>\n",
          "description": "<p>Any two instances of <em>value objects</em> can be compared for value equality with\n<code><a href=\"/docs/latest@main/is()\">Immutable.is()</a></code> and can be used as keys in a <code><a href=\"/docs/latest@main/Map\">Map</a></code> or members in a <code><a href=\"/docs/latest@main/Set\">Set</a></code>.</p>\n",
          "notes": []
        },
        "signatures": [
          {
            "line": 5128,
            "params": [
              {
                "name": "maybeValue",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 5
            }
          }
        ],
        "url": "/docs/latest@main/isValueObject()"
      },
      "label": "isValueObject()",
      "url": "/docs/latest@main/isValueObject()"
    },
    "merge": {
      "qualifiedName": "merge",
      "call": {
        "name": "merge",
        "label": "merge()",
        "id": "merge()",
        "doc": {
          "synopsis": "<p>Returns a copy of the collection with the remaining collections merged in.</p>\n",
          "description": "<p>A functional alternative to <code>collection<span class=\"token punctuation\" >.</span>merge<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> which will also work with\nplain Objects and Arrays.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> merge <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> original <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >456</span> <span class=\"token punctuation\" >}</span>\nmerge<span class=\"token punctuation\" >(</span>original<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >789</span><span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'abc'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: 123, y: 789, z: 'abc' }\n</span>console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span>original<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: 123, y: 456 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5509,
            "typeParams": [
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "collections",
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 2
                            }
                          ]
                        },
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 15,
                              "types": [
                                {
                                  "k": 2
                                },
                                {
                                  "k": 2
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "k": 8,
                          "members": [
                            {
                              "index": true,
                              "params": [
                                {
                                  "name": "key",
                                  "type": {
                                    "k": 7
                                  }
                                }
                              ],
                              "type": {
                                "k": 2
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "varArgs": true
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          }
        ],
        "url": "/docs/latest@main/merge()"
      },
      "label": "merge()",
      "url": "/docs/latest@main/merge()"
    },
    "mergeDeep": {
      "qualifiedName": "mergeDeep",
      "call": {
        "name": "mergeDeep",
        "label": "mergeDeep()",
        "id": "mergeDeep()",
        "doc": {
          "synopsis": "<p>Like <code><a href=\"/docs/latest@main/merge()\">merge()</a></code>, but when two compatible collections are encountered with\nthe same key, it merges them as well, recursing deeply through the nested\ndata. Two collections are considered to be compatible (and thus will be\nmerged together) if they both fall into one of three categories: keyed\n(e.g., <code><a href=\"/docs/latest@main/Map\">Map</a></code>s, <code><a href=\"/docs/latest@main/Record\">Record</a></code>s, and objects), indexed (e.g., <code><a href=\"/docs/latest@main/List\">List</a></code>s and\narrays), or set-like (e.g., <code><a href=\"/docs/latest@main/Set\">Set</a></code>s). If they fall into separate\ncategories, <code><a href=\"/docs/latest@main/mergeDeep()\">mergeDeep</a></code> will replace the existing collection with the\ncollection being merged in. This behavior can be customized by using\n<code><a href=\"/docs/latest@main/mergeDeepWith()\">mergeDeepWith()</a></code>.</p>\n",
          "description": "<p>Note: Indexed and set-like collections are merged using\n<code>concat<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>/<code>union<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> and therefore do not recurse.</p>\n<p>A functional alternative to <code>collection<span class=\"token punctuation\" >.</span>mergeDeep<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> which will also work\nwith plain Objects and Arrays.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> mergeDeep <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> original <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span>\nmergeDeep<span class=\"token punctuation\" >(</span>original<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >456</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: { y: 123, z: 456 }}\n</span>console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span>original<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: { y: 123 }}</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5572,
            "typeParams": [
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "collections",
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 2
                            }
                          ]
                        },
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 15,
                              "types": [
                                {
                                  "k": 2
                                },
                                {
                                  "k": 2
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "k": 8,
                          "members": [
                            {
                              "index": true,
                              "params": [
                                {
                                  "name": "key",
                                  "type": {
                                    "k": 7
                                  }
                                }
                              ],
                              "type": {
                                "k": 2
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "varArgs": true
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          }
        ],
        "url": "/docs/latest@main/mergeDeep()"
      },
      "label": "mergeDeep()",
      "url": "/docs/latest@main/mergeDeep()"
    },
    "mergeDeepWith": {
      "qualifiedName": "mergeDeepWith",
      "call": {
        "name": "mergeDeepWith",
        "label": "mergeDeepWith()",
        "id": "mergeDeepWith()",
        "doc": {
          "synopsis": "<p>Like <code><a href=\"/docs/latest@main/mergeDeep()\">mergeDeep()</a></code>, but when two non-collections or incompatible\ncollections are encountered at the same key, it uses the <code><span class=\"t param\">merger</span></code> function\nto determine the resulting value. Collections are considered incompatible\nif they fall into separate categories between keyed, indexed, and set-like.</p>\n",
          "description": "<p>A functional alternative to <code>collection<span class=\"token punctuation\" >.</span>mergeDeepWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> which will also\nwork with plain Objects and Arrays.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> mergeDeepWith <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> original <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span>\nmergeDeepWith<span class=\"token punctuation\" >(</span>\n  <span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >+</span> newVal<span class=\"token punctuation\" >,</span>\n  original<span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >456</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: { y: 579 }}\n</span>console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span>original<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: { y: 123 }}</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5602,
            "typeParams": [
              "C"
            ],
            "params": [
              {
                "name": "merger",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "oldVal",
                      "type": {
                        "k": 2
                      }
                    },
                    {
                      "name": "newVal",
                      "type": {
                        "k": 2
                      }
                    },
                    {
                      "name": "key",
                      "type": {
                        "k": 2
                      }
                    }
                  ],
                  "type": {
                    "k": 2
                  }
                }
              },
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "collections",
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 2
                            }
                          ]
                        },
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 15,
                              "types": [
                                {
                                  "k": 2
                                },
                                {
                                  "k": 2
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "k": 8,
                          "members": [
                            {
                              "index": true,
                              "params": [
                                {
                                  "name": "key",
                                  "type": {
                                    "k": 7
                                  }
                                }
                              ],
                              "type": {
                                "k": 2
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "varArgs": true
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          }
        ],
        "url": "/docs/latest@main/mergeDeepWith()"
      },
      "label": "mergeDeepWith()",
      "url": "/docs/latest@main/mergeDeepWith()"
    },
    "mergeWith": {
      "qualifiedName": "mergeWith",
      "call": {
        "name": "mergeWith",
        "label": "mergeWith()",
        "id": "mergeWith()",
        "doc": {
          "synopsis": "<p>Returns a copy of the collection with the remaining collections merged in,\ncalling the <code><span class=\"t param\">merger</span></code> function whenever an existing value is encountered.</p>\n",
          "description": "<p>A functional alternative to <code>collection<span class=\"token punctuation\" >.</span>mergeWith<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> which will also work\nwith plain Objects and Arrays.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> mergeWith <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> original <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span><span class=\"token punctuation\" >,</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >456</span> <span class=\"token punctuation\" >}</span>\nmergeWith<span class=\"token punctuation\" >(</span>\n  <span class=\"token punctuation\" >(</span>oldVal<span class=\"token punctuation\" >,</span> newVal<span class=\"token punctuation\" >)</span> <span class=\"token operator\" >=</span><span class=\"token operator\" >></span> oldVal <span class=\"token operator\" >+</span> newVal<span class=\"token punctuation\" >,</span>\n  original<span class=\"token punctuation\" >,</span>\n  <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token number\" >789</span><span class=\"token punctuation\" >,</span> z<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'abc'</span> <span class=\"token punctuation\" >}</span>\n<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: 123, y: 1245, z: 'abc' }\n</span>console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span>original<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: 123, y: 456 }</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5537,
            "typeParams": [
              "C"
            ],
            "params": [
              {
                "name": "merger",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "oldVal",
                      "type": {
                        "k": 2
                      }
                    },
                    {
                      "name": "newVal",
                      "type": {
                        "k": 2
                      }
                    },
                    {
                      "name": "key",
                      "type": {
                        "k": 2
                      }
                    }
                  ],
                  "type": {
                    "k": 2
                  }
                }
              },
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "collections",
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 13,
                      "types": [
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 2
                            }
                          ]
                        },
                        {
                          "k": 12,
                          "name": "Iterable",
                          "args": [
                            {
                              "k": 15,
                              "types": [
                                {
                                  "k": 2
                                },
                                {
                                  "k": 2
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "k": 8,
                          "members": [
                            {
                              "index": true,
                              "params": [
                                {
                                  "name": "key",
                                  "type": {
                                    "k": 7
                                  }
                                }
                              ],
                              "type": {
                                "k": 2
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "varArgs": true
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          }
        ],
        "url": "/docs/latest@main/mergeWith()"
      },
      "label": "mergeWith()",
      "url": "/docs/latest@main/mergeWith()"
    },
    "remove": {
      "qualifiedName": "remove",
      "call": {
        "name": "remove",
        "label": "remove()",
        "id": "remove()",
        "signatures": [
          {
            "line": 5263,
            "typeParams": [
              "K",
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5267,
            "typeParams": [
              "TProps",
              "C",
              "K"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5272,
            "typeParams": [
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 6
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5273,
            "typeParams": [
              "C",
              "K"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5274,
            "typeParams": [
              "C",
              "K"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          }
        ],
        "url": "/docs/latest@main/remove()"
      },
      "label": "remove()",
      "url": "/docs/latest@main/remove()"
    },
    "removeIn": {
      "qualifiedName": "removeIn",
      "call": {
        "name": "removeIn",
        "label": "removeIn()",
        "id": "removeIn()",
        "doc": {
          "synopsis": "<p>Returns a copy of the collection with the value at the key path removed.</p>\n",
          "description": "<p>A functional alternative to <code>collection<span class=\"token punctuation\" >.</span>removeIn<span class=\"token punctuation\" >(</span>keypath<span class=\"token punctuation\" >)</span></code> which will also\nwork with plain Objects and Arrays.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> removeIn <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> original <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span>\nremoveIn<span class=\"token punctuation\" >(</span>original<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'z'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: { y: {}}}\n</span>console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span>original<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: { y: { z: 123 }}}</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5445,
            "typeParams": [
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "keyPath",
                "type": {
                  "k": 12,
                  "name": "Iterable",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          }
        ],
        "url": "/docs/latest@main/removeIn()"
      },
      "label": "removeIn()",
      "url": "/docs/latest@main/removeIn()"
    },
    "set": {
      "qualifiedName": "set",
      "call": {
        "name": "set",
        "label": "set()",
        "id": "set()",
        "signatures": [
          {
            "line": 5298,
            "typeParams": [
              "K",
              "V",
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "value",
                "type": {
                  "k": 11,
                  "param": "V"
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5303,
            "typeParams": [
              "TProps",
              "C",
              "K"
            ],
            "params": [
              {
                "name": "record",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "value",
                "type": {
                  "k": 16,
                  "type": {
                    "k": 11,
                    "param": "TProps"
                  },
                  "index": {
                    "k": 11,
                    "param": "K"
                  }
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5308,
            "typeParams": [
              "V",
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 6
                }
              },
              {
                "name": "value",
                "type": {
                  "k": 11,
                  "param": "V"
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5309,
            "typeParams": [
              "C",
              "K"
            ],
            "params": [
              {
                "name": "object",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "value",
                "type": {
                  "k": 16,
                  "type": {
                    "k": 11,
                    "param": "C"
                  },
                  "index": {
                    "k": 11,
                    "param": "K"
                  }
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5310,
            "typeParams": [
              "V",
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 7
                }
              },
              {
                "name": "value",
                "type": {
                  "k": 11,
                  "param": "V"
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          }
        ],
        "url": "/docs/latest@main/set()"
      },
      "label": "set()",
      "url": "/docs/latest@main/set()"
    },
    "setIn": {
      "qualifiedName": "setIn",
      "call": {
        "name": "setIn",
        "label": "setIn()",
        "id": "setIn()",
        "doc": {
          "synopsis": "<p>Returns a copy of the collection with the value at the key path set to the\nprovided value.</p>\n",
          "description": "<p>A functional alternative to <code>collection<span class=\"token punctuation\" >.</span>setIn<span class=\"token punctuation\" >(</span>keypath<span class=\"token punctuation\" >)</span></code> which will also\nwork with plain Objects and Arrays.</p>\n<!-- runkit:activate -->\n<code class=\"codeBlock\"><span class=\"token keyword\" >const</span> <span class=\"token punctuation\" >{</span> setIn <span class=\"token punctuation\" >}</span> <span class=\"token operator\" >=</span> require<span class=\"token punctuation\" >(</span><span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >)</span>\n<span class=\"token keyword\" >const</span> original <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> x<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> y<span class=\"token punctuation\" >:</span> <span class=\"token punctuation\" >{</span> z<span class=\"token punctuation\" >:</span> <span class=\"token number\" >123</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >}</span>\nsetIn<span class=\"token punctuation\" >(</span>original<span class=\"token punctuation\" >,</span> <span class=\"token punctuation\" >[</span><span class=\"token string\" >'x'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'y'</span><span class=\"token punctuation\" >,</span> <span class=\"token string\" >'z'</span><span class=\"token punctuation\" >]</span><span class=\"token punctuation\" >,</span> <span class=\"token number\" >456</span><span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: { y: { z: 456 }}}\n</span>console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span>original<span class=\"token punctuation\" >)</span> <span class=\"token comment\" spellcheck=\"true\">// { x: { y: { z: 123 }}}</span><a class=\"try-it\" data-options=\"%7B%7D\" onClick=\"runIt(this,'latest@main')\">run it</a></code>",
          "notes": []
        },
        "signatures": [
          {
            "line": 5462,
            "typeParams": [
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "keyPath",
                "type": {
                  "k": 12,
                  "name": "Iterable",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              },
              {
                "name": "value",
                "type": {
                  "k": 2
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          }
        ],
        "url": "/docs/latest@main/setIn()"
      },
      "label": "setIn()",
      "url": "/docs/latest@main/setIn()"
    },
    "update": {
      "qualifiedName": "update",
      "call": {
        "name": "update",
        "label": "update()",
        "id": "update()",
        "signatures": [
          {
            "line": 5335,
            "typeParams": [
              "K",
              "V",
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 11,
                            "param": "V"
                          },
                          {
                            "k": 4
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "k": 11,
                    "param": "V"
                  }
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5340,
            "typeParams": [
              "K",
              "V",
              "C",
              "NSV"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 11,
                  "param": "NSV"
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 11,
                            "param": "V"
                          },
                          {
                            "k": 11,
                            "param": "NSV"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "k": 11,
                    "param": "V"
                  }
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5346,
            "typeParams": [
              "TProps",
              "C",
              "K"
            ],
            "params": [
              {
                "name": "record",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 16,
                        "type": {
                          "k": 11,
                          "param": "TProps"
                        },
                        "index": {
                          "k": 11,
                          "param": "K"
                        }
                      }
                    }
                  ],
                  "type": {
                    "k": 16,
                    "type": {
                      "k": 11,
                      "param": "TProps"
                    },
                    "index": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5351,
            "typeParams": [
              "TProps",
              "C",
              "K",
              "NSV"
            ],
            "params": [
              {
                "name": "record",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 11,
                  "param": "NSV"
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 16,
                            "type": {
                              "k": 11,
                              "param": "TProps"
                            },
                            "index": {
                              "k": 11,
                              "param": "K"
                            }
                          },
                          {
                            "k": 11,
                            "param": "NSV"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "k": 16,
                    "type": {
                      "k": 11,
                      "param": "TProps"
                    },
                    "index": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5362,
            "typeParams": [
              "V"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ]
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 6
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ],
                  "type": {
                    "k": 11,
                    "param": "V"
                  }
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Array",
              "args": [
                {
                  "k": 11,
                  "param": "V"
                }
              ]
            }
          },
          {
            "line": 5367,
            "typeParams": [
              "V",
              "NSV"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 12,
                  "name": "Array",
                  "args": [
                    {
                      "k": 11,
                      "param": "V"
                    }
                  ]
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 6
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 11,
                  "param": "NSV"
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 11,
                            "param": "V"
                          },
                          {
                            "k": 11,
                            "param": "NSV"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "k": 11,
                    "param": "V"
                  }
                }
              }
            ],
            "type": {
              "k": 12,
              "name": "Array",
              "args": [
                {
                  "k": 11,
                  "param": "V"
                }
              ]
            }
          },
          {
            "line": 5373,
            "typeParams": [
              "C",
              "K"
            ],
            "params": [
              {
                "name": "object",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 16,
                        "type": {
                          "k": 11,
                          "param": "C"
                        },
                        "index": {
                          "k": 11,
                          "param": "K"
                        }
                      }
                    }
                  ],
                  "type": {
                    "k": 16,
                    "type": {
                      "k": 11,
                      "param": "C"
                    },
                    "index": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5378,
            "typeParams": [
              "C",
              "K",
              "NSV"
            ],
            "params": [
              {
                "name": "object",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 11,
                  "param": "NSV"
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 16,
                            "type": {
                              "k": 11,
                              "param": "C"
                            },
                            "index": {
                              "k": 11,
                              "param": "K"
                            }
                          },
                          {
                            "k": 11,
                            "param": "NSV"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "k": 16,
                    "type": {
                      "k": 11,
                      "param": "C"
                    },
                    "index": {
                      "k": 11,
                      "param": "K"
                    }
                  }
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5384,
            "typeParams": [
              "V",
              "C",
              "K"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 11,
                        "param": "V"
                      }
                    }
                  ],
                  "type": {
                    "k": 11,
                    "param": "V"
                  }
                }
              }
            ],
            "type": {
              "k": 8,
              "members": [
                {
                  "index": true,
                  "params": [
                    {
                      "name": "key",
                      "type": {
                        "k": 7
                      }
                    }
                  ],
                  "type": {
                    "k": 11,
                    "param": "V"
                  }
                }
              ]
            }
          },
          {
            "line": 5389,
            "typeParams": [
              "V",
              "C",
              "K",
              "NSV"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "key",
                "type": {
                  "k": 11,
                  "param": "K"
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 11,
                  "param": "NSV"
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 13,
                        "types": [
                          {
                            "k": 11,
                            "param": "V"
                          },
                          {
                            "k": 11,
                            "param": "NSV"
                          }
                        ]
                      }
                    }
                  ],
                  "type": {
                    "k": 11,
                    "param": "V"
                  }
                }
              }
            ],
            "type": {
              "k": 8,
              "members": [
                {
                  "index": true,
                  "params": [
                    {
                      "name": "key",
                      "type": {
                        "k": 7
                      }
                    }
                  ],
                  "type": {
                    "k": 11,
                    "param": "V"
                  }
                }
              ]
            }
          }
        ],
        "url": "/docs/latest@main/update()"
      },
      "label": "update()",
      "url": "/docs/latest@main/update()"
    },
    "updateIn": {
      "qualifiedName": "updateIn",
      "call": {
        "name": "updateIn",
        "label": "updateIn()",
        "id": "updateIn()",
        "signatures": [
          {
            "line": 5483,
            "typeParams": [
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "keyPath",
                "type": {
                  "k": 12,
                  "name": "Iterable",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 2
                      }
                    }
                  ],
                  "type": {
                    "k": 2
                  }
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          },
          {
            "line": 5488,
            "typeParams": [
              "C"
            ],
            "params": [
              {
                "name": "collection",
                "type": {
                  "k": 11,
                  "param": "C"
                }
              },
              {
                "name": "keyPath",
                "type": {
                  "k": 12,
                  "name": "Iterable",
                  "args": [
                    {
                      "k": 2
                    }
                  ]
                }
              },
              {
                "name": "notSetValue",
                "type": {
                  "k": 2
                }
              },
              {
                "name": "updater",
                "type": {
                  "k": 10,
                  "params": [
                    {
                      "name": "value",
                      "type": {
                        "k": 2
                      }
                    }
                  ],
                  "type": {
                    "k": 2
                  }
                }
              }
            ],
            "type": {
              "k": 11,
              "param": "C"
            }
          }
        ],
        "url": "/docs/latest@main/updateIn()"
      },
      "label": "updateIn()",
      "url": "/docs/latest@main/updateIn()"
    }
  }
}