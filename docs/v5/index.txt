1:"$Sreact.fragment"
2:I[2708,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"WorkerContextProvider"]
3:I[4620,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
4:I[81105,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
5:I[86240,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/c63eea34c69bde5e.js"],"default"]
8:I[83822,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"MetadataBoundary"]
a:I[83822,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"OutletBoundary"]
d:I[2541,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"AsyncMetadataOutlet"]
f:I[83822,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"ViewportBoundary"]
11:I[12447,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
:HL["/_next/static/chunks/2403294e05ea780d.css","style"]
0:{"P":null,"b":"eSekn8btGqQtnunAARXwx","p":"","c":["","docs","v5",""],"i":false,"f":[[["",{"children":["docs",{"children":["v5",{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/2403294e05ea780d.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/1d2d43591a84e045.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/0f63189634a29548.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"pageBody","children":[["$","h2",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L5",null,{"href":"/","children":"Return Home"}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["v5",["$","$1","c",{"children":[[["$","script","script-0",{"src":"/_next/static/chunks/1398221593ec8d74.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/cffb7d8f6d5ddd81.js","async":true,"nonce":"$undefined"}]],"$L6"]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","script","script-0",{"src":"/_next/static/chunks/122e906f66a4415e.js","async":true,"nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","GCCZ5eC21tiWdgV5fyWSf",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:I[85995,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js"],"ImmutableConsole"]
13:I[91842,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js"],"HeaderLogoLink"]
14:I[91842,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js"],"HeaderLinks"]
15:I[55958,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js"],"default"]
16:"$Sreact.suspense"
17:I[2541,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"AsyncMetadata"]
6:["$","div",null,{"children":[["$","$L12",null,{"version":"v5"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":[["$","div",null,{"className":"miniHeaderContents","children":[["$","$L13",null,{}],["$","$L14",null,{"versions":["v5","v4.3.7","v3.8.2"],"currentVersion":"v5"}]]}],["$","$L15",null,{}]]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]
9:["$","$16",null,{"fallback":null,"children":["$","$L17",null,{"promise":"$@18"}]}]
c:null
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
18:{"metadata":[["$","title","0",{"children":"Documentation v5 â€” Immutable.js"}],["$","link","1",{"rel":"icon","href":"/favicon.png"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$18:metadata","error":null,"digest":"$undefined"}
19:I[26602,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js","/_next/static/chunks/122e906f66a4415e.js"],"default"]
1a:I[75543,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js","/_next/static/chunks/122e906f66a4415e.js"],"DocSearch"]
7:[["$","$L19",null,{}],["$","div",null,{"className":"docContents","children":[["$","$L1a",null,{}],["$","div","Overview",{"className":"docContents","children":[["$","h1",null,{"className":"mainTitle","children":["Immutable.js (","v5",")"]}],[["$","p",null,{"children":"Immutable data encourages pure functions (data-in, data-out) and lends itself\nto much simpler application development and enabling techniques from\nfunctional programming such as lazy evaluation."}],"\n",["$","p",null,{"children":"While designed to bring these powerful functional concepts to JavaScript, it\npresents an Object-Oriented API familiar to Javascript engineers and closely\nmirroring that of Array, Map, and Set. It is easy and efficient to convert to\nand from plain Javascript types."}],"\n",["$","h2",null,{"children":"How to read these docs"}],"\n",["$","p",null,{"children":["In order to better explain what kinds of values the Immutable.js API expects\nand produces, this documentation is presented in a statically typed dialect of\nJavaScript (like ",["$","a",null,{"href":"https://flowtype.org/","children":"Flow"}]," or ",["$","a",null,{"href":"https://www.typescriptlang.org/","children":"TypeScript"}],"). You ",["$","em",null,{"children":"don't need"}]," to use these\ntype checking tools in order to use Immutable.js, however becoming familiar\nwith their syntax will help you get a deeper understanding of this API."]}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"A few examples and how to read them."}]}],"\n",["$","p",null,{"children":"All methods describe the kinds of data they accept and the kinds of data\nthey return. For example a function which accepts two numbers and returns\na number would look like this:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"codeBlock language-ts","dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> second<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>"}}]}],"\n",["$","p",null,{"children":["Sometimes, methods can accept different kinds of data or return different\nkinds of data, and this is described with a ",["$","em",null,{"children":"type variable"}],", which is\ntypically in all-caps. For example, a function which always returns the same\nkind of data it was provided would look like this:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"codeBlock language-ts","dangerouslySetInnerHTML":{"__html":"<span class=\"token generic-function\"><span class=\"token function\">identity</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>"}}]}],"\n",["$","p",null,{"children":"Type variables are defined with classes and referred to in methods. For\nexample, a class that holds onto a value for you might look like this:"}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"codeBlock language-ts","dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token qualifier\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"}}]}],"\n",["$","p",null,{"children":["In order to manipulate Immutable data, methods that we're used to affecting\na Collection instead return a new Collection of the same type. The type\n",["$","code",null,{"children":"this"}]," refers to the same kind of class. For example, a List which returns\nnew Lists when you ",["$","code",null,{"children":"push"}]," a value onto it might look like:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"codeBlock language-ts","dangerouslySetInnerHTML":{"__html":"<span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token qualifier\">List</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token var\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>"}}]}],"\n",["$","p",null,{"children":["Many methods in Immutable.js accept values which implement the JavaScript\n",["$","a",null,{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols","children":"Iterable"}]," protocol, and might appear like ",["$","code",null,{"children":"Iterable<string>"}]," for something\nwhich represents sequence of strings. Typically in JavaScript we use plain\nArrays (",["$","code",null,{"children":"[]"}],") when an Iterable is expected, but also all of the Immutable.js\ncollections are iterable themselves!"]}],"\n",["$","p",null,{"children":["For example, to get a value deep within a structure of data, we might use\n",["$","code",null,{"children":"getIn"}]," which expects an ",["$","code",null,{"children":"Iterable"}]," path:"]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"codeBlock language-ts","dangerouslySetInnerHTML":{"__html":"<span class=\"token function\">getIn</span><span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token qualifier\">Iterable</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span>"}}]}],"\n",["$","p",null,{"children":["To use this method, we could pass an array: ",["$","code",null,{"children":"data.getIn([ \"key\", 2 ])"}],"."]}],"\n",["$","h3",null,{"children":"Inheritance cheatsheet"}],"\n",["$","p",null,{"children":"The following diagram shows the inheritance relationships between the\nImmutable.js collections. Click on the image to view it in full size."}],"\n",["$","span",null,{}],"\n",["$","a",null,{"href":"/Immutable.js-Inheritance-cheatsheet.light.excalidraw.svg","children":["$","picture",null,{"children":[["$","source",null,{"srcSet":"/Immutable.js-Inheritance-cheatsheet.dark.excalidraw.svg","media":"(prefers-color-scheme: dark)"}],["$","img",null,{"src":"/Immutable.js-Inheritance-cheatsheet.light.excalidraw.svg","alt":"Immutable.js Inheritance cheatsheet"}]]}]}]],[["$","section","/docs/v5/List/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/List/","children":"List"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Lists are ordered indexed dense collections, much like a JavaScript Array."}]}]]}],["$","section","/docs/v5/Map/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Map/","children":"Map"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Immutable Map is an unordered Collection.Keyed of (key, value) pairs with O(log32 N) gets and O(log32 N) persistent sets."}]}]]}],["$","section","/docs/v5/OrdererMap/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/OrdererMap/","children":"OrderedMap"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"A type of Map that has the additional guarantee that the iteration order of entries will be the order in which they were set()."}]}]]}],["$","section","/docs/v5/Set/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Set/","children":"Set"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"A Collection of unique values with O(log32 N) adds and has."}]}]]}],["$","section","/docs/v5/OrderedSet/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/OrderedSet/","children":"OrderedSet"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"A type of Set that has the additional guarantee that the iteration order of values will be the order in which they were added."}]}]]}],["$","section","/docs/v5/Stack/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Stack/","children":"Stack"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Stacks are indexed collections which support very efficient O(1) addition and removal from the front using unshift(v) and shift()."}]}]]}],["$","section","/docs/v5/Range()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Range()/","children":"Range()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Returns a Seq.Indexed of numbers from start (inclusive) to end (exclusive), by step, where start defaults to 0, step to 1, and end to infinity. When start is equal to end, returns empty range."}]}]]}],["$","section","/docs/v5/Repeat()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Repeat()/","children":"Repeat()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Returns a Seq.Indexed of value repeated times times. When times is not defined, returns an infinite Seq of value."}]}]]}],["$","section","/docs/v5/Record/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Record/","children":"Record"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"A record is similar to a JS object, but enforces a specific set of allowed string keys, and has default values."}]}]]}],["$","section","/docs/v5/Record.Factory/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Record.Factory/","children":"Record.Factory"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"A Record.Factory is created by the Record() function. Record instances are created by passing it some of the accepted values for that Record type:"}]}]]}],["$","section","/docs/v5/Seq/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Seq/","children":"Seq"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Seq describes a lazy operation, allowing them to efficiently chain use of all the higher-order collection methods (such as map and filter) by not creating intermediate collections."}]}]]}],["$","section","/docs/v5/Seq.Keyed/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Seq.Keyed/","children":"Seq.Keyed"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Seq which represents key-value pairs."}]}]]}],["$","section","/docs/v5/Seq.Indexed/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Seq.Indexed/","children":"Seq.Indexed"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Seq which represents an ordered indexed list of values."}]}]]}],["$","section","/docs/v5/Seq.Set/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Seq.Set/","children":"Seq.Set"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Seq which represents a set of values."}]}]]}],["$","section","/docs/v5/Collection/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Collection/","children":"Collection"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"The Collection is a set of (key, value) entries which can be iterated, and is the base class for all collections in immutable, allowing them to make use of all the Collection methods (such as map and filter)."}]}]]}],["$","section","/docs/v5/Collection.Keyed/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Collection.Keyed/","children":"Collection.Keyed"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Keyed Collections have discrete keys tied to each value."}]}]]}],["$","section","/docs/v5/Collection.Indexed/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Collection.Indexed/","children":"Collection.Indexed"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Indexed Collections have incrementing numeric keys. They exhibit slightly different behavior than Collection.Keyed for some methods in order to better mirror the behavior of JavaScript's Array, and add methods which do not make sense on non-indexed Collections such as indexOf."}]}]]}],["$","section","/docs/v5/Collection.Set/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/Collection.Set/","children":"Collection.Set"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Set Collections only represent values. They have no associated keys or indices. Duplicate values are possible in the lazy Seq.Sets, however the concrete Set Collection does not allow duplicate values."}]}]]}],["$","section","/docs/v5/ValueObject/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/ValueObject/","children":"ValueObject"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/OrderedCollection/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/OrderedCollection/","children":"OrderedCollection"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/fromJS()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/fromJS()/","children":"fromJS()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/is()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/is()/","children":"is()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Value equality check with semantics similar to Object.is, but treats Immutable Collections as values, equal if the second Collection includes equivalent values."}]}]]}],["$","section","/docs/v5/hash()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/hash()/","children":"hash()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"The hash() function is an important part of how Immutable determines if two values are equivalent and is used to determine how to store those values. Provided with any value, hash() will return a 31-bit integer."}]}]]}],["$","section","/docs/v5/isImmutable()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isImmutable()/","children":"isImmutable()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeImmutable is an Immutable Collection or Record."}]}]]}],["$","section","/docs/v5/isCollection()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isCollection()/","children":"isCollection()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeCollection is a Collection, or any of its subclasses."}]}]]}],["$","section","/docs/v5/isKeyed()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isKeyed()/","children":"isKeyed()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeKeyed is a Collection.Keyed, or any of its subclasses."}]}]]}],["$","section","/docs/v5/isIndexed()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isIndexed()/","children":"isIndexed()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeIndexed is a Collection.Indexed, or any of its subclasses."}]}]]}],["$","section","/docs/v5/isAssociative()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isAssociative()/","children":"isAssociative()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeAssociative is either a Keyed or Indexed Collection."}]}]]}],["$","section","/docs/v5/isOrdered()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isOrdered()/","children":"isOrdered()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/isValueObject()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isValueObject()/","children":"isValueObject()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeValue is a JavaScript Object which has both equals() and hashCode() methods."}]}]]}],["$","section","/docs/v5/isSeq()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isSeq()/","children":"isSeq()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeSeq is a Seq."}]}]]}],["$","section","/docs/v5/isList()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isList()/","children":"isList()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeList is a List."}]}]]}],["$","section","/docs/v5/isMap()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isMap()/","children":"isMap()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeMap is a Map."}]}]]}],["$","section","/docs/v5/isOrderedMap()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isOrderedMap()/","children":"isOrderedMap()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeOrderedMap is an OrderedMap."}]}]]}],["$","section","/docs/v5/isStack()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isStack()/","children":"isStack()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeStack is a Stack."}]}]]}],["$","section","/docs/v5/isSet()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isSet()/","children":"isSet()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeSet is a Set."}]}]]}],["$","section","/docs/v5/isOrderedSet()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isOrderedSet()/","children":"isOrderedSet()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeOrderedSet is an OrderedSet."}]}]]}],["$","section","/docs/v5/isRecord()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/isRecord()/","children":"isRecord()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"True if maybeRecord is a Record."}]}]]}],["$","section","/docs/v5/get()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/get()/","children":"get()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Returns true if the key is defined in the provided collection."}]}]]}],["$","section","/docs/v5/has()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/has()/","children":"has()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/remove()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/remove()/","children":"remove()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/set()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/set()/","children":"set()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/update()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/update()/","children":"update()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/getIn()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/getIn()/","children":"getIn()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/hasIn()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/hasIn()/","children":"hasIn()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/removeIn()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/removeIn()/","children":"removeIn()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Returns a copy of the collection with the value at the key path removed."}]}]]}],["$","section","/docs/v5/setIn()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/setIn()/","children":"setIn()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Returns a copy of the collection with the value at the key path set to the provided value."}]}]]}],["$","section","/docs/v5/updateIn()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/updateIn()/","children":"updateIn()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":""}]}]]}],["$","section","/docs/v5/merge()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/merge()/","children":"merge()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Returns a copy of the collection with the remaining collections merged in."}]}]]}],["$","section","/docs/v5/mergeWith()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/mergeWith()/","children":"mergeWith()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Returns a copy of the collection with the remaining collections merged in, calling the merger function whenever an existing value is encountered."}]}]]}],["$","section","/docs/v5/mergeDeep()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/mergeDeep()/","children":"mergeDeep()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Like merge(), but when two compatible collections are encountered with the same key, it merges them as well, recursing deeply through the nested data. Two collections are considered to be compatible (and thus will be merged together) if they both fall into one of three categories: keyed (e.g., Maps, Records, and objects), indexed (e.g., Lists and arrays), or set-like (e.g., Sets). If they fall into separate categories, mergeDeep will replace the existing collection with the collection being merged in. This behavior can be customized by using mergeDeepWith()."}]}]]}],["$","section","/docs/v5/mergeDeepWith()/",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L5",null,{"href":"/docs/v5/mergeDeepWith()/","children":"mergeDeepWith()"}]}],["$","div",null,{"className":"markdown detail","children":["$","p",null,{"children":"Like mergeDeep(), but when two non-collections or incompatible collections are encountered at the same key, it uses the merger function to determine the resulting value. Collections are considered incompatible if they fall into separate categories between keyed, indexed, and set-like."}]}]]}]]]}]]}]]
