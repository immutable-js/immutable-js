1:"$Sreact.fragment"
2:I[2708,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"WorkerContextProvider"]
3:I[4620,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
4:I[81105,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
5:I[86240,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/c63eea34c69bde5e.js"],"default"]
8:I[83822,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"MetadataBoundary"]
a:I[83822,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"OutletBoundary"]
d:I[2541,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"AsyncMetadataOutlet"]
f:I[83822,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"ViewportBoundary"]
11:I[12447,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"default"]
:HL["/_next/static/chunks/78f1306480580587.css","style"]
:HL["/_next/static/chunks/916b61d823ab5683.css","style"]
0:{"P":null,"b":"CsWEmrvEF7fw4CBMXoLcT","p":"","c":["","docs","v4.3.7","Seq.Keyed",""],"i":false,"f":[[["",{"children":["docs",{"children":[["version","v4.3.7","d"],{"children":[["type","Seq.Keyed","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/78f1306480580587.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/1d2d43591a84e045.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/0f63189634a29548.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L2",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"pageBody","children":[["$","h2",null,{"children":"Not Found"}],["$","p",null,{"children":"Could not find requested resource"}],["$","$L5",null,{"href":"/","children":"Return Home"}]]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]}]]}],{"children":["docs",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["version","v4.3.7","d"],["$","$1","c",{"children":[[["$","script","script-0",{"src":"/_next/static/chunks/1398221593ec8d74.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/cffb7d8f6d5ddd81.js","async":true,"nonce":"$undefined"}]],"$L6"]}],{"children":[["type","Seq.Keyed","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/916b61d823ab5683.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/1d5af645b0ad195c.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/73f73508088fc71d.js","async":true,"nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","z2xCNpviBZmQYjdHSHHve",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[2541,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js"],"AsyncMetadata"]
15:I[85995,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js"],"ImmutableConsole"]
16:I[91842,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js"],"HeaderLogoLink"]
17:I[91842,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js"],"HeaderLinks"]
18:I[55958,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js"],"default"]
19:I[35383,["/_next/static/chunks/1d2d43591a84e045.js","/_next/static/chunks/0f63189634a29548.js","/_next/static/chunks/1398221593ec8d74.js","/_next/static/chunks/cffb7d8f6d5ddd81.js","/_next/static/chunks/1d5af645b0ad195c.js","/_next/static/chunks/73f73508088fc71d.js"],"TypeDocumentation"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
6:["$","div",null,{"children":[["$","$L15",null,{"version":"v4.3.7"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":[["$","div",null,{"className":"miniHeaderContents","children":[["$","$L16",null,{}],["$","$L17",null,{"versions":["v5","v4.3.7","v3.8.2"],"currentVersion":"v4.3.7"}]]}],["$","$L18",null,{}]]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}]
1a:T5e8,<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">Keyed</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> <span class="token number">10</span> <span class="token operator">*</span> x<span class="token punctuation">)</span>
<span class="token comment">// Seq { "a": 10, "b": 20 }</span></code><p>Note: <code><a href="/docs/v4.3.7/Seq.Keyed#map()">map()</a></code> always returns a new instance, even if it produced the
same value at every step.</p>
1b:Tbb4,<p><code class="codeBlock"><span class="token keyword">var</span> squares <span class="token operator">=</span> <span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator"><em></span> x<span class="token punctuation">)</span>
squares<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> squares<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code><p>If you know a <code><a href="/docs/v4.3.7/Seq">Seq</a></code> will be used multiple times, it may be more
efficient to first cache it in memory. Here, the map function is called
only 3 times.</p>
<code class="codeBlock"><span class="token keyword">var</span> squares <span class="token operator">=</span> <span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator"></em></span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
squares<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> squares<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code><p>Use this method judiciously, as it must fully evaluate a Seq which can be
a burden on memory and possibly performance.</p></p>
<p>Note: after calling <code><a href="/docs/v4.3.7/Seq#cacheResult()">cacheResult</a></code>, a Seq will always have a <code><a href="/docs/v4.3.7/Seq#size">size</a></code>.</p>
1c:Tb4f,<p>The <code><a href="/docs/v4.3.7/List#hashCode()">hashCode</a></code> of a Collection is used to determine potential equality,
and is used when adding this to a <code><a href="/docs/v4.3.7/Set">Set</a></code> or as a key in a <code><a href="/docs/v4.3.7/Map">Map</a></code>, enabling
lookup via a different instance.</p>
<!-- runkit:activate
     { "preamble": "const { Set,  List } = require('immutable')" }
-->
<code class="codeBlock"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">notStrictEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// different instances</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token primitive">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code><p>If two values have the same <code><a href="/docs/v4.3.7/List#hashCode()">hashCode</a></code>, they are <a href="https://en.wikipedia.org/wiki/Collision_(computer_science)">not guaranteed
to be equal</a>. If two values have different <code><a href="/docs/v4.3.7/List#hashCode()">hashCode</a></code>s,
they must not be equal.</p>
1d:Ted9,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> deepData <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
deepData<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 123</span></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js
Collection, and getIn() can access those values as well:</p></p>
<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> deepData <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
deepData<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 123</span></code></p>
1e:Ta60,<p>For example, to sum a Seq after mapping and filtering:</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>

<p><span class="token block-keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> collection<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sum <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></p>
<p><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
<span class="token comment">// 6</span></code></p>
1f:T84c,<p>This is similar to <code><a href="/docs/v4.3.7/List">List(collection)</a></code>, but provided to allow for chained
expressions. However, when called on <code><a href="/docs/v4.3.7/Map">Map</a></code> or other keyed collections,
<code>collection<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> discards the keys and creates a list of only the
values, whereas <code><a href="/docs/v4.3.7/List">List(collection)</a></code> creates a list of entry tuples.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'Banana'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span> <span class="token comment">// List [ [ "a", "Apple" ], [ "b", "Banana" ] ]</span>
myMap<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// List [ "Apple", "Banana" ]</span></code>20:T8cf,<p>This is useful if you want to operate on an
Collection.Indexed and preserve the [index, value] pairs.</p>
<p>The returned Seq will have identical iteration order as
this Collection.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> indexedSeq <span class="token operator">=</span> <span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ "A", "B", "C" ]</span>
indexedSeq<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ "B" ]</span>
<span class="token keyword">const</span> keyedSeq <span class="token operator">=</span> indexedSeq<span class="token punctuation">.</span><span class="token function">toKeyedSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Seq { 0: "A", 1: "B", 2: "C" }</span>
keyedSeq<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span>
<span class="token comment">// Seq { 1: "B" }</span></code>21:T75d,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filterNot</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// Map { "a": 1, "c": 3 }</span></code><p>Note: <code><a href="/docs/v4.3.7/List#filterNot()">filterNot()</a></code> always returns a new instance, even if it results in
not filtering out any values.</p></p>
22:T1139,<p>If a <code><span class="t param">comparator</span></code> is not provided, a default comparator uses <code><span class="token operator">&lt;</span></code> and <code><span class="token operator">></span></code>.</p>
<p><code><span class="token function">comparator</span><span class="token punctuation">(</span>valueA<span class="token punctuation">,</span> valueB<span class="token punctuation">)</span></code>:</p>
<ul>
<li>Returns <code><span class="token number">0</span></code> if the elements should not be swapped.</li>
<li>Returns <code><span class="token operator">-</span><span class="token number">1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>
<li>Returns <code><span class="token number">1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>
<li>Alternatively, can return a value of the <code><span class="token qualifier">Pair</span><span class="token qualifier">Sorting</span></code> enum type</li>
<li>Is pure, i.e. it must always return the same value for the same pair
of values.</li>
</ul>
<p>When sorting collections which have no defined order, their ordered
equivalents will be returned. e.g. <code>map<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> returns OrderedMap.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">"c"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-property property">"a"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">"b"</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// OrderedMap { "a": 1, "b": 2, "c": 3 }</span></code><p>Note: <code><a href="/docs/v4.3.7/List#sort()">sort()</a></code> Always returns a new instance, even if the original was
already sorted.</p>
<p>Note: This is always an eager operation.</p>
23:Ta71,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> beattles <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token qualifier">John</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Lennon"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token qualifier">Paul</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"McCartney"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token qualifier">George</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Harrison"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token qualifier">Ringo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Starr"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
beattles<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token parameter">member</span> <span class="token operator">=></span> member<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code><p>Note: <code><a href="/docs/v4.3.7/List#sortBy()">sortBy()</a></code> Always returns a new instance, even if the original was
already sorted.</p></p>
<p>Note: This is always an eager operation.</p>
24:Tdc1,<p>Note: This is always an eager operation.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span><span class="token punctuation">,</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> listOfMaps <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> groupsOfMaps <span class="token operator">=</span> listOfMaps<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'v'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Map {</span>
<span class="token comment">//   0: List [ Map{ "v": 0 }, Map { "v": 0 } ],</span>
<span class="token comment">//   1: List [ Map{ "v": 1 }, Map { "v": 1 } ],</span>
<span class="token comment">//   2: List [ Map{ "v": 2 } ],</span>
<span class="token comment">// }</span></code>25:T403,<p>If begin is negative, it is offset from the end of the Collection. e.g.
<code><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></code> returns a Collection of the last two entries. If it is not
provided the new Collection will begin at the beginning of this Collection.</p>
<p>If end is negative, it is offset from the end of the Collection. e.g.
<code><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code> returns a Collection of everything but the last entry. If
it is not provided, the new Collection will continue through the end of
this Collection.</p>
<p>If the requested slice is equivalent to the current Collection, then it
will return itself.</p>
26:T672,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skipWhile</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">g</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "cat", "hat", "god" ]</span></code></p>
27:T66d,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skipUntil</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hat</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "hat", "god" ]</span></code></p>
28:T66c,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "dog", "frog" ]</span></code></p>
29:T66d,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">at</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "dog", "frog" ]</span></code></p>
2a:T9ed,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Max'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Lili'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
l<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>avgHit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will output { name: 'Max', avgHit: 3 }</span></code></p>
2b:T9ed,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Max'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Lili'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
l<span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>avgHit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will output { name: 'Bob', avgHit: 1 }</span></code></p>
7:["$","$L19",null,{"def":{"qualifiedName":"Seq.Keyed","doc":{"synopsis":"<p><code><a href=\"/docs/v4.3.7/Seq\">Seq</a></code> which represents key-value pairs.</p>\n","description":"","notes":[]},"call":{"name":"Seq.Keyed","label":"Seq.Keyed()","id":"Seq.Keyed()","signatures":[{"line":2893,"typeParams":["K","V"],"params":[{"name":"collection","type":{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}]},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v4.3.7/Seq.Keyed"}},{"line":2894,"typeParams":["V"],"params":[{"name":"obj","type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":7},{"k":11,"param":"V"}],"url":"/docs/v4.3.7/Seq.Keyed"}}],"url":"/docs/v4.3.7/Seq.Keyed#Seq.Keyed()"},"interface":{"members":{"toJS":{"name":"toJS","label":"toJS()","id":"toJS()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Deeply converts this Keyed Seq to equivalent native JavaScript Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":2902,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":12,"name":"DeepCopy","args":[{"k":11,"param":"V"}]}}]}}],"url":"/docs/v4.3.7/Seq.Keyed#toJS()","overrides":{"interface":"Collection","label":"toJS()","url":"/docs/v4.3.7/Collection#toJS()"}},"toJSON":{"name":"toJSON","label":"toJSON()","id":"toJSON()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Keyed Seq to equivalent native JavaScript Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":2909,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"V"}}]}}],"url":"/docs/v4.3.7/Seq.Keyed#toJSON()","overrides":{"interface":"Collection","label":"toJSON()","url":"/docs/v4.3.7/Collection#toJSON()"}},"toArray":{"name":"toArray","label":"toArray()","id":"toArray()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this collection to an Array.</p>\n","description":"","notes":[]},"signatures":[{"line":2914,"type":{"k":12,"name":"Array","args":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}]}}],"url":"/docs/v4.3.7/Seq.Keyed#toArray()","overrides":{"interface":"Collection","label":"toArray()","url":"/docs/v4.3.7/Collection#toArray()"}},"toSeq":{"name":"toSeq","label":"toSeq()","id":"toSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns itself</p>\n","description":"","notes":[]},"signatures":[{"line":2919,"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#toSeq()","overrides":{"interface":"Collection","label":"toSeq()","url":"/docs/v4.3.7/Collection#toSeq()"}},"concat":{"name":"concat","label":"concat()","id":"concat()","group":"Combination","signatures":[{"line":2927,"typeParams":["KC","VC"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"KC"},{"k":11,"param":"VC"}]}]}]},"varArgs":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":13,"types":[{"k":11,"param":"K"},{"k":11,"param":"KC"}]},{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"VC"}]}],"url":"/docs/v4.3.7/Seq.Keyed"}},{"line":2930,"typeParams":["C"],"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":{"k":11,"param":"C"}}]}]},"varArgs":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":13,"types":[{"k":11,"param":"K"},{"k":7}]},{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"C"}]}],"url":"/docs/v4.3.7/Seq.Keyed"}}],"url":"/docs/v4.3.7/Seq.Keyed#concat()","overrides":{"interface":"Collection","label":"concat()","url":"/docs/v4.3.7/Collection#concat()"}},"map":{"name":"map","label":"map()","id":"map()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Seq.Keyed with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"$1a","notes":[]},"signatures":[{"line":2947,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"M"}],"url":"/docs/v4.3.7/Seq.Keyed"}}],"url":"/docs/v4.3.7/Seq.Keyed#map()","overrides":{"interface":"Seq","label":"map()","url":"/docs/v4.3.7/Seq#map()"}},"mapKeys":{"name":"mapKeys","label":"mapKeys()","id":"mapKeys()","group":"Sequence functions","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p>Collection.Keyed.mapKeys</p>\n"}]},"signatures":[{"line":2955,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"M"},{"k":11,"param":"V"}],"url":"/docs/v4.3.7/Seq.Keyed"}}],"url":"/docs/v4.3.7/Seq.Keyed#mapKeys()","overrides":{"interface":"Collection.Keyed","label":"mapKeys()","url":"/docs/v4.3.7/Collection.Keyed#mapKeys()"}},"mapEntries":{"name":"mapEntries","label":"mapEntries()","id":"mapEntries()","group":"Sequence functions","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p>Collection.Keyed.mapEntries</p>\n"}]},"signatures":[{"line":2963,"typeParams":["KM","VM"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"entry","type":{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}},{"name":"index","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":13,"types":[{"k":15,"types":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}]},{"k":4}]}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}],"url":"/docs/v4.3.7/Seq.Keyed"}}],"url":"/docs/v4.3.7/Seq.Keyed#mapEntries()","overrides":{"interface":"Collection.Keyed","label":"mapEntries()","url":"/docs/v4.3.7/Collection.Keyed#mapEntries()"}},"flatMap":{"name":"flatMap","label":"flatMap()","id":"flatMap()","group":"Sequence algorithms","doc":{"synopsis":"<p>Flat-maps the Seq, returning a Seq of the same type.</p>\n","description":"<p>Similar to <code>seq<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token primitive\">true</span><span class=\"token punctuation\">)</span></code>.</p>\n","notes":[]},"signatures":[{"line":2977,"typeParams":["KM","VM"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}]}]}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"KM"},{"k":11,"param":"VM"}],"url":"/docs/v4.3.7/Seq.Keyed"}}],"url":"/docs/v4.3.7/Seq.Keyed#flatMap()","overrides":{"interface":"Seq","label":"flatMap()","url":"/docs/v4.3.7/Seq#flatMap()"}},"filter":{"name":"filter","label":"filter()","id":"filter()","group":"Sequence algorithms","signatures":[{"line":2989,"typeParams":["F"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"F"}],"url":"/docs/v4.3.7/Seq.Keyed"}},{"line":2993,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#filter()","overrides":{"interface":"Seq","label":"filter()","url":"/docs/v4.3.7/Seq#filter()"}},"partition":{"name":"partition","label":"partition()","id":"partition()","group":"Sequence algorithms","signatures":[{"line":3002,"typeParams":["F","C"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"this","type":{"k":11,"param":"C"}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":11,"param":"C"},"optional":true}],"type":{"k":15,"types":[{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}]},{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"F"}]}]}},{"line":3006,"typeParams":["C"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"this","type":{"k":11,"param":"C"}},{"name":"value","type":{"k":11,"param":"V"}},{"name":"key","type":{"k":11,"param":"K"}},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":11,"param":"C"},"optional":true}],"type":{"k":15,"types":[{"k":3},{"k":3}]}}],"url":"/docs/v4.3.7/Seq.Keyed#partition()","overrides":{"interface":"Seq","label":"partition()","url":"/docs/v4.3.7/Seq#partition()"}},"flip":{"name":"flip","label":"flip()","id":"flip()","group":"Sequence functions","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p>Collection.Keyed.flip</p>\n"}]},"signatures":[{"line":3014,"type":{"k":12,"name":"Seq.Keyed","args":[{"k":11,"param":"V"},{"k":11,"param":"K"}],"url":"/docs/v4.3.7/Seq.Keyed"}}],"url":"/docs/v4.3.7/Seq.Keyed#flip()","overrides":{"interface":"Collection.Keyed","label":"flip()","url":"/docs/v4.3.7/Collection.Keyed#flip()"}},"[Symbol.iterator]":{"name":"[Symbol.iterator]","label":"[Symbol.iterator]()","id":"[Symbol.iterator]()","group":"Iterators","signatures":[{"line":3016,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":[{"k":11,"param":"K"},{"k":11,"param":"V"}]}]}}],"url":"/docs/v4.3.7/Seq.Keyed#[Symbol.iterator]()","overrides":{"interface":"Collection","label":"[Symbol.iterator]()","url":"/docs/v4.3.7/Collection#[Symbol.iterator]()"}},"size":{"name":"size","label":"size","id":"size","line":3343,"doc":{"synopsis":"<p>Some Seqs can describe their size lazily. When this is the case,\nsize will be an integer. Otherwise it will be undefined.</p>\n","description":"<p>For example, Seqs returned from <code><a href=\"/docs/v4.3.7/Seq#map()\">map()</a></code> or <code><a href=\"/docs/v4.3.7/Seq#reverse()\">reverse()</a></code>\npreserve the size of the original <code><a href=\"/docs/v4.3.7/Seq\">Seq</a></code> while <code><a href=\"/docs/v4.3.7/Seq#filter()\">filter()</a></code> does not.</p>\n<p>Note: <code><a href=\"/docs/v4.3.7/Range()\">Range</a></code>, <code><a href=\"/docs/v4.3.7/Repeat()\">Repeat</a></code> and <code><a href=\"/docs/v4.3.7/Seq\">Seq</a></code>s made from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>s and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>s will\nalways have a size.</p>\n","notes":[]},"type":{"k":13,"types":[{"k":6},{"k":4}]},"url":"/docs/v4.3.7/Seq.Keyed#size","inherited":{"interface":"Seq","label":"size","url":"/docs/v4.3.7/Seq#size"}},"cacheResult":{"name":"cacheResult","label":"cacheResult()","id":"cacheResult()","group":"Force evaluation","doc":{"synopsis":"<p>Because Sequences are lazy and designed to be chained together, they do\nnot cache their results. For example, this map function is called a total\nof 6 times, as each <code><a href=\"/docs/v4.3.7/Seq#join()\">join</a></code> iterates the Seq of three values.</p>\n","description":"$1b","notes":[]},"signatures":[{"line":3367,"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#cacheResult()","inherited":{"interface":"Seq","label":"cacheResult()","url":"/docs/v4.3.7/Seq#cacheResult()"}},"equals":{"name":"equals","label":"equals()","id":"equals()","group":"Value equality","doc":{"synopsis":"<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/v4.3.7/is()\">Immutable.is()</a></code>.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\">Immutable</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span></code>, but provided to\nallow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4149,"params":[{"name":"other","type":{"k":2}}],"type":{"k":5}}],"url":"/docs/v4.3.7/Seq.Keyed#equals()","inherited":{"interface":"Collection","label":"equals()","url":"/docs/v4.3.7/Collection#equals()"}},"hashCode":{"name":"hashCode","label":"hashCode()","id":"hashCode()","group":"Value equality","doc":{"synopsis":"<p>Computes and returns the hashed identity for this Collection.</p>\n","description":"$1c","notes":[]},"signatures":[{"line":4175,"type":{"k":6}}],"url":"/docs/v4.3.7/Seq.Keyed#hashCode()","inherited":{"interface":"Collection","label":"hashCode()","url":"/docs/v4.3.7/Collection#hashCode()"}},"get":{"name":"get","label":"get()","id":"get()","group":"Reading values","signatures":[{"line":4187,"typeParams":["NSV"],"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"notSetValue","type":{"k":11,"param":"NSV"}}],"type":{"k":13,"types":[{"k":11,"param":"V"},{"k":11,"param":"NSV"}]}},{"line":4188,"params":[{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#get()","inherited":{"interface":"Collection","label":"get()","url":"/docs/v4.3.7/Collection#get()"}},"has":{"name":"has","label":"has()","id":"has()","group":"Reading values","doc":{"synopsis":"<p>True if a key exists within this <code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code>, using <code><a href=\"/docs/v4.3.7/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[]},"signatures":[{"line":4194,"params":[{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"}],"type":{"k":5}}],"url":"/docs/v4.3.7/Seq.Keyed#has()","inherited":{"interface":"Collection","label":"has()","url":"/docs/v4.3.7/Collection#has()"}},"includes":{"name":"includes","label":"includes()","id":"includes()","group":"Reading values","doc":{"synopsis":"<p>True if a value exists within this <code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code>, using <code><a href=\"/docs/v4.3.7/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[{"name":"alias","body":"contains"}]},"signatures":[{"line":4201,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"}],"type":{"k":5}}],"url":"/docs/v4.3.7/Seq.Keyed#includes()","inherited":{"interface":"Collection","label":"includes()","url":"/docs/v4.3.7/Collection#includes()"}},"first":{"name":"first","label":"first()","id":"first()","group":"Reading values","doc":{"synopsis":"<p>In case the <code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code> is not empty returns the first element of the\n<code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":4210,"typeParams":["NSV"],"params":[{"name":"notSetValue","type":{"k":11,"param":"NSV"},"optional":true}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":11,"param":"NSV"}]}}],"url":"/docs/v4.3.7/Seq.Keyed#first()","inherited":{"interface":"Collection","label":"first()","url":"/docs/v4.3.7/Collection#first()"}},"last":{"name":"last","label":"last()","id":"last()","group":"Reading values","doc":{"synopsis":"<p>In case the <code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code> is not empty returns the last element of the\n<code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code>.\nIn case the <code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code> is empty returns the optional default\nvalue if provided, if no default value is provided returns undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":4218,"typeParams":["NSV"],"params":[{"name":"notSetValue","type":{"k":11,"param":"NSV"},"optional":true}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":11,"param":"NSV"}]}}],"url":"/docs/v4.3.7/Seq.Keyed#last()","inherited":{"interface":"Collection","label":"last()","url":"/docs/v4.3.7/Collection#last()"}},"getIn":{"name":"getIn","label":"getIn()","id":"getIn()","group":"Reading deep values","doc":{"synopsis":"<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n","description":"$1d","notes":[]},"signatures":[{"line":4243,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"notSetValue","type":{"k":2},"optional":true}],"type":{"k":2}}],"url":"/docs/v4.3.7/Seq.Keyed#getIn()","inherited":{"interface":"Collection","label":"getIn()","url":"/docs/v4.3.7/Collection#getIn()"}},"hasIn":{"name":"hasIn","label":"hasIn()","id":"hasIn()","group":"Reading deep values","doc":{"synopsis":"<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n","description":"","notes":[]},"signatures":[{"line":4249,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":5}}],"url":"/docs/v4.3.7/Seq.Keyed#hasIn()","inherited":{"interface":"Collection","label":"hasIn()","url":"/docs/v4.3.7/Collection#hasIn()"}},"update":{"name":"update","label":"update()","id":"update()","group":"Persistent changes","doc":{"synopsis":"<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n","description":"$1e","notes":[]},"signatures":[{"line":4274,"typeParams":["R"],"params":[{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v4.3.7/Seq.Keyed#update()","inherited":{"interface":"Collection","label":"update()","url":"/docs/v4.3.7/Collection#update()"}},"toObject":{"name":"toObject","label":"toObject()","id":"toObject()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Collection to an Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":4309,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":"$7:props:def:interface:members:get:signatures:0:type:types:0"}]}}],"url":"/docs/v4.3.7/Seq.Keyed#toObject()","inherited":{"interface":"Collection","label":"toObject()","url":"/docs/v4.3.7/Collection#toObject()"}},"toMap":{"name":"toMap","label":"toMap()","id":"toMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toKeyedSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4319,"type":{"k":12,"name":"Map","args":["$7:props:def:interface:members:get:signatures:0:params:0:type","$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/Map"}}],"url":"/docs/v4.3.7/Seq.Keyed#toMap()","inherited":{"interface":"Collection","label":"toMap()","url":"/docs/v4.3.7/Collection#toMap()"}},"toOrderedMap":{"name":"toOrderedMap","label":"toOrderedMap()","id":"toOrderedMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">OrderedMap</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toKeyedSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4327,"type":{"k":12,"name":"OrderedMap","args":["$7:props:def:interface:members:get:signatures:0:params:0:type","$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/OrderedMap"}}],"url":"/docs/v4.3.7/Seq.Keyed#toOrderedMap()","inherited":{"interface":"Collection","label":"toOrderedMap()","url":"/docs/v4.3.7/Collection#toOrderedMap()"}},"toSet":{"name":"toSet","label":"toSet()","id":"toSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v4.3.7/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":4336,"type":{"k":12,"name":"Set","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/Set"}}],"url":"/docs/v4.3.7/Seq.Keyed#toSet()","inherited":{"interface":"Collection","label":"toSet()","url":"/docs/v4.3.7/Collection#toSet()"}},"toOrderedSet":{"name":"toOrderedSet","label":"toOrderedSet()","id":"toOrderedSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">OrderedSet</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4345,"type":{"k":12,"name":"OrderedSet","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/OrderedSet"}}],"url":"/docs/v4.3.7/Seq.Keyed#toOrderedSet()","inherited":{"interface":"Collection","label":"toOrderedSet()","url":"/docs/v4.3.7/Collection#toOrderedSet()"}},"toList":{"name":"toList","label":"toList()","id":"toList()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a List, discarding keys.</p>\n","description":"$1f","notes":[]},"signatures":[{"line":4363,"type":{"k":12,"name":"List","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/List"}}],"url":"/docs/v4.3.7/Seq.Keyed#toList()","inherited":{"interface":"Collection","label":"toList()","url":"/docs/v4.3.7/Collection#toList()"}},"toStack":{"name":"toStack","label":"toStack()","id":"toStack()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v4.3.7/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":4372,"type":{"k":12,"name":"Stack","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/Stack"}}],"url":"/docs/v4.3.7/Seq.Keyed#toStack()","inherited":{"interface":"Collection","label":"toStack()","url":"/docs/v4.3.7/Collection#toStack()"}},"toKeyedSeq":{"name":"toKeyedSeq","label":"toKeyedSeq()","id":"toKeyedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n","description":"$20","notes":[]},"signatures":[{"line":4404,"type":{"k":12,"name":"Seq.Keyed","args":["$7:props:def:interface:members:get:signatures:0:params:0:type","$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/Seq.Keyed"}}],"url":"/docs/v4.3.7/Seq.Keyed#toKeyedSeq()","inherited":{"interface":"Collection","label":"toKeyedSeq()","url":"/docs/v4.3.7/Collection#toKeyedSeq()"}},"toIndexedSeq":{"name":"toIndexedSeq","label":"toIndexedSeq()","id":"toIndexedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4409,"type":{"k":12,"name":"Seq.Indexed","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/Seq.Indexed"}}],"url":"/docs/v4.3.7/Seq.Keyed#toIndexedSeq()","inherited":{"interface":"Collection","label":"toIndexedSeq()","url":"/docs/v4.3.7/Collection#toIndexedSeq()"}},"toSetSeq":{"name":"toSetSeq","label":"toSetSeq()","id":"toSetSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4414,"type":{"k":12,"name":"Seq.Set","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/Seq.Set"}}],"url":"/docs/v4.3.7/Seq.Keyed#toSetSeq()","inherited":{"interface":"Collection","label":"toSetSeq()","url":"/docs/v4.3.7/Collection#toSetSeq()"}},"keys":{"name":"keys","label":"keys()","id":"keys()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code>&#39;s keys.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v4.3.7/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4425,"type":{"k":12,"name":"IterableIterator","args":["$7:props:def:interface:members:get:signatures:0:params:0:type"]}}],"url":"/docs/v4.3.7/Seq.Keyed#keys()","inherited":{"interface":"Collection","label":"keys()","url":"/docs/v4.3.7/Collection#keys()"}},"values":{"name":"values","label":"values()","id":"values()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code>&#39;s values.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v4.3.7/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4434,"type":{"k":12,"name":"IterableIterator","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"]}}],"url":"/docs/v4.3.7/Seq.Keyed#values()","inherited":{"interface":"Collection","label":"values()","url":"/docs/v4.3.7/Collection#values()"}},"entries":{"name":"entries","label":"entries()","id":"entries()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\">[</span> key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">]</span></code> tuples.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v4.3.7/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4443,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":["$7:props:def:interface:members:get:signatures:0:params:0:type","$7:props:def:interface:members:get:signatures:0:type:types:0"]}]}}],"url":"/docs/v4.3.7/Seq.Keyed#entries()","inherited":{"interface":"Collection","label":"entries()","url":"/docs/v4.3.7/Collection#entries()"}},"keySeq":{"name":"keySeq","label":"keySeq()","id":"keySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n","description":"","notes":[]},"signatures":[{"line":4453,"type":{"k":12,"name":"Seq.Indexed","args":["$7:props:def:interface:members:get:signatures:0:params:0:type"],"url":"/docs/v4.3.7/Seq.Indexed"}}],"url":"/docs/v4.3.7/Seq.Keyed#keySeq()","inherited":{"interface":"Collection","label":"keySeq()","url":"/docs/v4.3.7/Collection#keySeq()"}},"valueSeq":{"name":"valueSeq","label":"valueSeq()","id":"valueSeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4458,"type":{"k":12,"name":"Seq.Indexed","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/Seq.Indexed"}}],"url":"/docs/v4.3.7/Seq.Keyed#valueSeq()","inherited":{"interface":"Collection","label":"valueSeq()","url":"/docs/v4.3.7/Collection#valueSeq()"}},"entrySeq":{"name":"entrySeq","label":"entrySeq()","id":"entrySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n","description":"","notes":[]},"signatures":[{"line":4463,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":15,"types":["$7:props:def:interface:members:get:signatures:0:params:0:type","$7:props:def:interface:members:get:signatures:0:type:types:0"]}],"url":"/docs/v4.3.7/Seq.Indexed"}}],"url":"/docs/v4.3.7/Seq.Keyed#entrySeq()","inherited":{"interface":"Collection","label":"entrySeq()","url":"/docs/v4.3.7/Collection#entrySeq()"}},"filterNot":{"name":"filterNot","label":"filterNot()","id":"filterNot()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n","description":"$21","notes":[]},"signatures":[{"line":4531,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#filterNot()","inherited":{"interface":"Collection","label":"filterNot()","url":"/docs/v4.3.7/Collection#filterNot()"}},"reverse":{"name":"reverse","label":"reverse()","id":"reverse()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type in reverse order.</p>\n","description":"","notes":[]},"signatures":[{"line":4552,"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#reverse()","inherited":{"interface":"Collection","label":"reverse()","url":"/docs/v4.3.7/Collection#reverse()"}},"sort":{"name":"sort","label":"sort()","id":"sort()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n","description":"$22","notes":[]},"signatures":[{"line":4588,"params":[{"name":"comparator","type":{"k":12,"name":"Comparator","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"]},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#sort()","inherited":{"interface":"Collection","label":"sort()","url":"/docs/v4.3.7/Collection#sort()"}},"sortBy":{"name":"sortBy","label":"sortBy()","id":"sortBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.3.7/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n","description":"$23","notes":[]},"signatures":[{"line":4611,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":12,"name":"Comparator","args":[{"k":11,"param":"C"}]},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#sortBy()","inherited":{"interface":"Collection","label":"sortBy()","url":"/docs/v4.3.7/Collection#sortBy()"}},"groupBy":{"name":"groupBy","label":"groupBy()","id":"groupBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/v4.3.7/Map\">Map</a></code> of <code><a href=\"/docs/v4.3.7/Collection\">Collection</a></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"$24","notes":[]},"signatures":[{"line":4640,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":3}],"url":"/docs/v4.3.7/Map"}}],"url":"/docs/v4.3.7/Seq.Keyed#groupBy()","inherited":{"interface":"Collection","label":"groupBy()","url":"/docs/v4.3.7/Collection#groupBy()"}},"forEach":{"name":"forEach","label":"forEach()","id":"forEach()","group":"Side effects","doc":{"synopsis":"<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n","description":"<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\">false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n","notes":[]},"signatures":[{"line":4654,"params":[{"name":"sideEffect","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":6}}],"url":"/docs/v4.3.7/Seq.Keyed#forEach()","inherited":{"interface":"Collection","label":"forEach()","url":"/docs/v4.3.7/Collection#forEach()"}},"slice":{"name":"slice","label":"slice()","id":"slice()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n","description":"$25","notes":[]},"signatures":[{"line":4677,"params":[{"name":"begin","type":{"k":6},"optional":true},{"name":"end","type":{"k":6},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#slice()","inherited":{"interface":"Collection","label":"slice()","url":"/docs/v4.3.7/Collection#slice()"}},"rest":{"name":"rest","label":"rest()","id":"rest()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n","description":"","notes":[]},"signatures":[{"line":4683,"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#rest()","inherited":{"interface":"Collection","label":"rest()","url":"/docs/v4.3.7/Collection#rest()"}},"butLast":{"name":"butLast","label":"butLast()","id":"butLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n","description":"","notes":[]},"signatures":[{"line":4689,"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#butLast()","inherited":{"interface":"Collection","label":"butLast()","url":"/docs/v4.3.7/Collection#butLast()"}},"skip":{"name":"skip","label":"skip()","id":"skip()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4695,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#skip()","inherited":{"interface":"Collection","label":"skip()","url":"/docs/v4.3.7/Collection#skip()"}},"skipLast":{"name":"skipLast","label":"skipLast()","id":"skipLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4701,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#skipLast()","inherited":{"interface":"Collection","label":"skipLast()","url":"/docs/v4.3.7/Collection#skipLast()"}},"skipWhile":{"name":"skipWhile","label":"skipWhile()","id":"skipWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n","description":"$26","notes":[]},"signatures":[{"line":4715,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#skipWhile()","inherited":{"interface":"Collection","label":"skipWhile()","url":"/docs/v4.3.7/Collection#skipWhile()"}},"skipUntil":{"name":"skipUntil","label":"skipUntil()","id":"skipUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n","description":"$27","notes":[]},"signatures":[{"line":4732,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#skipUntil()","inherited":{"interface":"Collection","label":"skipUntil()","url":"/docs/v4.3.7/Collection#skipUntil()"}},"take":{"name":"take","label":"take()","id":"take()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4741,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#take()","inherited":{"interface":"Collection","label":"take()","url":"/docs/v4.3.7/Collection#take()"}},"takeLast":{"name":"takeLast","label":"takeLast()","id":"takeLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4747,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#takeLast()","inherited":{"interface":"Collection","label":"takeLast()","url":"/docs/v4.3.7/Collection#takeLast()"}},"takeWhile":{"name":"takeWhile","label":"takeWhile()","id":"takeWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"$28","notes":[]},"signatures":[{"line":4761,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#takeWhile()","inherited":{"interface":"Collection","label":"takeWhile()","url":"/docs/v4.3.7/Collection#takeWhile()"}},"takeUntil":{"name":"takeUntil","label":"takeUntil()","id":"takeUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n","description":"$29","notes":[]},"signatures":[{"line":4778,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v4.3.7/Seq.Keyed#takeUntil()","inherited":{"interface":"Collection","label":"takeUntil()","url":"/docs/v4.3.7/Collection#takeUntil()"}},"flatten":{"name":"flatten","label":"flatten()","id":"flatten()","group":"tslint:disable-next-line unified-signatures","signatures":[{"line":4809,"params":[{"name":"depth","type":{"k":6},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":2},{"k":2}],"url":"/docs/v4.3.7/Collection"}},{"line":4811,"params":[{"name":"shallow","type":{"k":5},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":2},{"k":2}],"url":"/docs/v4.3.7/Collection"}}],"url":"/docs/v4.3.7/Seq.Keyed#flatten()","inherited":{"interface":"Collection","label":"flatten()","url":"/docs/v4.3.7/Collection#flatten()"}},"reduce":{"name":"reduce","label":"reduce()","id":"reduce()","group":"Reducing a value","signatures":[{"line":4845,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":11,"param":"R"}},{"line":4850,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":11,"param":"R"}]}},{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v4.3.7/Seq.Keyed#reduce()","inherited":{"interface":"Collection","label":"reduce()","url":"/docs/v4.3.7/Collection#reduce()"}},"reduceRight":{"name":"reduceRight","label":"reduceRight()","id":"reduceRight()","group":"Reducing a value","signatures":[{"line":4860,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":11,"param":"R"}},{"line":4865,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":11,"param":"R"}]}},{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v4.3.7/Seq.Keyed#reduceRight()","inherited":{"interface":"Collection","label":"reduceRight()","url":"/docs/v4.3.7/Collection#reduceRight()"}},"every":{"name":"every","label":"every()","id":"every()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4872,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":5}}],"url":"/docs/v4.3.7/Seq.Keyed#every()","inherited":{"interface":"Collection","label":"every()","url":"/docs/v4.3.7/Collection#every()"}},"some":{"name":"some","label":"some()","id":"some()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4880,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":5}}],"url":"/docs/v4.3.7/Seq.Keyed#some()","inherited":{"interface":"Collection","label":"some()","url":"/docs/v4.3.7/Collection#some()"}},"join":{"name":"join","label":"join()","id":"join()","group":"Reducing a value","doc":{"synopsis":"<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\">\",\"</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":4889,"params":[{"name":"separator","type":{"k":7},"optional":true}],"type":{"k":7}}],"url":"/docs/v4.3.7/Seq.Keyed#join()","inherited":{"interface":"Collection","label":"join()","url":"/docs/v4.3.7/Collection#join()"}},"isEmpty":{"name":"isEmpty","label":"isEmpty()","id":"isEmpty()","group":"Reducing a value","doc":{"synopsis":"<p>Returns true if this Collection includes no values.</p>\n","description":"<p>For some lazy <code><a href=\"/docs/v4.3.7/Seq\">Seq</a></code>, <code><a href=\"/docs/v4.3.7/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n","notes":[]},"signatures":[{"line":4897,"type":{"k":5}}],"url":"/docs/v4.3.7/Seq.Keyed#isEmpty()","inherited":{"interface":"Collection","label":"isEmpty()","url":"/docs/v4.3.7/Collection#isEmpty()"}},"count":{"name":"count","label":"count()","id":"count()","group":"Reducing a value","signatures":[{"line":4909,"type":{"k":6}},{"line":4910,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":6}}],"url":"/docs/v4.3.7/Seq.Keyed#count()","inherited":{"interface":"Collection","label":"count()","url":"/docs/v4.3.7/Collection#count()"}},"countBy":{"name":"countBy","label":"countBy()","id":"countBy()","group":"Reducing a value","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/v4.3.7/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n","notes":[]},"signatures":[{"line":4921,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":6}],"url":"/docs/v4.3.7/Map"}}],"url":"/docs/v4.3.7/Seq.Keyed#countBy()","inherited":{"interface":"Collection","label":"countBy()","url":"/docs/v4.3.7/Collection#countBy()"}},"find":{"name":"find","label":"find()","id":"find()","group":"Search for value","doc":{"synopsis":"<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":4931,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$7:props:def:interface:members:get:signatures:0:type:types:0","optional":true}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#find()","inherited":{"interface":"Collection","label":"find()","url":"/docs/v4.3.7/Collection#find()"}},"findLast":{"name":"findLast","label":"findLast()","id":"findLast()","group":"Search for value","doc":{"synopsis":"<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":4942,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$7:props:def:interface:members:get:signatures:0:type:types:0","optional":true}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#findLast()","inherited":{"interface":"Collection","label":"findLast()","url":"/docs/v4.3.7/Collection#findLast()"}},"findEntry":{"name":"findEntry","label":"findEntry()","id":"findEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":4951,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$7:props:def:interface:members:get:signatures:0:type:types:0","optional":true}],"type":{"k":13,"types":[{"k":15,"types":["$7:props:def:interface:members:get:signatures:0:params:0:type","$7:props:def:interface:members:get:signatures:0:type:types:0"]},{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#findEntry()","inherited":{"interface":"Collection","label":"findEntry()","url":"/docs/v4.3.7/Collection#findEntry()"}},"findLastEntry":{"name":"findLastEntry","label":"findLastEntry()","id":"findLastEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":4963,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$7:props:def:interface:members:get:signatures:0:type:types:0","optional":true}],"type":{"k":13,"types":[{"k":15,"types":["$7:props:def:interface:members:get:signatures:0:params:0:type","$7:props:def:interface:members:get:signatures:0:type:types:0"]},{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#findLastEntry()","inherited":{"interface":"Collection","label":"findLastEntry()","url":"/docs/v4.3.7/Collection#findLastEntry()"}},"findKey":{"name":"findKey","label":"findKey()","id":"findKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":4972,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:params:0:type",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#findKey()","inherited":{"interface":"Collection","label":"findKey()","url":"/docs/v4.3.7/Collection#findKey()"}},"findLastKey":{"name":"findLastKey","label":"findLastKey()","id":"findLastKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":4982,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:params:0:type",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#findLastKey()","inherited":{"interface":"Collection","label":"findLastKey()","url":"/docs/v4.3.7/Collection#findLastKey()"}},"keyOf":{"name":"keyOf","label":"keyOf()","id":"keyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":4990,"params":[{"name":"searchValue","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:params:0:type",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#keyOf()","inherited":{"interface":"Collection","label":"keyOf()","url":"/docs/v4.3.7/Collection#keyOf()"}},"lastKeyOf":{"name":"lastKeyOf","label":"lastKeyOf()","id":"lastKeyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":4995,"params":[{"name":"searchValue","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:params:0:type",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#lastKeyOf()","inherited":{"interface":"Collection","label":"lastKeyOf()","url":"/docs/v4.3.7/Collection#lastKeyOf()"}},"max":{"name":"max","label":"max()","id":"max()","group":"Search for value","doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/v4.3.7/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\">></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v4.3.7/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\">></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":5012,"params":[{"name":"comparator","type":{"k":12,"name":"Comparator","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"]},"optional":true}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#max()","inherited":{"interface":"Collection","label":"max()","url":"/docs/v4.3.7/Collection#max()"}},"maxBy":{"name":"maxBy","label":"maxBy()","id":"maxBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.3.7/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"$2a","notes":[]},"signatures":[{"line":5029,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":12,"name":"Comparator","args":[{"k":11,"param":"C"}]},"optional":true}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#maxBy()","inherited":{"interface":"Collection","label":"maxBy()","url":"/docs/v4.3.7/Collection#maxBy()"}},"min":{"name":"min","label":"min()","id":"min()","group":"Search for value","doc":{"synopsis":"<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/v4.3.7/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\">&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v4.3.7/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\">&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":5049,"params":[{"name":"comparator","type":{"k":12,"name":"Comparator","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"]},"optional":true}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#min()","inherited":{"interface":"Collection","label":"min()","url":"/docs/v4.3.7/Collection#min()"}},"minBy":{"name":"minBy","label":"minBy()","id":"minBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v4.3.7/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"$2b","notes":[]},"signatures":[{"line":5066,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$7:props:def:interface:members:get:signatures:0:type:types:0"},{"name":"key","type":"$7:props:def:interface:members:get:signatures:0:params:0:type"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":12,"name":"Comparator","args":[{"k":11,"param":"C"}]},"optional":true}],"type":{"k":13,"types":["$7:props:def:interface:members:get:signatures:0:type:types:0",{"k":4}]}}],"url":"/docs/v4.3.7/Seq.Keyed#minBy()","inherited":{"interface":"Collection","label":"minBy()","url":"/docs/v4.3.7/Collection#minBy()"}},"isSubset":{"name":"isSubset","label":"isSubset()","id":"isSubset()","group":"Comparison","doc":{"synopsis":"<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":5076,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"]}}],"type":{"k":5}}],"url":"/docs/v4.3.7/Seq.Keyed#isSubset()","inherited":{"interface":"Collection","label":"isSubset()","url":"/docs/v4.3.7/Collection#isSubset()"}},"isSuperset":{"name":"isSuperset","label":"isSuperset()","id":"isSuperset()","group":"Comparison","doc":{"synopsis":"<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":5081,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7:props:def:interface:members:get:signatures:0:type:types:0"]}}],"type":{"k":5}}],"url":"/docs/v4.3.7/Seq.Keyed#isSuperset()","inherited":{"interface":"Collection","label":"isSuperset()","url":"/docs/v4.3.7/Collection#isSuperset()"}}},"line":2896,"typeParams":["K","V"],"extends":[{"k":12,"name":"Seq","args":["$7:props:def:interface:members:get:signatures:0:params:0:type","$7:props:def:interface:members:get:signatures:0:type:types:0"],"url":"/docs/v4.3.7/Seq"},{"k":12,"name":"Collection.Keyed","args":[{"k":11,"param":"K"},{"k":11,"param":"V"}],"url":"/docs/v4.3.7/Collection.Keyed"}]},"label":"Seq.Keyed","url":"/docs/v4.3.7/Seq.Keyed"},"sidebarLinks":[{"label":"List","url":"/docs/v4.3.7/List"},{"label":"Map","url":"/docs/v4.3.7/Map"},{"label":"OrderedMap","url":"/docs/v4.3.7/OrderedMap"},{"label":"Set","url":"/docs/v4.3.7/Set"},{"label":"OrderedSet","url":"/docs/v4.3.7/OrderedSet"},{"label":"Stack","url":"/docs/v4.3.7/Stack"},{"label":"Range()","url":"/docs/v4.3.7/Range()"},{"label":"Repeat()","url":"/docs/v4.3.7/Repeat()"},{"label":"Record","url":"/docs/v4.3.7/Record"},{"label":"Record.Factory","url":"/docs/v4.3.7/Record.Factory"},{"label":"Seq","url":"/docs/v4.3.7/Seq"},{"label":"Seq.Keyed","url":"/docs/v4.3.7/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v4.3.7/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v4.3.7/Seq.Set"},{"label":"Collection","url":"/docs/v4.3.7/Collection"},{"label":"Collection.Keyed","url":"/docs/v4.3.7/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v4.3.7/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v4.3.7/Collection.Set"},{"label":"ValueObject","url":"/docs/v4.3.7/ValueObject"},{"label":"fromJS()","url":"/docs/v4.3.7/fromJS()"},{"label":"is()","url":"/docs/v4.3.7/is()"},{"label":"hash()","url":"/docs/v4.3.7/hash()"},{"label":"isImmutable()","url":"/docs/v4.3.7/isImmutable()"},{"label":"isCollection()","url":"/docs/v4.3.7/isCollection()"},{"label":"isKeyed()","url":"/docs/v4.3.7/isKeyed()"},{"label":"isIndexed()","url":"/docs/v4.3.7/isIndexed()"},{"label":"isAssociative()","url":"/docs/v4.3.7/isAssociative()"},{"label":"isOrdered()","url":"/docs/v4.3.7/isOrdered()"},{"label":"isValueObject()","url":"/docs/v4.3.7/isValueObject()"},{"label":"isSeq()","url":"/docs/v4.3.7/isSeq()"},{"label":"isList()","url":"/docs/v4.3.7/isList()"},{"label":"isMap()","url":"/docs/v4.3.7/isMap()"},{"label":"isOrderedMap()","url":"/docs/v4.3.7/isOrderedMap()"},{"label":"isStack()","url":"/docs/v4.3.7/isStack()"},{"label":"isSet()","url":"/docs/v4.3.7/isSet()"},{"label":"isOrderedSet()","url":"/docs/v4.3.7/isOrderedSet()"},{"label":"isRecord()","url":"/docs/v4.3.7/isRecord()"},{"label":"get()","url":"/docs/v4.3.7/get()"},{"label":"has()","url":"/docs/v4.3.7/has()"},{"label":"remove()","url":"/docs/v4.3.7/remove()"},{"label":"set()","url":"/docs/v4.3.7/set()"},{"label":"update()","url":"/docs/v4.3.7/update()"},{"label":"getIn()","url":"/docs/v4.3.7/getIn()"},{"label":"hasIn()","url":"/docs/v4.3.7/hasIn()"},{"label":"removeIn()","url":"/docs/v4.3.7/removeIn()"},{"label":"setIn()","url":"/docs/v4.3.7/setIn()"},{"label":"updateIn()","url":"/docs/v4.3.7/updateIn()"},{"label":"merge()","url":"/docs/v4.3.7/merge()"},{"label":"mergeWith()","url":"/docs/v4.3.7/mergeWith()"},{"label":"mergeDeep()","url":"/docs/v4.3.7/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/v4.3.7/mergeDeepWith()"}]}]
c:null
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"Seq.Keyed — Immutable.js"}],["$","meta","1",{"name":"robots","content":"noindex, follow"}],["$","link","2",{"rel":"canonical","href":"/docs/v5/Seq.Keyed/"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
